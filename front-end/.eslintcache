[{"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\index.tsx":"1","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\reportWebVitals.ts":"2","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\App.tsx":"3","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx":"4","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx":"5","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\User.tsx":"6","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx":"7","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx":"8","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx":"9"},{"size":628,"mtime":1611757241042,"results":"10","hashOfConfig":"11"},{"size":440,"mtime":1611753077758,"results":"12","hashOfConfig":"11"},{"size":778,"mtime":1612286430139,"results":"13","hashOfConfig":"11"},{"size":12480,"mtime":1612635238831,"results":"14","hashOfConfig":"11"},{"size":6700,"mtime":1612629606559,"results":"15","hashOfConfig":"11"},{"size":1192,"mtime":1612631830186,"results":"16","hashOfConfig":"11"},{"size":4051,"mtime":1612286471906,"results":"17","hashOfConfig":"11"},{"size":463,"mtime":1611757241039,"results":"18","hashOfConfig":"11"},{"size":462,"mtime":1611757241040,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"19e5i4x",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\index.tsx",[],["45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61"],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\reportWebVitals.ts",["62"],"import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\App.tsx",["63","64"],"import React, { ReactElement } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport { EditStudentInfo } from './page/EditStudentInfo';\r\nimport { SignUpPage } from './page/SignUpPage';\r\n\r\nexport function App (): ReactElement {\r\n\r\n\r\n  /*\r\n   * function deleteUser (event: MouseEvent<HTMLButtonElement>){\r\n   *   event.preventDefault ();\r\n   *   userAPI = new UserAPI ();\r\n   *   userID = user.userID;\r\n   *   userAPI.deleteUser (userID);\r\n   * }\r\n   */\r\n\r\n  return (\r\n    <Switch>\r\n        <Route exact path=\"/\">\r\n          <SignUpPage />\r\n\r\n        </Route>\r\n        <Route exact path=\"/editStudentInfo/:studentID\">\r\n          <EditStudentInfo />\r\n        </Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\n\r\n","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx",["65","66","67","68","69","70","71","72"],"import React, {\r\n    ChangeEvent, FormEvent, MouseEvent, ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, FormControl, Nav, Navbar, Row\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { Link, useParams, useRouteMatch } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\n\r\nexport function EditStudentInfo (): ReactElement {\r\n    let [user, setUser] = useState<User>(new User());\r\n    let updatedUser: User | undefined;\r\n    let inputField:\r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let param: any = useParams();\r\n    let [student, setStudent] = useState<User>(new User());\r\n    let date: string;\r\n    useEffect (() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.displayStudent(param.studentID).then(\r\n            (res) => {\r\n                setStudent(res.data);\r\n                // console.log(student.userName);\r\n            }\r\n    );\r\n    }, []);\r\n\r\n    function formatDate () {\r\n        let date1 = student.dob;\r\n        date = new Date(date1).toISOString().\r\n        replace(/ /u, ' ').\r\n        replace(/\\..+/u, '');\r\n        return date;\r\n    }\r\n    \r\n    function handleUserChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ){\r\n        updatedUser = user;\r\n        inputField = event.target;\r\n        updatedUser[\r\n            inputField.name as keyof UserIndexSignature\r\n        ] = inputField.value;\r\n        setUser(updatedUser);\r\n    }\r\n\r\n    function updateStudent (event: FormEvent<HTMLFormElement>, userID: number) {\r\n        event.preventDefault();\r\n        userAPI = new UserAPI();\r\n        userAPI.update(user, userID);\r\n        console.log(userID);\r\n    }\r\n \r\n    console.log(param.studentID);\r\n    // console.log(student.userName);\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <h1>{param.studentID}</h1>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form\r\n                                noValidate={false}\r\n                                onSubmit={(event) => {\r\n                                    updateStudent(event, param.studentID);\r\n                                }}\r\n                            >\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        User Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"userName\"\r\n                                        id=\"userName\"\r\n                                        pattern=\"^[\\\\p{L} .'-]+$\"\r\n                                        value={student.userName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {student.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        First Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"firstName\"\r\n                                        id=\"firstName\"\r\n                                        pattern=\"^[\\\\p{L} .'-]+$\"\r\n                                        placeholder={student.firstName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Last Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"lastName\"\r\n                                        id=\"lastName\"\r\n                                        pattern=\"^[\\\\p{L} .'-]+$\"\r\n                                        placeholder={student.lastName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Email:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"email\"\r\n                                        id=\"email\"\r\n                                        placeholder={student.email}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        DOB:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"dob\"\r\n                                        id=\"dob\"\r\n                                        value=\"07/08/1997\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Phone:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"phoneNumber\"\r\n                                        id=\"phoneNumber\"\r\n                                        placeholder={student.phoneNumber}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Gender\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"gender\"\r\n                                        id=\"gender\"\r\n                                        placeholder={student.gender}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Job:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"job\"\r\n                                        id=\"job\"\r\n                                        placeholder={student.job}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Password:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        autoComplete=\"off\"\r\n                                        autoFocus={false}\r\n                                        name=\"password\"\r\n                                        id=\"password\"\r\n                                        pattern=\"^\\\\S+$\"\r\n                                        placeholder=\"Your new password\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Account Status\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"accountStatus\"\r\n                                        id=\"accountStatus\"\r\n                                        placeholder={student.accountStatus}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button\r\n                                    variant=\"success\"\r\n                                    type=\"submit\"\r\n                                    block = {true}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx",["73"],"import React, { \r\n    ChangeEvent\r\n    , FormEvent\r\n    , MouseEvent\r\n    , ReactElement\r\n    , useState \r\n} from 'react';\r\nimport { User, UserIndexSignature } from '../model/User';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { \r\n    Button, Col, Container, Form, FormControl, Nav, Navbar, Row \r\n} from 'react-bootstrap';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nexport function SignUpPage (): ReactElement {\r\n    let [user, setUser] = useState<User> (new User ());\r\n    let updatedUser: User | undefined;\r\n    let inputField: \r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let history = useHistory();\r\n    // let userID: string;\r\n\r\n    function handleUserChange (\r\n        event: ChangeEvent<\r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ): void {  \r\n        updatedUser = user;\r\n        inputField = event.target;\r\n        updatedUser[\r\n            inputField.name as keyof UserIndexSignature\r\n        ] = inputField.value;\r\n        setUser (updatedUser);\r\n    } \r\n    \r\n    function signUp (event: FormEvent<HTMLFormElement>){\r\n        event.preventDefault ();\r\n        userAPI = new UserAPI ();\r\n        userAPI.registerUser (user);  \r\n    }\r\n\r\n    function add (){\r\n        history.push(`/editStudentInfo/2`);\r\n    }\r\n\r\n    return (\r\n        <Container fluid = {true} id = \"PageContentContainer\"> \r\n            <Container fluid = {true} id = \"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                    <Navbar bg = \"dark\" variant = \"dark\">\r\n                        <Navbar.Brand as = {Link} to = \"/\">\r\n                            Demo Prototype\r\n                        </Navbar.Brand>\r\n                        <Nav className = \"mr-auto\">\r\n                            <Nav.Link as = {Link} to = \"/\">\r\n                                Sign Up\r\n                            </Nav.Link>\r\n                            <Nav.Link as = {Link} to = \"/my-profile\">\r\n                                My Profile\r\n                            </Nav.Link>\r\n                            <Nav.Link href = \"#pricing\">Pricing</Nav.Link>\r\n                        </Nav>\r\n                        <Form inline>\r\n                            <FormControl \r\n                                type = \"text\" \r\n                                placeholder = \"Search\" \r\n                                className = \"mr-sm-2\" \r\n                            />\r\n                            <Button variant = \"info\">Search</Button>\r\n                        </Form>\r\n                    </Navbar>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id = \"PageBodyContainer\">\r\n                    <Row>\r\n                        <Col>\r\n                            <Form\r\n                                noValidate = {true}\r\n                                onSubmit = {(event) => {\r\n                                    signUp (event);\r\n                                }}\r\n                            >\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        User Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type = \"text\"\r\n                                        autoComplete = \"on\"\r\n                                        autoFocus = {true}\r\n                                        name = \"userName\"\r\n                                        id = \"userName\"\r\n                                        pattern = \"^[\\\\p{L} .'-]+$\"\r\n                                        placeholder = \"Any user name\"\r\n                                        required = {true}\r\n                                        spellCheck = {false}\r\n                                        // value = {user.userName}\r\n                                        onChange = {handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Email:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type = \"email\"\r\n                                        autoComplete = \"on\"\r\n                                        autoFocus = {false}\r\n                                        name = \"email\"\r\n                                        id = \"email\"\r\n                                        placeholder = \"Enter your email\"\r\n                                        required = {true}\r\n                                        spellCheck = {false}\r\n                                        onChange = {handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Password:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type = \"password\"\r\n                                        autoComplete = \"off\"\r\n                                        autoFocus = {false}\r\n                                        name = \"password\"\r\n                                        id = \"password\"\r\n                                        pattern = \"^\\\\S+$\"\r\n                                        placeholder = \"Your new password\"\r\n                                        required = {true}\r\n                                        spellCheck = {false}\r\n                                        onChange = {handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button \r\n                                    variant = \"success\"\r\n                                    type = \"submit\"\r\n                                    block = {true}\r\n                                >\r\n                                    Register\r\n                                </Button>\r\n                                <button onClick = {() => add()}>\r\n                                    add\r\n                                </button>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\User.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx",["74"],"import axios, { AxiosInstance, AxiosResponse } from \"axios\";\r\nimport { User } from \"../../model/User\";\r\nimport { AxiosInstanceGet } from \"./AxiosInstanceGet\";\r\nimport { TypeGuard } from \"./TypeGuard\";\r\n\r\nexport class UserAPI {\r\n\r\n    // Variables declaration:\r\n    private serverResponse: AxiosResponse | undefined;\r\n    private axiosInstance: AxiosInstance | undefined;\r\n    private axiosInstanceGetter: AxiosInstanceGet | undefined;\r\n    private typeGuardian: TypeGuard | undefined;\r\n    \r\n    public async registerUser (user: User): Promise<AxiosResponse> {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet ();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance ();\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.post (\r\n                \"/users\"\r\n                , user\r\n            );\r\n            this.typeGuardian = new TypeGuard ();\r\n            if (this.typeGuardian.isAxiosResponse (this.serverResponse)){\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error (\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error){\r\n            console.error (error.toJSON ());\r\n            return Promise.reject<AxiosResponse> (error);\r\n        }   \r\n    }\r\n\r\n    public async deleteUser (userID: string): Promise<AxiosResponse> {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet ();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance ();\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.delete (\r\n                `/users/${userID}`\r\n            );\r\n            this.typeGuardian = new TypeGuard ();\r\n            if (this.typeGuardian.isAxiosResponse (this.serverResponse)){\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error (\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error){\r\n            console.error (error.toJSON ());\r\n            return Promise.reject<AxiosResponse> (error);\r\n        }\r\n    }\r\n\r\n    public async update (user: User, userID: number): Promise<AxiosResponse> {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet ();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance ();\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.put (\r\n                `/editInfo/${userID}`\r\n                , user\r\n            );\r\n            this.typeGuardian = new TypeGuard ();\r\n            if (this.typeGuardian.isAxiosResponse (this.serverResponse)){\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error (\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error){\r\n            console.error (error.toJSON ());\r\n            return Promise.reject<AxiosResponse> (error);\r\n        }   \r\n    }\r\n    \r\n    public async displayStudent (userID: number): Promise<AxiosResponse> {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet ();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance ();\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.get (\r\n                `/getStudent/${userID}`\r\n            );\r\n            this.typeGuardian = new TypeGuard ();\r\n            if (this.typeGuardian.isAxiosResponse (this.serverResponse)){\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error (\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error){\r\n            console.error (error.toJSON ());\r\n            return Promise.reject<AxiosResponse> (error);\r\n        }   \r\n    }\r\n    \r\n    public updateStudents (user: User, userID: number){\r\n        try {\r\n            return axios.put(`http://localhost:8080/editInfo/${userID}`, user);}\r\n        catch (error){\r\n            console.error (error.toJSON ());\r\n            return Promise.reject<AxiosResponse> (error);\r\n        }\r\n    }\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx",[],["75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91"],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":3,"column":25,"nodeType":"128","messageId":"129","endLine":3,"endColumn":57},{"ruleId":"130","severity":1,"message":"131","line":3,"column":20,"nodeType":"132","messageId":"133","endLine":3,"endColumn":26},{"ruleId":"130","severity":1,"message":"134","line":6,"column":3,"nodeType":"132","messageId":"133","endLine":6,"endColumn":7},{"ruleId":"130","severity":1,"message":"135","line":2,"column":29,"nodeType":"132","messageId":"133","endLine":2,"endColumn":39},{"ruleId":"130","severity":1,"message":"136","line":5,"column":35,"nodeType":"132","messageId":"133","endLine":5,"endColumn":46},{"ruleId":"130","severity":1,"message":"137","line":5,"column":48,"nodeType":"132","messageId":"133","endLine":5,"endColumn":51},{"ruleId":"130","severity":1,"message":"138","line":5,"column":53,"nodeType":"132","messageId":"133","endLine":5,"endColumn":59},{"ruleId":"130","severity":1,"message":"134","line":8,"column":10,"nodeType":"132","messageId":"133","endLine":8,"endColumn":14},{"ruleId":"130","severity":1,"message":"139","line":8,"column":27,"nodeType":"132","messageId":"133","endLine":8,"endColumn":40},{"ruleId":"140","severity":1,"message":"141","line":17,"column":16,"nodeType":"142","messageId":"143","endLine":17,"endColumn":19,"suggestions":"144"},{"ruleId":"130","severity":1,"message":"145","line":30,"column":14,"nodeType":"132","messageId":"133","endLine":30,"endColumn":24},{"ruleId":"130","severity":1,"message":"135","line":4,"column":7,"nodeType":"132","messageId":"133","endLine":4,"endColumn":17},{"ruleId":"126","severity":1,"message":"127","line":100,"column":5,"nodeType":"146","messageId":"129","endLine":100,"endColumn":55},{"ruleId":"92","replacedBy":"147"},{"ruleId":"94","replacedBy":"148"},{"ruleId":"96","replacedBy":"149"},{"ruleId":"98","replacedBy":"150"},{"ruleId":"100","replacedBy":"151"},{"ruleId":"102","replacedBy":"152"},{"ruleId":"104","replacedBy":"153"},{"ruleId":"106","replacedBy":"154"},{"ruleId":"108","replacedBy":"155"},{"ruleId":"110","replacedBy":"156"},{"ruleId":"112","replacedBy":"157"},{"ruleId":"114","replacedBy":"158"},{"ruleId":"116","replacedBy":"159"},{"ruleId":"118","replacedBy":"160"},{"ruleId":"120","replacedBy":"161"},{"ruleId":"122","replacedBy":"162"},{"ruleId":"124","replacedBy":"163"},"callback-return",[],"global-require",[],"handle-callback-err",[],"id-blacklist",["164"],"lines-around-directive",["165"],"no-buffer-constructor",[],"no-catch-shadow",["166"],"no-mixed-requires",[],"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"no-new-require",[],"no-path-concat",[],"no-process-env",[],"no-process-exit",[],"no-restricted-modules",[],"no-sync",[],"prefer-reflect",[],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'MouseEvent' is defined but never used.","'FormControl' is defined but never used.","'Nav' is defined but never used.","'Navbar' is defined but never used.","'useRouteMatch' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["169","170"],"'formatDate' is defined but never used.","FunctionExpression",[],[],[],["164"],["165"],[],["166"],[],["167"],["168"],[],[],[],[],[],[],[],"id-denylist","padding-line-between-statements","no-shadow","no-global-assign","no-unsafe-negation",{"messageId":"171","fix":"172","desc":"173"},{"messageId":"174","fix":"175","desc":"176"},"suggestUnknown",{"range":"177","text":"178"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"177","text":"179"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[697,700],"unknown","never"]
[{"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\index.tsx":"1","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\reportWebVitals.ts":"2","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\App.tsx":"3","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\User.tsx":"4","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx":"5","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\TypeGuard.tsx":"6","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\admin\\AdminConsolePage.tsx":"7","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\HomePage.tsx":"8","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\component\\PageHeader.tsx":"9","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\SignupPage.tsx":"10","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\ErrorHandle.tsx":"11","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\ExceptionResponseBody.tsx":"12","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\component\\ModalDialog.tsx":"13","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\RoleAPI.tsx":"14","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\LoggedInUser.tsx":"15","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\LoginPage.tsx":"16","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\component\\ProtectedRoute.tsx":"17","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\SignUpPage.tsx":"18","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\LogInPage.tsx":"19","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\UserAPI.tsx":"20","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\admin\\CreateAccountPage.tsx":"21","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\LogOutAPI.tsx":"22","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\EditStudentInfo.tsx":"23","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx":"24","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\RegisterFormAPI.tsx":"25","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\RegisterForm.tsx":"26","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\admin\\ManageCoursePage.tsx":"27","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\CourseTypeAPI.tsx":"28","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\CourseLevelAPI.tsx":"29","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\CourseType.tsx":"30","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\CourseLevel.tsx":"31","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\Course.tsx":"32","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\CourseAPI.tsx":"33","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\admin\\ManageStudentInCoursePage.tsx":"34","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\component\\home_page_header\\HomePageHeader.tsx":"35","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\teacher\\TeacherDashboardPage.tsx":"36","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\component\\teacher_sidebar\\TeacherSidebar.tsx":"37","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\select_role_page\\SelectRolePage.tsx":"38","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\teacher\\ManageExamQuestionPage.tsx":"39","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\MultipleChoiceQuestion.tsx":"40","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\QuestionOption.tsx":"41","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\QuizAPI.tsx":"42","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\Quiz.tsx":"43","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\InputValidate.tsx":"44"},{"size":664,"mtime":1614146355465,"results":"45","hashOfConfig":"46"},{"size":446,"mtime":1614146355508,"results":"47","hashOfConfig":"46"},{"size":8341,"mtime":1616407056908,"results":"48","hashOfConfig":"46"},{"size":2054,"mtime":1615339258289,"results":"49","hashOfConfig":"46"},{"size":553,"mtime":1614146355454,"results":"50","hashOfConfig":"46"},{"size":6371,"mtime":1615339258284,"results":"51","hashOfConfig":"46"},{"size":5020,"mtime":1616219356689,"results":"52","hashOfConfig":"46"},{"size":3794,"mtime":1614146355476,"results":"53","hashOfConfig":"46"},{"size":1714,"mtime":1616219356622,"results":"54","hashOfConfig":"46"},{"size":12781,"mtime":1613501380855,"results":"55","hashOfConfig":"56"},{"size":1882,"mtime":1615339258279,"results":"57","hashOfConfig":"46"},{"size":268,"mtime":1612413000599,"results":"58","hashOfConfig":"59"},{"size":3949,"mtime":1615339258275,"results":"60","hashOfConfig":"46"},{"size":1853,"mtime":1615339258282,"results":"61","hashOfConfig":"46"},{"size":543,"mtime":1614146355467,"results":"62","hashOfConfig":"46"},{"size":4434,"mtime":1613502678989,"results":"63","hashOfConfig":"56"},{"size":5256,"mtime":1616219356624,"results":"64","hashOfConfig":"46"},{"size":16317,"mtime":1616621600760,"results":"65","hashOfConfig":"46"},{"size":9037,"mtime":1616454215089,"results":"66","hashOfConfig":"46"},{"size":12263,"mtime":1616315625620,"results":"67","hashOfConfig":"46"},{"size":20741,"mtime":1615339258293,"results":"68","hashOfConfig":"46"},{"size":1278,"mtime":1615339258280,"results":"69","hashOfConfig":"46"},{"size":11967,"mtime":1614685274665,"results":"70","hashOfConfig":"46"},{"size":14103,"mtime":1616025459248,"results":"71","hashOfConfig":"46"},{"size":4663,"mtime":1615339258281,"results":"72","hashOfConfig":"46"},{"size":1028,"mtime":1614685274662,"results":"73","hashOfConfig":"46"},{"size":47265,"mtime":1616845840416,"results":"74","hashOfConfig":"46"},{"size":1937,"mtime":1615339258278,"results":"75","hashOfConfig":"46"},{"size":2035,"mtime":1615339258277,"results":"76","hashOfConfig":"46"},{"size":211,"mtime":1615339258287,"results":"77","hashOfConfig":"46"},{"size":381,"mtime":1615339258287,"results":"78","hashOfConfig":"46"},{"size":1403,"mtime":1615339258286,"results":"79","hashOfConfig":"46"},{"size":6267,"mtime":1616845833045,"results":"80","hashOfConfig":"46"},{"size":17926,"mtime":1616025459263,"results":"81","hashOfConfig":"46"},{"size":3794,"mtime":1616219356664,"results":"82","hashOfConfig":"46"},{"size":878,"mtime":1616408685552,"results":"83","hashOfConfig":"46"},{"size":2031,"mtime":1616409503240,"results":"84","hashOfConfig":"46"},{"size":2608,"mtime":1616219356710,"results":"85","hashOfConfig":"46"},{"size":61032,"mtime":1616853638065,"results":"86","hashOfConfig":"46"},{"size":1113,"mtime":1616451654402,"results":"87","hashOfConfig":"46"},{"size":1015,"mtime":1616452398700,"results":"88","hashOfConfig":"46"},{"size":4430,"mtime":1616850744047,"results":"89","hashOfConfig":"46"},{"size":582,"mtime":1616588429118,"results":"90","hashOfConfig":"46"},{"size":2693,"mtime":1616807916645,"results":"91","hashOfConfig":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"wn8dvm",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xoyctd",{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},"1uij5tj",{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"94"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"94"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"94"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\index.tsx",[],["185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201"],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\reportWebVitals.ts",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\App.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\User.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\TypeGuard.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\admin\\AdminConsolePage.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\HomePage.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\component\\PageHeader.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\SignupPage.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\ErrorHandle.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\ExceptionResponseBody.tsx",[],["202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218"],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\component\\ModalDialog.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\RoleAPI.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\LoggedInUser.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\LoginPage.tsx",["219","220","221","222","223","224","225"],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\component\\ProtectedRoute.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\SignUpPage.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\LogInPage.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\UserAPI.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\admin\\CreateAccountPage.tsx",["226","227"],"// Import package members section:\r\nimport React, { \r\n    ChangeEvent\r\n    , MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { \r\n    Breadcrumb\r\n    , Button\r\n    , Col\r\n    , Container\r\n    , Form\r\n    , Row\r\n    , Table \r\n} from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { RegisterFormAPI } from \"../../common/service/RegisterFormAPI\";\r\nimport { RoleAPI } from \"../../common/service/RoleAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { RegisterForm } from \"../../model/RegisterForm\";\r\nimport { Role } from \"../../model/Role\";\r\n\r\nfunction renderRoleDropdownList (role: Role): ReactElement {\r\n    let roleNameWithoutPrefix: string | undefined;\r\n\r\n    roleNameWithoutPrefix = role.roleName.slice (5);\r\n    return (\r\n        <option key = {role.roleID}>\r\n            {roleNameWithoutPrefix}\r\n        </option>\r\n    );\r\n}\r\n\r\nfunction renderRoleListSection (role: Role): ReactElement {\r\n    let roleNameWithoutPrefix: string | undefined;\r\n    \r\n    roleNameWithoutPrefix = role.roleName.slice (5);\r\n    return (\r\n        <span key = {role.roleID}>\r\n            {roleNameWithoutPrefix},&nbsp;\r\n        </span>\r\n    );\r\n}\r\n\r\nfunction renderRegisterFormTable (\r\n        registerForm: RegisterForm\r\n        , index: number\r\n        , handleAcceptRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void> \r\n        , handleRejectRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n): ReactElement {\r\n    return (\r\n        <tr key = {registerForm.formID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {`${\r\n                    registerForm.firstName\r\n                } ${\r\n                    registerForm.middleName\r\n                } ${\r\n                    registerForm.lastName\r\n                }`}\r\n            </td>\r\n            <td>\r\n                {registerForm.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {registerForm.email}\r\n            </td>\r\n            <td>\r\n                {registerForm.userName}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {registerForm.formID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            handleAcceptRequest (event).catch (\r\n                                    (error: unknown) => {\r\n                                        console.error (error);\r\n                                    }\r\n                            );\r\n                        }\r\n                    }\r\n                >\r\n                    Accept\r\n                </Button>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {registerForm.formID}\r\n                    onClick = {handleRejectRequest}\r\n                >\r\n                    Reject\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface CreateAccountPageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function CreateAccountPage (\r\n    props: CreateAccountPageProps\r\n): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [registerFormHolder, setRegisterFormHolder] \r\n        = useState<RegisterForm[]> ([]);\r\n    let registerFormAPI: RegisterFormAPI;\r\n    let typeGuardian: TypeGuard;\r\n    let [pageNumber, setPageNumber] = useState<number> (0);\r\n    let [pageSize, setPageSize] = useState<number> (10);\r\n    let [roleHolder, setRoleHolder] = useState<Role[]> ([]);\r\n    let roleAPI: RoleAPI;\r\n    let [selectedRoleName, setSelectedRoleName] = useState<string> (\"\");\r\n    let [newAccountRoleList, setNewAccountRoleList] = useState<Role[]> ([]);\r\n    let i: number | undefined; \r\n    let role: Role | undefined;\r\n    let selectedRoleArray: Role[] | undefined;\r\n    let selectedRole: Role | undefined;\r\n    let updatedNewAccountRoleList: Role[] | undefined;\r\n    let updatedRoleHolder: Role[] | undefined;\r\n    let defaultRoleSelection: Role | undefined;\r\n    let button: HTMLButtonElement | undefined;\r\n    let [userID, setUserID] = useState<number> (0);\r\n    let roleNameWithoutPrefix: string | undefined;\r\n\r\n    registerFormAPI = new RegisterFormAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    roleAPI = new RoleAPI ();\r\n    \r\n    async function handleAcceptRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        if (newAccountRoleList.length > 0){\r\n            button = event.target as HTMLButtonElement;\r\n            try {\r\n                await registerFormAPI.acceptCreateAccountRequest (\r\n                        Number (button.value)\r\n                        , newAccountRoleList\r\n                );\r\n                loadRegisterFormTable ();\r\n                return Promise.resolve<undefined> (undefined);\r\n            }\r\n            catch (apiError: unknown){\r\n                if (typeGuardian.isAxiosError (apiError)){\r\n                    if (typeof apiError.code === \"string\"){\r\n                        props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                        );\r\n                    }\r\n                    else {\r\n                        props.dialogController.setDialogTitle (apiError.name);\r\n                    }\r\n                    props.dialogController.setDialogBody (apiError.message);\r\n                    props.dialogController.setDialogType (\"error\");\r\n                    props.dialogController.setShowDialog (true);\r\n                }\r\n                return Promise.reject (apiError);\r\n            }\r\n        }\r\n        else {\r\n            props.dialogController.setDialogTitle (\"Error !\");\r\n            props.dialogController.setDialogBody (\r\n                    \"Please add at least one role.\"\r\n            );\r\n            props.dialogController.setDialogType (\"error\");\r\n            props.dialogController.setShowDialog (true);\r\n            return Promise.reject (\r\n                    new Error (\"Please add at least one role !\")\r\n            );\r\n        }\r\n    }\r\n\r\n    function handleRejectRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setUserID (Number (button.value));\r\n        props.dialogController.setDialogTitle (\"Confirm Rejection\");\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to reject this create account request ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function executeRequestRejection (): Promise<void> {\r\n        try {\r\n            await registerFormAPI.rejectCreateAccountRequest (\r\n                    userID\r\n            );\r\n            loadRegisterFormTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    function handleAddRole (){\r\n        for (i = 0; i < roleHolder.length; i++){\r\n            role = roleHolder[i];\r\n            if (role.roleName === `ROLE_${selectedRoleName}`){\r\n                updatedRoleHolder = roleHolder.slice ();\r\n                selectedRoleArray = updatedRoleHolder.splice (i, 1);\r\n                setRoleHolder (updatedRoleHolder);\r\n                if (updatedRoleHolder.length > 0){\r\n                    defaultRoleSelection = updatedRoleHolder[0];\r\n                    roleNameWithoutPrefix \r\n                        = defaultRoleSelection.roleName.slice (5); \r\n                    setSelectedRoleName (roleNameWithoutPrefix);\r\n                }\r\n                selectedRole = selectedRoleArray[0];\r\n                updatedNewAccountRoleList = newAccountRoleList.slice ();\r\n                updatedNewAccountRoleList.push (selectedRole);\r\n                setNewAccountRoleList (updatedNewAccountRoleList);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleReset (){\r\n        loadRoleDropdownList ().catch (\r\n                (error: unknown) => {\r\n                    console.error (error);\r\n                }\r\n        );\r\n        updatedNewAccountRoleList = new Array<Role> ();\r\n        setNewAccountRoleList (updatedNewAccountRoleList);\r\n    }\r\n\r\n    function handleSelectedRoleChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ): void {\r\n        setSelectedRoleName (event.target.value);\r\n    }\r\n\r\n    async function loadRoleDropdownList (): Promise<void> {\r\n        try {\r\n            updatedRoleHolder = await roleAPI.getAllRole (); \r\n            setRoleHolder (updatedRoleHolder);\r\n            defaultRoleSelection = updatedRoleHolder[0];\r\n            roleNameWithoutPrefix = defaultRoleSelection.roleName.slice (5);\r\n            setSelectedRoleName (roleNameWithoutPrefix);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadRegisterFormTable (): Promise<void> {\r\n        try {\r\n            setRegisterFormHolder (\r\n                    await registerFormAPI.getAllCreateAccountRequest (\r\n                            pageNumber\r\n                            , pageSize\r\n                    )\r\n            );\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    useEffect (\r\n        (): void => {\r\n            loadRoleDropdownList ().catch (\r\n                    (error: unknown) => {\r\n                        console.error (error);\r\n                    }\r\n            );\r\n            loadRegisterFormTable ().catch (\r\n                    (error: unknown) => {\r\n                        console.error (error);\r\n                    }\r\n            );\r\n        }\r\n        , []\r\n    );\r\n\r\n    useEffect (\r\n        (): void => {\r\n            if (props.dialogController.dialogIsConfirmed === true){\r\n                executeRequestRejection ().catch (\r\n                        (error: unknown) => {\r\n                            console.error (error);\r\n                        }\r\n                );\r\n                props.dialogController.setDialogIsConfirmed (false); \r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/\"}}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/admin-console\"}}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Create Account Requests\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1>\r\n                                Create Account Requests\r\n                            </h1>\r\n                            <hr/>\r\n                            <Form>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\"~\"} Add role \r\n                                                for the new account:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        <Col xs = \"auto\" className = \"mr-2\">\r\n                                            <Form.Control \r\n                                                as = \"select\" \r\n                                                value = {selectedRoleName}\r\n                                                onChange = {\r\n                                                    (event) => {\r\n                                            // eslint-disable-next-line max-len\r\n                                                        handleSelectedRoleChange (\r\n                                                            event\r\n                                                        );\r\n                                                    } \r\n                                                }\r\n                                            >\r\n                                                {roleHolder.map (\r\n                                                    (\r\n                                                            role\r\n                                            // eslint-disable-next-line max-len\r\n                                                    ) => renderRoleDropdownList (\r\n                                                            role\r\n                                                    )  \r\n                                                )}\r\n                                            </Form.Control>\r\n                                        </Col>\r\n                                        <Button \r\n                                            variant = \"success\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleAddRole ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Add role\r\n                                        </Button>\r\n                                        <Button \r\n                                            variant = \"primary\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleReset ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Reset\r\n                                        </Button>\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\">\"} The accepted account \r\n                                                will have roles:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        {newAccountRoleList.map (\r\n                                            (\r\n                                                    role\r\n                                            ) => renderRoleListSection (\r\n                                                    role\r\n                                            )\r\n                                        )}\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Table responsive = \"md\" hover = {true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                Full Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Phone Number\r\n                                            </th>\r\n                                            <th>\r\n                                                Email\r\n                                            </th>\r\n                                            <th>\r\n                                                User Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Actions\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {registerFormHolder.map (\r\n                                            (\r\n                                                    registerForm\r\n                                                    , index\r\n                                            ) => renderRegisterFormTable (\r\n                                                    registerForm\r\n                                                    , index\r\n                                                    , handleAcceptRequest\r\n                                                    , handleRejectRequest\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\LogOutAPI.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\EditStudentInfo.tsx",["228","229","230"],"import React, {\r\n    ChangeEvent, FormEvent, ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, Row\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { useParams } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\n\r\nexport function EditStudentInfo (): ReactElement {\r\n    let [user, setUser] = useState<User>(new User());\r\n    let updatedUser: User | undefined;\r\n    let inputField:\r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let param: any = useParams();\r\n    let [student, setStudent] = useState<User>(new User());\r\n    \r\n    useEffect (() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.displayStudent(param.studentID).then(\r\n            (res) => {\r\n                setUser(res.data);\r\n                // console.log(student.userName);\r\n            }\r\n    );\r\n    }, []);\r\n\r\n    \r\n    function handleUserChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ){\r\n        updatedUser = new User(user);\r\n        inputField = event.target;\r\n        updatedUser[\r\n            inputField.name as keyof UserIndexSignature\r\n        ] = inputField.value;\r\n        setUser(updatedUser);\r\n    }\r\n\r\n    function updateStudent (event: FormEvent<HTMLFormElement>, userID: number) {\r\n        event.preventDefault();\r\n        userAPI = new UserAPI();\r\n        userAPI.update(user, userID);\r\n        console.log(userID);\r\n    }\r\n \r\n    console.log(param.studentID);\r\n    // console.log(student.userName);\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <h1>{param.studentID}</h1>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form\r\n                                noValidate={false}\r\n                                onSubmit={(event) => {\r\n                                    updateStudent(event, param.studentID);\r\n                                }}\r\n                            >\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        User Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"userName\"\r\n                                        id=\"userName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        First Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"firstName\"\r\n                                        id=\"firstName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        value={user.firstName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Last Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"lastName\"\r\n                                        id=\"lastName\"\r\n                                        pattern=\"^[a-z0-9_-]{1,15}$\"\r\n                                        value={user.lastName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Email:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"email\"\r\n                                        id=\"email\"\r\n                                        value={user.email}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        DOB:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"dob\"\r\n                                        id=\"dob\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Phone:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"phoneNumber\"\r\n                                        id=\"phoneNumber\"\r\n                                        value={user.phoneNumber}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Gender\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"gender\"\r\n                                        id=\"gender\"\r\n                                        value={user.gender}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Job:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"job\"\r\n                                        id=\"job\"\r\n                                        value={user.job}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Password:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        autoComplete=\"off\"\r\n                                        autoFocus={false}\r\n                                        name=\"password\"\r\n                                        id=\"password\"\r\n                                        placeholder=\"Your new password\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Account Status\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"accountStatus\"\r\n                                        id=\"accountStatus\"\r\n                                        value={user.accountStatus}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button\r\n                                    variant=\"success\"\r\n                                    type=\"submit\"\r\n                                    block = {true}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\RegisterFormAPI.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\RegisterForm.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\admin\\ManageCoursePage.tsx",["231"],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\CourseTypeAPI.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\CourseLevelAPI.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\CourseType.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\CourseLevel.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\Course.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\CourseAPI.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\admin\\ManageStudentInCoursePage.tsx",["232","233"],"// Import package members section:\r\nimport React, { \r\n    MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { \r\n    Breadcrumb\r\n    , Button\r\n    , Col\r\n    , Container\r\n    , Modal\r\n    , Row\r\n    , Table \r\n} from \"react-bootstrap\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { DataPage } from \"../../App\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { CourseAPI } from \"../../common/service/CourseAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { UserAPI } from \"../../common/service/UserAPI\";\r\nimport { User } from \"../../model/User\";\r\n\r\nfunction renderStudentTable (\r\n        user: User\r\n        , index: number\r\n        , addAStudentToCourse: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void>\r\n): ReactElement {\r\n    return (\r\n        <tr key = {user.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {user.userID}\r\n            </td>\r\n            <td>\r\n                {`${\r\n                    user.firstName\r\n                } ${\r\n                    user.middleName\r\n                } ${\r\n                    user.lastName\r\n                }`}\r\n            </td>\r\n            <td>\r\n                {user.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {user.email}\r\n            </td>\r\n            <td>\r\n                {user.userName}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {user.userID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            addAStudentToCourse (event).catch (\r\n                                    (error: unknown) => {\r\n                                        console.error (error);\r\n                                    }\r\n                            );\r\n                        }\r\n                    }\r\n                >\r\n                    Add\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nfunction renderStudentInTheCourseTable (\r\n    user: User\r\n    , index: number\r\n    , handleRemoveAStudentFromCourse: (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ) => void \r\n): ReactElement {\r\n    return (\r\n        <tr key = {user.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {user.userID}\r\n            </td>\r\n            <td>\r\n                {`${\r\n                    user.firstName\r\n                } ${\r\n                    user.middleName\r\n                } ${\r\n                    user.lastName\r\n                }`}\r\n            </td>\r\n            <td>\r\n                {user.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {user.email}\r\n            </td>\r\n            <td>\r\n                {user.userName}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {user.userID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            handleRemoveAStudentFromCourse (event);\r\n                        }\r\n                    }\r\n                >\r\n                    Remove\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface UrlParameter {\r\n    courseID: string;\r\n}\r\n\r\ninterface ManageStudentInCoursePageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function ManageStudentInCoursePage (\r\n        props: ManageStudentInCoursePageProps\r\n): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [showAddStudentDialog, setShowAddStudentDialog] \r\n        = useState<boolean> (false);\r\n    let studentDataPage: DataPage<User> | undefined;\r\n    let [studentHolder, setStudentHolder] = useState<User[]> ([]);\r\n    let userAPI: UserAPI;\r\n    let typeGuardian: TypeGuard;\r\n    let [pageIndex] = useState<number> (0);\r\n    let [pageSize] = useState<number> (10);\r\n    let [totalRowCount, setTotalRowCount] = useState<number> (0);\r\n    let courseID = useParams<UrlParameter> ().courseID;\r\n    let button: HTMLButtonElement | undefined;\r\n    let courseAPI: CourseAPI;\r\n    let [studentInTheCourseHolder, setStudentInTheCourseHolder] \r\n        = useState<User[]> ([]);\r\n    let [pageIndex2] = useState<number> (0);\r\n    let [pageSize2] = useState<number> (10);\r\n    let [totalRowCount2, setTotalRowCount2] = useState<number> (0);\r\n    let [pendingUserID, setPendingUserID] = useState<number> (0);\r\n\r\n    userAPI = new UserAPI ();\r\n    courseAPI = new CourseAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    \r\n    function openAddStudentDialog (): void {\r\n        loadStudentTable ().catch (\r\n                (error: unknown) => {\r\n                    console.error (error);\r\n                }\r\n        );\r\n        setShowAddStudentDialog (true);\r\n    }\r\n\r\n    function closeAddStudentDialog (): void {\r\n        setShowAddStudentDialog (false);\r\n    }\r\n\r\n    function handleRemoveAStudentFromCourse (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setPendingUserID (Number (button.value));\r\n        props.dialogController.setDialogTitle (\r\n                \"Confirm Remove Student From Course\"\r\n        );\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to remove this student from the course ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function executeAStudentFromCourseRemoval (): Promise<void> {\r\n        try {\r\n            await courseAPI.removeAStudentFromCourse (\r\n                    pendingUserID\r\n                    , Number (courseID)\r\n            );\r\n            loadStudentInTheCourseTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function addAStudentToCourse (\r\n        event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        button = event.target as HTMLButtonElement;\r\n        try {\r\n            await courseAPI.addAStudentToCourse (\r\n                    Number (button.value)\r\n                    , Number (courseID)\r\n            );\r\n            loadStudentTable ();\r\n            loadStudentInTheCourseTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadStudentTable (): Promise<void> {\r\n        try {\r\n            studentDataPage \r\n                = await userAPI.getAllStudentExcludingStudentInTheCourse (\r\n                    Number (courseID)\r\n                    , pageIndex\r\n                    , pageSize\r\n            );\r\n            setTotalRowCount (studentDataPage.totalRowCount);\r\n            setStudentHolder (studentDataPage.pageDataHolder);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadStudentInTheCourseTable (): Promise<void> {\r\n        try {\r\n            studentDataPage \r\n                = await userAPI.getAllStudentAreInTheCourse (\r\n                    Number (courseID)\r\n                    , pageIndex2\r\n                    , pageSize2\r\n            );\r\n            setTotalRowCount2 (studentDataPage.totalRowCount);\r\n            setStudentInTheCourseHolder (studentDataPage.pageDataHolder);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n    \r\n    useEffect (\r\n        () => {\r\n            loadStudentInTheCourseTable ().catch (\r\n                    (error: unknown) => {\r\n                        console.error (error);\r\n                    }\r\n            );\r\n        }\r\n        , []\r\n    );\r\n    \r\n    useEffect (\r\n        () => {\r\n            if (props.dialogController.dialogIsConfirmed === true){\r\n                executeAStudentFromCourseRemoval ().catch (\r\n                        (error) => {\r\n                            console.error (error);\r\n                        }\r\n                );\r\n                props.dialogController.setDialogIsConfirmed (false); \r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <Modal\r\n                show = {showAddStudentDialog}\r\n                backdrop = \"static\"\r\n                keyboard = {false}\r\n                size = \"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>Add A Student</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Table responsive = \"md\" hover = {true}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    #\r\n                                </th>\r\n                                <th>\r\n                                    Student ID\r\n                                </th>\r\n                                <th>\r\n                                    Full Name\r\n                                </th>\r\n                                <th>\r\n                                    Phone Number\r\n                                </th>\r\n                                <th>\r\n                                    Email\r\n                                </th>\r\n                                <th>\r\n                                    User Name\r\n                                </th>\r\n                                <th>\r\n                                    Actions\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {studentHolder.map (\r\n                                (\r\n                                        user\r\n                                        , index\r\n                                ) => renderStudentTable (\r\n                                        user\r\n                                        , index\r\n                                        , addAStudentToCourse\r\n                                )\r\n                            )}\r\n                        </tbody>\r\n                    </Table>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button \r\n                        variant = \"info\" \r\n                        onClick = {closeAddStudentDialog}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/\"}}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/admin-console\"}}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {\r\n                                        {\r\n                                            to: \"/admin-console\"\r\n                                            + \"/manage-course-page\"\r\n                                        }\r\n                                    }\r\n                                >\r\n                                    Manage Course Functions\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Manage Student In Course Functions\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1 className = \"mb-3\">\r\n                                <span className = \"mr-3\">\r\n                                    Manage Student In Course\r\n                                </span>\r\n                                <Button \r\n                                    variant = \"success\"\r\n                                    type = \"button\"\r\n                                    onClick = {openAddStudentDialog}\r\n                                >\r\n                                    Add Student\r\n                                </Button>\r\n                            </h1>\r\n                            <Table responsive = \"md\" hover = {true}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            #\r\n                                        </th>\r\n                                        <th>\r\n                                            Student ID\r\n                                        </th>\r\n                                        <th>\r\n                                            Full Name\r\n                                        </th>\r\n                                        <th>\r\n                                            Phone Number\r\n                                        </th>\r\n                                        <th>\r\n                                            Email\r\n                                        </th>\r\n                                        <th>\r\n                                            User Name\r\n                                        </th>\r\n                                        <th>\r\n                                            Actions\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {studentInTheCourseHolder.map (\r\n                                        (\r\n                                                user\r\n                                                , index\r\n                                        ) => renderStudentInTheCourseTable (\r\n                                                user\r\n                                                , index\r\n                                                , handleRemoveAStudentFromCourse\r\n                                        )\r\n                                    )}\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\component\\home_page_header\\HomePageHeader.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\teacher\\TeacherDashboardPage.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\component\\teacher_sidebar\\TeacherSidebar.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\select_role_page\\SelectRolePage.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\page\\teacher\\ManageExamQuestionPage.tsx",["234"],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\MultipleChoiceQuestion.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\QuestionOption.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\QuizAPI.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\model\\Quiz.tsx",[],"C:\\Users\\Phan Lam\\OneDrive\\Documents\\Capstone Projects\\LanguageCenterSystem\\front-end\\src\\common\\service\\InputValidate.tsx",[],{"ruleId":"235","replacedBy":"236"},{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","replacedBy":"246"},{"ruleId":"247","replacedBy":"248"},{"ruleId":"249","replacedBy":"250"},{"ruleId":"251","replacedBy":"252"},{"ruleId":"253","replacedBy":"254"},{"ruleId":"255","replacedBy":"256"},{"ruleId":"257","replacedBy":"258"},{"ruleId":"259","replacedBy":"260"},{"ruleId":"261","replacedBy":"262"},{"ruleId":"263","replacedBy":"264"},{"ruleId":"265","replacedBy":"266"},{"ruleId":"267","replacedBy":"268"},{"ruleId":"235","replacedBy":"269"},{"ruleId":"237","replacedBy":"270"},{"ruleId":"239","replacedBy":"271"},{"ruleId":"241","replacedBy":"272"},{"ruleId":"243","replacedBy":"273"},{"ruleId":"245","replacedBy":"274"},{"ruleId":"247","replacedBy":"275"},{"ruleId":"249","replacedBy":"276"},{"ruleId":"251","replacedBy":"277"},{"ruleId":"253","replacedBy":"278"},{"ruleId":"255","replacedBy":"279"},{"ruleId":"257","replacedBy":"280"},{"ruleId":"259","replacedBy":"281"},{"ruleId":"261","replacedBy":"282"},{"ruleId":"263","replacedBy":"283"},{"ruleId":"265","replacedBy":"284"},{"ruleId":"267","replacedBy":"285"},{"ruleId":"286","severity":1,"message":"287","line":3,"column":5,"nodeType":"288","messageId":"289","endLine":3,"endColumn":16},{"ruleId":"286","severity":1,"message":"290","line":4,"column":7,"nodeType":"288","messageId":"289","endLine":4,"endColumn":16},{"ruleId":"286","severity":1,"message":"291","line":6,"column":7,"nodeType":"288","messageId":"289","endLine":6,"endColumn":15},{"ruleId":"286","severity":1,"message":"292","line":8,"column":10,"nodeType":"288","messageId":"289","endLine":8,"endColumn":20},{"ruleId":"286","severity":1,"message":"293","line":13,"column":10,"nodeType":"288","messageId":"289","endLine":13,"endColumn":17},{"ruleId":"286","severity":1,"message":"294","line":13,"column":19,"nodeType":"288","messageId":"289","endLine":13,"endColumn":40},{"ruleId":"286","severity":1,"message":"295","line":14,"column":10,"nodeType":"288","messageId":"289","endLine":14,"endColumn":19},{"ruleId":"286","severity":1,"message":"296","line":125,"column":22,"nodeType":"288","messageId":"289","endLine":125,"endColumn":35},{"ruleId":"286","severity":1,"message":"297","line":126,"column":20,"nodeType":"288","messageId":"289","endLine":126,"endColumn":31},{"ruleId":"298","severity":1,"message":"299","line":17,"column":16,"nodeType":"300","messageId":"301","endLine":17,"endColumn":19,"suggestions":"302"},{"ruleId":"286","severity":1,"message":"303","line":18,"column":10,"nodeType":"288","messageId":"289","endLine":18,"endColumn":17},{"ruleId":"286","severity":1,"message":"304","line":18,"column":19,"nodeType":"288","messageId":"289","endLine":18,"endColumn":29},{"ruleId":"286","severity":1,"message":"305","line":92,"column":10,"nodeType":"288","messageId":"289","endLine":92,"endColumn":23},{"ruleId":"286","severity":1,"message":"305","line":153,"column":10,"nodeType":"288","messageId":"289","endLine":153,"endColumn":23},{"ruleId":"286","severity":1,"message":"306","line":161,"column":10,"nodeType":"288","messageId":"289","endLine":161,"endColumn":24},{"ruleId":"286","severity":1,"message":"305","line":66,"column":10,"nodeType":"288","messageId":"289","endLine":66,"endColumn":23},"callback-return",[],"global-require",[],"handle-callback-err",[],"id-blacklist",["307"],"lines-around-directive",["308"],"no-buffer-constructor",[],"no-catch-shadow",["309"],"no-mixed-requires",[],"no-native-reassign",["310"],"no-negated-in-lhs",["311"],"no-new-require",[],"no-path-concat",[],"no-process-env",[],"no-process-exit",[],"no-restricted-modules",[],"no-sync",[],"prefer-reflect",[],[],[],[],["307"],["308"],[],["309"],[],["310"],["311"],[],[],[],[],[],[],[],"@typescript-eslint/no-unused-vars","'ChangeEvent' is defined but never used.","Identifier","unusedVar","'FormEvent' is defined but never used.","'useState' is defined but never used.","'NewUserAPI' is defined but never used.","'NewUser' is defined but never used.","'NewUserIndexSignature' is defined but never used.","'TypeGuard' is defined but never used.","'setPageNumber' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["312","313"],"'student' is assigned a value but never used.","'setStudent' is assigned a value but never used.","'totalRowCount' is assigned a value but never used.","'totalRowCount2' is assigned a value but never used.","id-denylist","padding-line-between-statements","no-shadow","no-global-assign","no-unsafe-negation",{"messageId":"314","fix":"315","desc":"316"},{"messageId":"317","fix":"318","desc":"319"},"suggestUnknown",{"range":"320","text":"321"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"320","text":"322"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[638,641],"unknown","never"]
[{"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\index.tsx":"1","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\App.tsx":"2","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\reportWebVitals.ts":"3","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx":"4","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\HomePage.tsx":"5","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx":"6","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\LogInPage.tsx":"7","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx":"8","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx":"9","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageStudentPage.tsx":"10","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx":"11","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx":"12","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx":"13","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx":"14","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx":"15","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx":"16","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx":"17","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\User.tsx":"18","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\NewUserAPI.tsx":"19","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx":"20","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx":"21","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx":"22","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx":"23","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx":"24","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\NewUser.tsx":"25"},{"size":664,"mtime":1612694135022,"results":"26","hashOfConfig":"27"},{"size":5581,"mtime":1614357736976,"results":"28","hashOfConfig":"27"},{"size":446,"mtime":1614142040418,"results":"29","hashOfConfig":"27"},{"size":543,"mtime":1614142040340,"results":"30","hashOfConfig":"27"},{"size":3794,"mtime":1614142040353,"results":"31","hashOfConfig":"27"},{"size":12230,"mtime":1614142040351,"results":"32","hashOfConfig":"27"},{"size":8454,"mtime":1614142040368,"results":"33","hashOfConfig":"27"},{"size":2565,"mtime":1614142040375,"results":"34","hashOfConfig":"27"},{"size":3296,"mtime":1614142040409,"results":"35","hashOfConfig":"27"},{"size":12142,"mtime":1614356431801,"results":"36","hashOfConfig":"27"},{"size":17160,"mtime":1614142040410,"results":"37","hashOfConfig":"27"},{"size":1414,"mtime":1614142040269,"results":"38","hashOfConfig":"27"},{"size":2383,"mtime":1614142040272,"results":"39","hashOfConfig":"27"},{"size":1269,"mtime":1614142040308,"results":"40","hashOfConfig":"27"},{"size":5163,"mtime":1614142040288,"results":"41","hashOfConfig":"27"},{"size":3786,"mtime":1614142040280,"results":"42","hashOfConfig":"27"},{"size":2276,"mtime":1614142040338,"results":"43","hashOfConfig":"27"},{"size":1172,"mtime":1614142040349,"results":"44","hashOfConfig":"27"},{"size":4536,"mtime":1614142040332,"results":"45","hashOfConfig":"27"},{"size":5845,"mtime":1614142853792,"results":"46","hashOfConfig":"27"},{"size":1589,"mtime":1614142040336,"results":"47","hashOfConfig":"27"},{"size":553,"mtime":1614142040292,"results":"48","hashOfConfig":"27"},{"size":1944,"mtime":1614142040306,"results":"49","hashOfConfig":"27"},{"size":12781,"mtime":1614149958645,"results":"50","hashOfConfig":"27"},{"size":1073,"mtime":1614142040341,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"17ytrng",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\index.tsx",[],["108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124"],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\App.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\reportWebVitals.ts",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\HomePage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx",["125","126"],"import React, {\r\n    ChangeEvent, FormEvent, ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, Row\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { useParams } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\n\r\nexport function EditStudentInfo (): ReactElement {\r\n    let [user, setUser] = useState<User>(new User());\r\n    let updatedUser: User | undefined;\r\n    let inputField:\r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let param: any = useParams();\r\n    let [student, setStudent] = useState<User>(new User());\r\n    let date: string;\r\n    useEffect (() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.displayStudent(param.studentID).then(\r\n            (res) => {\r\n                setStudent(res.data);\r\n                // console.log(student.userName);\r\n            }\r\n    );\r\n    }, []);\r\n\r\n    \r\n    function handleUserChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ){\r\n        updatedUser = user;\r\n        inputField = event.target;\r\n        updatedUser[\r\n            inputField.name as keyof UserIndexSignature\r\n        ] = inputField.value;\r\n        setUser(updatedUser);\r\n    }\r\n\r\n    function updateStudent (event: FormEvent<HTMLFormElement>, userID: number) {\r\n        event.preventDefault();\r\n        userAPI = new UserAPI();\r\n        userAPI.update(user, userID);\r\n        console.log(userID);\r\n    }\r\n \r\n    console.log(param.studentID);\r\n    // console.log(student.userName);\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <h1>{param.studentID}</h1>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form\r\n                                noValidate={false}\r\n                                onSubmit={(event) => {\r\n                                    updateStudent(event, param.studentID);\r\n                                }}\r\n                            >\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        User Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"userName\"\r\n                                        id=\"userName\"\r\n                                        pattern=\"^[\\\\p{L} .'-]+$\"\r\n                                        placeholder={student.userName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {student.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        First Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"firstName\"\r\n                                        id=\"firstName\"\r\n                                        pattern=\"^[\\\\p{L} .'-]+$\"\r\n                                        placeholder={student.firstName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Last Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"lastName\"\r\n                                        id=\"lastName\"\r\n                                        pattern=\"^[\\\\p{L} .'-]+$\"\r\n                                        placeholder={student.lastName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Email:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"email\"\r\n                                        id=\"email\"\r\n                                        placeholder={student.email}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        DOB:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"dob\"\r\n                                        id=\"dob\"\r\n                                        // value=\"07/08/1997\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Phone:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"phoneNumber\"\r\n                                        id=\"phoneNumber\"\r\n                                        placeholder={student.phoneNumber}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Gender\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"gender\"\r\n                                        id=\"gender\"\r\n                                        placeholder={student.gender}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Job:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"job\"\r\n                                        id=\"job\"\r\n                                        placeholder={student.job}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Password:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        autoComplete=\"off\"\r\n                                        autoFocus={false}\r\n                                        name=\"password\"\r\n                                        id=\"password\"\r\n                                        pattern=\"^\\\\S+$\"\r\n                                        placeholder=\"Your new password\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Account Status\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"accountStatus\"\r\n                                        id=\"accountStatus\"\r\n                                        placeholder={student.accountStatus}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button\r\n                                    variant=\"success\"\r\n                                    type=\"submit\"\r\n                                    block = {true}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\LogInPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx",["127","128","129","130","131","132","133","134","135","136","137","138","139","140","141"],"// Import package members section:\r\nimport React, { \r\n    ChangeEvent\r\n    , Dispatch, FormEvent\r\n    , ReactElement\r\n    , SetStateAction, useState \r\n} from 'react';\r\nimport { \r\n    Button, Card, Container, Form, ListGroup, Row \r\n} from 'react-bootstrap';\r\nimport './SelectRolePage.css';\r\nimport { TypeGuard } from '../common/service/TypeGuard';\r\nimport { DialogControl } from '../common/component/ModalDialog';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { LoggedInUser } from '../model/LoggedInUser';\r\nimport { Location, History } from \"../../node_modules/@types/history\";\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { LocationState } from '../common/component/ProtectedRoute';\r\n\r\ninterface SelectRolePageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function SelectRolePage (props: SelectRolePageProps): ReactElement {\r\n\r\n    // Variables declaration:\r\n    \r\n    return (\r\n        <Container \r\n            fluid = {true} \r\n            id = \"SelectRolePageContentContainer\" \r\n            className = \"vh-100\"\r\n        >   \r\n            {props.modalDialog}\r\n            <header>\r\n            </header>\r\n            <nav>\r\n            </nav>\r\n            <main className = \"h-100\">\r\n                <Container \r\n                    fluid = {true} \r\n                    className = \"h-100\"\r\n                >\r\n                    <Row className = {\r\n                        `h-100 \r\n                        justify-content-center \r\n                        align-items-center`\r\n                    }>\r\n                        <Card id = \"SelectRoleCard\">\r\n                            <Card.Header className = \"text-center\">\r\n                                Choose a role\r\n                            </Card.Header>\r\n                            <ListGroup variant = \"flush\">\r\n                                <ListGroup.Item>\r\n                                    Cras justo odio\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    Dapibus ac facilisis in\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    Vestibulum at eros\r\n                                </ListGroup.Item>\r\n                            </ListGroup>\r\n                        </Card>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageStudentPage.tsx",["142"],"import React, { ReactElement, useState, useEffect } from \"react\";\r\nimport { UserAPI } from \"../../common/service/UserAPI\";\r\nimport '../../../node_modules/font-awesome/css/font-awesome.min.css';\r\nimport './ManageStudentPage.css';\r\nimport { User } from \"../../model/User\";\r\n\r\nexport function ManageStudentPage (): ReactElement {\r\n    let [user, setUser] = useState<[]>([]);\r\n    let userAPI: UserAPI = new UserAPI();\r\n    useEffect(() => {\r\n        userAPI.listUsers().then(\r\n            (res) => {\r\n                console.log(res);\r\n                setUser(res.data);\r\n            }\r\n        );\r\n    }, []);\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"text-center\">\r\n                <h1>Quản Lý Học Viên</h1>\r\n                <hr />\r\n            </div>\r\n            <div className=\"row\" id=\"grid\">\r\n                <div className=\"col-xs-8 col-sm-8 col-md-8 col-lg-8\" id=\"table\">\r\n                    <button type=\"button\" className=\"btn btn-primary\">\r\n                        <span className=\r\n                            \"fa fa-plus mr-5\">\r\n                        </span>\r\n                        Thêm học viên   \r\n                </button>\r\n                    <div className=\"row mt-15\">\r\n                        <div className=\r\n                            \"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                            <div className=\"input-group\">\r\n                                <input type=\"text\" className=\"form-control\"\r\n                                    placeholder=\"Nhập từ khóa...\" />\r\n                                <span className=\"input-group-btn\">\r\n                                    <button className=\"btn btn-primary\"\r\n                                        type=\"button\">\r\n                                        <span\r\n                                            className=\"fa fa-search mr-5\">\r\n                                        </span>\r\n                                        Tìm        \r\n                            </button>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\r\n                            \"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                            <div className=\"dropdown\">\r\n                                <button className=\r\n                                    \"btn btn-primary dropdown-toggle\"\r\n                                    type=\"button\"\r\n                                    id=\"dropdownMenu1\"\r\n                                    data-toggle=\"dropdown\"\r\n                                    aria-haspopup=\"true\"\r\n                                    aria-expanded=\"true\">\r\n                                    Sắp Xếp\r\n                                <span className=\r\n                                        \"fa fa-caret-square-o-down ml-5\">\r\n                                    </span>\r\n                                </button>\r\n                                <ul className=\"dropdown-menu\"\r\n                                    aria-labelledby=\"dropdownMenu1\">\r\n                                    <li>\r\n                                        <a role=\"button\">\r\n                                            <span className=\r\n                                                \"fa fa-sort-alpha-asc pr-5\">\r\n                                                Tên A-Z\r\n                                                </span>\r\n                                        </a>\r\n                                    </li>\r\n                                    <li>\r\n                                        <a role=\"button\">\r\n                                            <span className=\r\n                                                \"fa fa-sort-alpha-desc pr-5\"\r\n                                            >\r\n                                                Tên Z-A\r\n                                                </span>\r\n                                        </a>\r\n                                    </li>\r\n                                    <li role=\"separator\"\r\n                                        className=\"divider\"></li>\r\n                                    <li><a role=\"button\">\r\n                                        Trạng Thái Kích Hoạt\r\n                                    </a></li>\r\n                                    <li><a role=\"button\">\r\n                                        Trạng Thái Ẩn\r\n                                    </a></li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row mt-15\">\r\n                        <div className=\r\n                            \"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n                            <table className=\r\n                                \"table table-bordered table-hover\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th className=\"text-center\">ID</th>\r\n                                        <th className=\"text-center\">\r\n                                            Tên đăng nhập</th>\r\n                                        <th className=\"text-center\">\r\n                                            Tên</th>\r\n                                        <th className=\"text-center\">\r\n                                            Họ</th>\r\n                                        <th className=\"text-center\">\r\n                                            Email\r\n                                                </th>\r\n                                        <th className=\"text-center\">\r\n                                            Số điện thoại\r\n                                                </th>\r\n                                        <th className=\"text-center\">\r\n                                            Nghề nghiệp\r\n                                                </th>\r\n                                        <th className=\"text-center\">\r\n                                            Avatar\r\n                                                </th>\r\n                                        <th className=\"text-center\">\r\n                                            Trạng Thái\r\n                                                </th>\r\n                                        <th className=\"text-center\">\r\n                                            Hành Động\r\n                                                </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td></td>\r\n                                        <td>\r\n                                            <input type=\"text\"\r\n                                                className=\"form-control\" />\r\n                                        </td>\r\n                                        <td>\r\n                                            <input type=\"text\"\r\n                                                className=\"form-control\" />\r\n                                        </td>\r\n                                        <td>\r\n                                            <input type=\"text\"\r\n                                                className=\"form-control\" />\r\n                                        </td>\r\n                                        <td>\r\n                                            <input type=\"text\"\r\n                                                className=\"form-control\" />\r\n                                        </td>\r\n                                        <td>\r\n                                            <input type=\"text\"\r\n                                                className=\"form-control\" />\r\n                                        </td>\r\n                                        <td>\r\n                                            <input type=\"text\"\r\n                                                className=\"form-control\" />\r\n                                        </td>\r\n                                        <td></td>\r\n                                        <td>\r\n                                            <select\r\n                                                className=\"form-control\">\r\n                                                <option value=\"-1\">\r\n                                                    Tất Cả\r\n                                                        </option>\r\n                                                <option value=\"0\">\r\n                                                    Ẩn\r\n                                                        </option>\r\n                                                <option value=\"1\">\r\n                                                    Kích Hoạt\r\n                                                        </option>\r\n                                            </select>\r\n                                        </td>\r\n                                        <td></td>\r\n                                    </tr>\r\n                                    {user.map((item, index) => <tr key={index}>\r\n                                        <td>{item[\"userID\"]}</td>\r\n                                        <td>{item[\"userName\"]}</td>\r\n                                        <td>{item[\"firstName\"]}</td>\r\n                                        <td>{item[\"lastName\"]}</td>\r\n                                        <td>{item[\"email\"]}</td>\r\n                                        <td>{item[\"phoneNumber\"]}</td>\r\n                                        <td>{item[\"job\"]}</td>\r\n                                        <td>{item[\"photoURI\"]}</td>\r\n                                        <td className=\"text-center\">\r\n                                            <span\r\n                                                className=\"label label-success\">\r\n                                                {item[\"accountStatus\"]}\r\n                                                </span>\r\n                                        </td>\r\n                                        <td className=\"text-center d-flex\">\r\n                                        <button type=\"button\"\r\n                                            className=\"btn btn-info act-btn\">\r\n                                                <span className=\r\n                                                    \"fa fa-eye mr-5\">\r\n                                                </span>\r\n                                                Xem\r\n                                        </button>\r\n                                        &nbsp;\r\n                                        <button type=\"button\"\r\n                                            className=\"btn btn-warning act-btn\">\r\n                                                <span className=\r\n                                                    \"fa fa-pencil mr-5\">\r\n                                                </span>\r\n                                                Sửa\r\n                                        </button>\r\n                                        &nbsp;\r\n                                        <button type=\"button\"\r\n                                                className=\"btn btn-danger \r\n                                                act-btn\">\r\n                                                <span className=\r\n                                                    \"fa fa-trash mr-5\">\r\n                                                </span>\r\n                                                Xóa\r\n                                        </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                    )\r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx",["143","144"],"// Import package members section:\r\nimport React, { \r\n    ChangeEvent\r\n    , MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { Button, Col, Container, Form, Row, Table } from \"react-bootstrap\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { NewUserAPI } from \"../../common/service/NewUserAPI\";\r\nimport { RoleAPI } from \"../../common/service/RoleAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { NewUser } from \"../../model/NewUser\";\r\nimport { Role } from \"../../model/Role\";\r\n\r\nfunction renderRoleDropdownList (role: Role): ReactElement {\r\n    return (\r\n        <option key = {role.roleID}>\r\n            {role.roleName}\r\n        </option>\r\n    );\r\n}\r\n\r\nfunction renderRoleListSection (role: Role): ReactElement {\r\n    return (\r\n        <span key = {role.roleID}>\r\n            {role.roleName},&nbsp;\r\n        </span>\r\n    );\r\n}\r\n\r\nfunction renderNewUserTable (\r\n        newUser: NewUser\r\n        , index: number\r\n        , handleAcceptRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void> \r\n        , handleRejectRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void> \r\n): ReactElement {\r\n    return (\r\n        <tr key = {newUser.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {`${newUser.firstName} ${newUser.lastName}`}\r\n            </td>\r\n            <td>\r\n                {newUser.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {newUser.email}\r\n            </td>\r\n            <td>\r\n                {newUser.userName}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {newUser.userID}\r\n                    onClick = {handleAcceptRequest}\r\n                >\r\n                    Accept\r\n                </Button>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {newUser.userID}\r\n                    onClick = {handleRejectRequest}\r\n                >\r\n                    Reject\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface CreateAccountPageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function CreateAccountPage (\r\n    props: CreateAccountPageProps\r\n): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [newUserHolder, setNewUserHolder] = useState<NewUser[]> ([]);\r\n    let newUserAPI: NewUserAPI;\r\n    let typeGuardian: TypeGuard;\r\n    let [pageNumber, setPageNumber] = useState<number> (0);\r\n    let [pageSize, setPageSize] = useState<number> (10);\r\n    let [roleHolder, setRoleHolder] = useState<Role[]> ([]);\r\n    let roleAPI: RoleAPI;\r\n    let [selectedRoleName, setSelectedRoleName] = useState<string> (\"\");\r\n    let [newAccountRoleList, setNewAccountRoleList] = useState<Role[]> ([]);\r\n    let i: number | undefined; \r\n    let role: Role | undefined;\r\n    let selectedRoleArray: Role[] | undefined;\r\n    let selectedRole: Role | undefined;\r\n    let updatedNewAccountRoleList: Role[] | undefined;\r\n    let updatedRoleHolder: Role[] | undefined;\r\n    let defaultRoleSelection: Role | undefined;\r\n    let button: HTMLButtonElement | undefined; \r\n    let userID: number | undefined;\r\n\r\n    newUserAPI = new NewUserAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    roleAPI = new RoleAPI ();\r\n    \r\n    async function handleAcceptRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        if (newAccountRoleList.length > 0){\r\n            button = event.target as HTMLButtonElement;\r\n            userID = Number (button.value);\r\n            try {\r\n                await newUserAPI.acceptCreateAccountRequest (\r\n                        userID\r\n                        , newAccountRoleList\r\n                );\r\n                loadNewUserTable ();\r\n            }\r\n            catch (apiError: unknown){\r\n                if (typeGuardian.isAxiosError (apiError)){\r\n                    if (typeof apiError.code === \"string\"){\r\n                        props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                        );\r\n                    }\r\n                    else {\r\n                        props.dialogController.setDialogTitle (apiError.name);\r\n                    }\r\n                    props.dialogController.setDialogBody (apiError.message);\r\n                    props.dialogController.setDialogType (\"error\");\r\n                    props.dialogController.setShowDialog (true);\r\n                }\r\n                else {\r\n                    throw new Error (\"This api error is not valid !\");\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            props.dialogController.setDialogTitle (\"Error !\");\r\n            props.dialogController.setDialogBody (\r\n                    \"Please add at least one role.\"\r\n            );\r\n            props.dialogController.setDialogType (\"error\");\r\n            props.dialogController.setShowDialog (true);\r\n        }\r\n    }\r\n\r\n    async function handleRejectRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        button = event.target as HTMLButtonElement;\r\n        userID = Number (button.value);\r\n        try {\r\n            await newUserAPI.rejectCreateAccountRequest (\r\n                    userID\r\n            );\r\n            loadNewUserTable ();\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleAddRole (){\r\n        for (i = 0; i < roleHolder.length; i++){\r\n            role = roleHolder[i];\r\n            if (role.roleName === selectedRoleName){\r\n                updatedRoleHolder = roleHolder.slice ();\r\n                selectedRoleArray = updatedRoleHolder.splice (i, 1);\r\n                setRoleHolder (updatedRoleHolder);\r\n                if (updatedRoleHolder.length > 0){\r\n                    defaultRoleSelection = updatedRoleHolder[0];\r\n                    setSelectedRoleName (defaultRoleSelection.roleName);\r\n                }\r\n                selectedRole = selectedRoleArray[0];\r\n                updatedNewAccountRoleList = newAccountRoleList.slice ();\r\n                updatedNewAccountRoleList.push (selectedRole);\r\n                setNewAccountRoleList (updatedNewAccountRoleList);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleReset (){\r\n        loadRoleDropdownList ();\r\n        updatedNewAccountRoleList = new Array<Role> ();\r\n        setNewAccountRoleList (updatedNewAccountRoleList);\r\n    }\r\n\r\n    function handleSelectedRoleChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ): void {\r\n        setSelectedRoleName (event.target.value);\r\n    }\r\n\r\n    async function loadRoleDropdownList (): Promise<void> {\r\n        try {\r\n            updatedRoleHolder = await roleAPI.getAllRole (); \r\n            setRoleHolder (updatedRoleHolder);\r\n            defaultRoleSelection = updatedRoleHolder[0];\r\n            setSelectedRoleName (defaultRoleSelection.roleName);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    async function loadNewUserTable (): Promise<void> {\r\n        try {\r\n            setNewUserHolder (await newUserAPI.getAllCreateAccountRequest (\r\n                pageNumber\r\n                , pageSize\r\n            ));\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect (\r\n        function fetchTableData (): void {\r\n            loadRoleDropdownList ();\r\n            loadNewUserTable ();\r\n        }\r\n        , []\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <h1>\r\n                                Create Account Requests\r\n                            </h1>\r\n                            <hr/>\r\n                            <Form>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\"~\"} Add role \r\n                                                for the new account:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        <Col xs = \"auto\" className = \"mr-2\">\r\n                                            <Form.Control \r\n                                                as = \"select\" \r\n                                                value = {selectedRoleName}\r\n                                                onChange = {\r\n                                                    (event) => {\r\n// eslint-disable-next-line max-len\r\n                                                        handleSelectedRoleChange (\r\n                                                            event\r\n                                                        );\r\n                                                    } \r\n                                                }\r\n                                            >\r\n                                                {roleHolder.map (\r\n                                                    (\r\n                                                            role\r\n// eslint-disable-next-line max-len\r\n                                                    ) => renderRoleDropdownList (\r\n                                                            role\r\n                                                    )  \r\n                                                )}\r\n                                            </Form.Control>\r\n                                        </Col>\r\n                                        <Button \r\n                                            variant = \"success\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleAddRole ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Add role\r\n                                        </Button>\r\n                                        <Button \r\n                                            variant = \"primary\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleReset ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Reset\r\n                                        </Button>\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\">\"} The accepted account \r\n                                                will have roles:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        {newAccountRoleList.map (\r\n                                            (\r\n                                                    role\r\n                                            ) => renderRoleListSection (\r\n                                                    role\r\n                                            )\r\n                                        )}\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Table responsive = \"md\" hover = {true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                Full Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Phone Number\r\n                                            </th>\r\n                                            <th>\r\n                                                Email\r\n                                            </th>\r\n                                            <th>\r\n                                                User Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Actions\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {newUserHolder.map (\r\n                                            (\r\n                                                    newUser\r\n                                                    , index\r\n                                            ) => renderNewUserTable (\r\n                                                    newUser\r\n                                                    , index\r\n                                                    , handleAcceptRequest\r\n                                                    , handleRejectRequest\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\User.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\NewUserAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx",[],["145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161"],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\NewUser.tsx",[],{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","severity":1,"message":"197","line":17,"column":16,"nodeType":"198","messageId":"199","endLine":17,"endColumn":19,"suggestions":"200"},{"ruleId":"201","severity":1,"message":"202","line":19,"column":9,"nodeType":"203","messageId":"204","endLine":19,"endColumn":21},{"ruleId":"201","severity":1,"message":"205","line":3,"column":5,"nodeType":"203","messageId":"204","endLine":3,"endColumn":16},{"ruleId":"201","severity":1,"message":"206","line":4,"column":7,"nodeType":"203","messageId":"204","endLine":4,"endColumn":15},{"ruleId":"201","severity":1,"message":"207","line":4,"column":17,"nodeType":"203","messageId":"204","endLine":4,"endColumn":26},{"ruleId":"201","severity":1,"message":"208","line":6,"column":7,"nodeType":"203","messageId":"204","endLine":6,"endColumn":21},{"ruleId":"201","severity":1,"message":"209","line":6,"column":23,"nodeType":"203","messageId":"204","endLine":6,"endColumn":31},{"ruleId":"201","severity":1,"message":"210","line":9,"column":5,"nodeType":"203","messageId":"204","endLine":9,"endColumn":11},{"ruleId":"201","severity":1,"message":"211","line":9,"column":30,"nodeType":"203","messageId":"204","endLine":9,"endColumn":34},{"ruleId":"201","severity":1,"message":"212","line":12,"column":10,"nodeType":"203","messageId":"204","endLine":12,"endColumn":19},{"ruleId":"201","severity":1,"message":"213","line":14,"column":10,"nodeType":"203","messageId":"204","endLine":14,"endColumn":17},{"ruleId":"201","severity":1,"message":"214","line":15,"column":10,"nodeType":"203","messageId":"204","endLine":15,"endColumn":22},{"ruleId":"201","severity":1,"message":"215","line":16,"column":10,"nodeType":"203","messageId":"204","endLine":16,"endColumn":18},{"ruleId":"201","severity":1,"message":"216","line":16,"column":20,"nodeType":"203","messageId":"204","endLine":16,"endColumn":27},{"ruleId":"201","severity":1,"message":"217","line":17,"column":10,"nodeType":"203","messageId":"204","endLine":17,"endColumn":20},{"ruleId":"201","severity":1,"message":"218","line":17,"column":22,"nodeType":"203","messageId":"204","endLine":17,"endColumn":33},{"ruleId":"201","severity":1,"message":"219","line":18,"column":10,"nodeType":"203","messageId":"204","endLine":18,"endColumn":23},{"ruleId":"201","severity":1,"message":"220","line":5,"column":10,"nodeType":"203","messageId":"204","endLine":5,"endColumn":14},{"ruleId":"201","severity":1,"message":"221","line":95,"column":22,"nodeType":"203","messageId":"204","endLine":95,"endColumn":35},{"ruleId":"201","severity":1,"message":"222","line":96,"column":20,"nodeType":"203","messageId":"204","endLine":96,"endColumn":31},{"ruleId":"162","replacedBy":"223"},{"ruleId":"164","replacedBy":"224"},{"ruleId":"166","replacedBy":"225"},{"ruleId":"168","replacedBy":"226"},{"ruleId":"170","replacedBy":"227"},{"ruleId":"172","replacedBy":"228"},{"ruleId":"174","replacedBy":"229"},{"ruleId":"176","replacedBy":"230"},{"ruleId":"178","replacedBy":"231"},{"ruleId":"180","replacedBy":"232"},{"ruleId":"182","replacedBy":"233"},{"ruleId":"184","replacedBy":"234"},{"ruleId":"186","replacedBy":"235"},{"ruleId":"188","replacedBy":"236"},{"ruleId":"190","replacedBy":"237"},{"ruleId":"192","replacedBy":"238"},{"ruleId":"194","replacedBy":"239"},"callback-return",[],"global-require",[],"handle-callback-err",[],"id-blacklist",["240"],"lines-around-directive",["241"],"no-buffer-constructor",[],"no-catch-shadow",["242"],"no-mixed-requires",[],"no-native-reassign",["243"],"no-negated-in-lhs",["244"],"no-new-require",[],"no-path-concat",[],"no-process-env",[],"no-process-exit",[],"no-restricted-modules",[],"no-sync",[],"prefer-reflect",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["245","246"],"@typescript-eslint/no-unused-vars","'date' is defined but never used.","Identifier","unusedVar","'ChangeEvent' is defined but never used.","'Dispatch' is defined but never used.","'FormEvent' is defined but never used.","'SetStateAction' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'TypeGuard' is defined but never used.","'UserAPI' is defined but never used.","'LoggedInUser' is defined but never used.","'Location' is defined but never used.","'History' is defined but never used.","'useHistory' is defined but never used.","'useLocation' is defined but never used.","'LocationState' is defined but never used.","'User' is defined but never used.","'setPageNumber' is assigned a value but never used.","'setPageSize' is assigned a value but never used.",[],[],[],["240"],["241"],[],["242"],[],["243"],["244"],[],[],[],[],[],[],[],"id-denylist","padding-line-between-statements","no-shadow","no-global-assign","no-unsafe-negation",{"messageId":"247","fix":"248","desc":"249"},{"messageId":"250","fix":"251","desc":"252"},"suggestUnknown",{"range":"253","text":"254"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"253","text":"255"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[638,641],"unknown","never"]
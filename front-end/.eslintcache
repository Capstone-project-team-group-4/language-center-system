[{"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\index.tsx":"1","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\reportWebVitals.ts":"2","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\App.tsx":"3","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx":"4","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\HomePage.tsx":"5","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx":"6","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx":"7","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\LogInPage.tsx":"8","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx":"9","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx":"10","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx":"11","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx":"12","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\ManageCoursePage.tsx":"13","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx":"14","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx":"15","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx":"16","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx":"17","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx":"18","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx":"19","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx":"20","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\User.tsx":"21","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\RegisterForm.tsx":"22","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\RegisterFormAPI.tsx":"23","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx":"24","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\CourseAPI.tsx":"25","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\CourseTypeAPI.tsx":"26","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\CourseLevelAPI.tsx":"27","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\Course.tsx":"28","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx":"29","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx":"30","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\CourseType.tsx":"31","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\CourseLevel.tsx":"32","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\EditTeacherInfo.tsx":"33","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx":"34","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\ManageTeacherPage.tsx":"35","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\DetailPage.tsx":"36"},{"size":641,"mtime":1615338438000,"results":"37","hashOfConfig":"38"},{"size":431,"mtime":1615338438000,"results":"39","hashOfConfig":"38"},{"size":7153,"mtime":1616240985297,"results":"40","hashOfConfig":"38"},{"size":519,"mtime":1615338438000,"results":"41","hashOfConfig":"38"},{"size":3721,"mtime":1615338438000,"results":"42","hashOfConfig":"38"},{"size":11715,"mtime":1615338438000,"results":"43","hashOfConfig":"38"},{"size":2493,"mtime":1615338438000,"results":"44","hashOfConfig":"38"},{"size":8622,"mtime":1615338438000,"results":"45","hashOfConfig":"38"},{"size":15952,"mtime":1615338438000,"results":"46","hashOfConfig":"38"},{"size":5417,"mtime":1615655826387,"results":"47","hashOfConfig":"38"},{"size":20236,"mtime":1615338438000,"results":"48","hashOfConfig":"38"},{"size":13527,"mtime":1615338438000,"results":"49","hashOfConfig":"38"},{"size":45807,"mtime":1615338438000,"results":"50","hashOfConfig":"38"},{"size":1373,"mtime":1615338438000,"results":"51","hashOfConfig":"38"},{"size":3692,"mtime":1615338438000,"results":"52","hashOfConfig":"38"},{"size":5033,"mtime":1615338438000,"results":"53","hashOfConfig":"38"},{"size":3829,"mtime":1615338438000,"results":"54","hashOfConfig":"38"},{"size":1241,"mtime":1615338438000,"results":"55","hashOfConfig":"38"},{"size":6164,"mtime":1615338438000,"results":"56","hashOfConfig":"38"},{"size":11464,"mtime":1616240707933,"results":"57","hashOfConfig":"38"},{"size":1972,"mtime":1615338438000,"results":"58","hashOfConfig":"38"},{"size":989,"mtime":1615338438000,"results":"59","hashOfConfig":"38"},{"size":4535,"mtime":1615338438000,"results":"60","hashOfConfig":"38"},{"size":1803,"mtime":1615338438000,"results":"61","hashOfConfig":"38"},{"size":4260,"mtime":1615338438000,"results":"62","hashOfConfig":"38"},{"size":1887,"mtime":1615338438000,"results":"63","hashOfConfig":"38"},{"size":1981,"mtime":1615338438000,"results":"64","hashOfConfig":"38"},{"size":1361,"mtime":1615338438000,"results":"65","hashOfConfig":"38"},{"size":538,"mtime":1615338438000,"results":"66","hashOfConfig":"38"},{"size":1836,"mtime":1615338438000,"results":"67","hashOfConfig":"38"},{"size":201,"mtime":1615338438000,"results":"68","hashOfConfig":"38"},{"size":366,"mtime":1615338438000,"results":"69","hashOfConfig":"38"},{"size":11523,"mtime":1615650505437,"results":"70","hashOfConfig":"38"},{"size":5805,"mtime":1616171011655,"results":"71","hashOfConfig":"38"},{"size":11395,"mtime":1615936612122,"results":"72","hashOfConfig":"73"},{"size":6725,"mtime":1616258222119,"results":"74","hashOfConfig":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},"1xt27ae",{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"77"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"77"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"77"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"77"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"77"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"77"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"77"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"77"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},"u9os0h",{"filePath":"155","messages":"156","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\index.tsx",[],["157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173"],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\reportWebVitals.ts",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\App.tsx",["174"],"/* eslint-disable @typescript-eslint/no-array-constructor */\n// Import package members section:\nimport React, { ReactElement, useState } from 'react';\nimport { Route, Switch, useHistory } from 'react-router-dom';\nimport './App.css';\nimport { AdminPageHeader } from './common/component/AdminPageHeader';\nimport {\n  ModalDialog\n  , DialogControl\n} from './common/component/ModalDialog';\nimport { PageHeader } from './common/component/PageHeader';\nimport {\n  ProtectedRoute\n  , SecurityContext\n} from './common/component/ProtectedRoute';\nimport { LogOutAPI } from './common/service/LogOutAPI';\nimport { TypeGuard } from './common/service/TypeGuard';\nimport { LoggedInUser } from './model/LoggedInUser';\nimport { AdminConsolePage } from './page/admin/AdminConsolePage';\nimport { CreateAccountPage } from './page/admin/CreateAccountPage';\nimport { HomePage } from './page/HomePage';\nimport { EditStudentInfo } from './page/EditStudentInfo';\nimport { LogInPage } from './page/LogInPage';\nimport { SelectRolePage } from './page/SelectRolePage';\nimport { SignUpPage } from './page/SignUpPage';\nimport { History } from '../node_modules/@types/history';\nimport {\n  DisableOrDeleteAccountPage\n} from './page/admin/DisableOrDeleteAccountPage';\nimport { ManageCoursePage } from './page/admin/ManageCoursePage';\nimport { EditTeacherInfo } from './page/EditTeacherInfo';\nimport { ViewProfilePage } from './page/ViewProfilePage';\nimport { ManageTeacherPage } from './page/admin/ManageTeacherPage';\nimport { DetailPage } from './page/DetailPage';\n\nexport interface DataPage<T> {\n  totalPageCount: number;\n  pageDataHolder: T[];\n}\n\nexport function App(): ReactElement {\n\n  // Variables declaration:\n  let [showDialog, setShowDialog] = useState<boolean>(false);\n  let [dialogTitle, setDialogTitle] = useState<string>(\"\");\n  let [dialogBody, setDialogBody] = useState<string>(\"\");\n  let [dialogType, setDialogType] = useState<string>(\"\");\n  let modalDialog: ReactElement | undefined;\n  let [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  let [loggedInUser, setLoggedInUser] = useState<LoggedInUser>(\n    new LoggedInUser()\n  );\n  let dialogController: DialogControl | undefined;\n  let acceptableRoleNameHolder: string[] | undefined;\n  let adminPageSecurity: SecurityContext | undefined;\n  let selectRolePageSecurity: SecurityContext | undefined;\n  let logOutAPI: LogOutAPI;\n  let typeGuardian: TypeGuard;\n  let history: History<unknown>;\n  let [dialogIsConfirmed, setDialogIsConfirmed] = useState<boolean>(false);\n\n  logOutAPI = new LogOutAPI();\n  typeGuardian = new TypeGuard();\n  history = useHistory();\n\n  function handleCloseDialog(): void {\n    setShowDialog(false);\n  }\n\n  function handleConfirmDialog(): void {\n    setDialogIsConfirmed(true);\n    setShowDialog(false);\n  }\n\n  modalDialog =\n    <ModalDialog\n      showDialog={showDialog}\n      dialogTitle={dialogTitle}\n      dialogBody={dialogBody}\n      dialogType={dialogType}\n      handleCloseDialog={handleCloseDialog}\n      handleConfirmDialog={handleConfirmDialog}\n    />;\n  dialogController = new DialogControl(\n    setShowDialog\n    , setDialogTitle\n    , setDialogBody\n    , setDialogType\n    , setDialogIsConfirmed\n    , dialogIsConfirmed\n  );\n  acceptableRoleNameHolder = new Array(\"ROLE_ADMIN\");\n  adminPageSecurity = new SecurityContext(\n    isAuthenticated\n    , loggedInUser\n    , acceptableRoleNameHolder\n  );\n  acceptableRoleNameHolder = new Array(\n    \"ROLE_ADMIN\"\n    , \"ROLE_TEACHER\"\n    , \"ROLE_STUDENT\"\n  );\n  selectRolePageSecurity = new SecurityContext(\n    isAuthenticated\n    , loggedInUser\n    , acceptableRoleNameHolder\n  );\n\n  async function logOut(): Promise<void> {\n    try {\n      await logOutAPI.logOut();\n      history.push(\"/\");\n      setIsAuthenticated(false);\n      setLoggedInUser(new LoggedInUser());\n    }\n    catch (apiError: unknown) {\n      if (typeGuardian.isAxiosError(apiError)) {\n        if (typeof apiError.code === \"string\") {\n          setDialogTitle(\n            `${apiError.code}: ${apiError.name}`\n          );\n        }\n        else {\n          setDialogTitle(apiError.name);\n        }\n        setDialogBody(apiError.message);\n        setDialogType(\"error\");\n        setShowDialog(true);\n      }\n      else {\n        throw new Error(\"This api error is not valid !\");\n      }\n    }\n  }\n\n  return (\n    <Switch>\n      <Route exact path=\"/editStudentInfo/:studentID\">\n        <EditStudentInfo />\n      </Route>\n      <Route exact={true} path=\"/\">\n        <PageHeader />\n        <HomePage modalDialog={modalDialog} />\n      </Route>\n\n      <Route path=\"/sign-up-page\">\n        <SignUpPage\n          dialogController={dialogController}\n          modalDialog={modalDialog}\n        />\n      </Route>\n\n      <Route path=\"/log-in-page\">\n        <LogInPage\n          dialogController={dialogController}\n          modalDialog={modalDialog}\n          setIsAuthenticated={setIsAuthenticated}\n          setLoggedInUser={setLoggedInUser}\n        />\n      </Route>\n\n      <ProtectedRoute\n        path=\"/admin-console/create-account-request-page\"\n        securityContext={adminPageSecurity}\n        dialogController={dialogController}\n      >\n        <AdminPageHeader logOut={logOut} />\n        <CreateAccountPage\n          dialogController={dialogController}\n          modalDialog={modalDialog}\n        />\n      </ProtectedRoute>\n\n      <ProtectedRoute\n        path=\"/admin-console/disable-or-delete-account-page\"\n        securityContext={adminPageSecurity}\n        dialogController={dialogController}\n      >\n        <AdminPageHeader logOut={logOut} />\n        <DisableOrDeleteAccountPage\n          dialogController={dialogController}\n          modalDialog={modalDialog}\n        />\n      </ProtectedRoute>\n\n      <ProtectedRoute\n        path=\"/admin-console/managa-teacher-page\"\n        securityContext={adminPageSecurity}\n        dialogController={dialogController}\n      >\n        <AdminPageHeader logOut={logOut} />\n        <DisableOrDeleteAccountPage\n          dialogController={dialogController}\n          modalDialog={modalDialog}\n        />\n      </ProtectedRoute>\n\n      <ProtectedRoute\n        path=\"/admin-console/manage-course-page\"\n        securityContext={adminPageSecurity}\n        dialogController={dialogController}\n      >\n        <AdminPageHeader logOut={logOut} />\n        <ManageCoursePage\n          dialogController={dialogController}\n          modalDialog={modalDialog}\n        />\n      </ProtectedRoute>\n\n      <Route path=\"/admin-console\">\n        <AdminPageHeader logOut={logOut} />\n        <AdminConsolePage modalDialog={modalDialog} />\n      </Route>\n\n      <Route exact path=\"/editTeacherInfo/:teacherID\">\n        <EditTeacherInfo />\n      </Route>\n\n      <Route path=\"/user_view\">\n        <ViewProfilePage />\n      </Route>\n\n      <Route path=\"/user_detail/:studentID\">\n        <DetailPage />\n      </Route>\n\n      <ProtectedRoute\n        path=\"/select-role-page\"\n        securityContext={selectRolePageSecurity}\n        dialogController={dialogController}\n      >\n        <SelectRolePage\n          dialogController={dialogController}\n          modalDialog={modalDialog}\n        />\n      </ProtectedRoute>\n    </Switch>\n  );\n}\n\n","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\HomePage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx",["175","176","177"],"import React, {\n    ChangeEvent, FormEvent, ReactElement, useEffect, useState\n} from 'react';\nimport {\n    Button, Col, Container, Form, Row\n} from 'react-bootstrap';\nimport { UserAPI } from '../common/service/UserAPI';\nimport { useParams } from 'react-router-dom';\nimport { User, UserIndexSignature } from '../model/User';\n\nexport function EditStudentInfo (): ReactElement {\n    let [user, setUser] = useState<User>(new User());\n    let updatedUser: User | undefined;\n    let inputField:\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\n    let userAPI: UserAPI | undefined;\n    let param: any = useParams();\n    let [student, setStudent] = useState<User>(new User());\n    \n    useEffect (() => {\n        userAPI = new UserAPI();\n        userAPI.displayStudent(param.studentID).then(\n            (res) => {\n                setUser(res.data);\n                // console.log(student.userName);\n            }\n    );\n    }, []);\n\n    \n    function handleUserChange (\n        event: ChangeEvent<\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\n        >\n    ){\n        updatedUser = new User(user);\n        inputField = event.target;\n        updatedUser[\n            inputField.name as keyof UserIndexSignature\n        ] = inputField.value;\n        setUser(updatedUser);\n    }\n\n    function updateStudent (event: FormEvent<HTMLFormElement>, userID: number) {\n        event.preventDefault();\n        userAPI = new UserAPI();\n        userAPI.update(user, userID);\n        console.log(userID);\n    }\n \n    console.log(param.studentID);\n    // console.log(student.userName);\n    return (\n        <Container fluid={true} id=\"PageContentContainer\">\n            <Container fluid={true} id=\"PageHeaderContainer\">\n                <header>\n                </header>\n                <nav>\n                </nav>\n            </Container>\n            <main>\n                <Container id=\"PageBodyContainer\">\n                    <h1>{param.studentID}</h1>\n                    <Row>\n                        <Col>\n                            <Form\n                                noValidate={false}\n                                onSubmit={(event) => {\n                                    updateStudent(event, param.studentID);\n                                }}\n                            >\n                                <Form.Group>\n                                    <Form.Label>\n                                        User Name:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"userName\"\n                                        id=\"userName\"\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\n                                        required={true}\n                                        spellCheck={false}\n                                        value = {user.userName}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        First Name:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"firstName\"\n                                        id=\"firstName\"\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\n                                        value={user.firstName}\n                                        required={true}\n                                        spellCheck={false}\n                                        // value = {user.userName}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Last Name:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"lastName\"\n                                        id=\"lastName\"\n                                        pattern=\"^[a-z0-9_-]{1,15}$\"\n                                        value={user.lastName}\n                                        required={true}\n                                        spellCheck={false}\n                                        // value = {user.userName}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Email:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"email\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"email\"\n                                        id=\"email\"\n                                        value={user.email}\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        DOB:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"date\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"dob\"\n                                        id=\"dob\"\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Phone:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"phoneNumber\"\n                                        id=\"phoneNumber\"\n                                        value={user.phoneNumber}\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Gender\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"gender\"\n                                        id=\"gender\"\n                                        value={user.gender}\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Job:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"job\"\n                                        id=\"job\"\n                                        value={user.job}\n                                        required={true}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Password:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"password\"\n                                        autoComplete=\"off\"\n                                        autoFocus={false}\n                                        name=\"password\"\n                                        id=\"password\"\n                                        placeholder=\"Your new password\"\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Account Status\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"accountStatus\"\n                                        id=\"accountStatus\"\n                                        value={user.accountStatus}\n                                        required={false}\n                                        spellCheck={false}\n                                        // value = {user.userName}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Button\n                                    variant=\"success\"\n                                    type=\"submit\"\n                                    block = {true}\n                                >\n                                    Save\n                                </Button>\n                            </Form>\n                        </Col>\n                    </Row>\n                </Container>\n            </main>\n            <footer>\n            </footer>\n        </Container>\n    );\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx",["178","179","180","181","182","183","184","185","186","187","188","189","190","191","192"],"// Import package members section:\nimport React, { \n    ChangeEvent\n    , Dispatch, FormEvent\n    , ReactElement\n    , SetStateAction, useState \n} from 'react';\nimport { \n    Button, Card, Container, Form, ListGroup, Row \n} from 'react-bootstrap';\nimport './SelectRolePage.css';\nimport { TypeGuard } from '../common/service/TypeGuard';\nimport { DialogControl } from '../common/component/ModalDialog';\nimport { UserAPI } from '../common/service/UserAPI';\nimport { LoggedInUser } from '../model/LoggedInUser';\nimport { Location, History } from \"../../node_modules/@types/history\";\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { LocationState } from '../common/component/ProtectedRoute';\n\ninterface SelectRolePageProps {\n    dialogController: DialogControl;\n    modalDialog: ReactElement;\n}\n\nexport function SelectRolePage (props: SelectRolePageProps): ReactElement {\n\n    // Variables declaration:\n    \n    return (\n        <Container \n            fluid = {true} \n            id = \"SelectRolePageContentContainer\" \n            className = \"vh-100\"\n        >   \n            {props.modalDialog}\n            <header>\n            </header>\n            <nav>\n            </nav>\n            <main className = \"h-100\">\n                <Container \n                    fluid = {true} \n                    className = \"h-100\"\n                >\n                    <Row className = {\n                        `h-100 \n                        justify-content-center \n                        align-items-center`\n                    }>\n                        <Card id = \"SelectRoleCard\">\n                            <Card.Header className = \"text-center\">\n                                Choose a role\n                            </Card.Header>\n                            <ListGroup variant = \"flush\">\n                                <ListGroup.Item>\n                                    Cras justo odio\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    Dapibus ac facilisis in\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    Vestibulum at eros\n                                </ListGroup.Item>\n                            </ListGroup>\n                        </Card>\n                    </Row>\n                </Container>\n            </main>\n            <footer>\n            </footer>\n        </Container>\n    );\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\LogInPage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx",["193","194"],"// Import package members section:\nimport React, { \n    ChangeEvent\n    , MouseEvent\n    , ReactElement\n    , useEffect\n    , useState \n} from \"react\";\nimport { \n    Breadcrumb\n    , Button\n    , Col\n    , Container\n    , Form\n    , Row\n    , Table \n} from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { DialogControl } from \"../../common/component/ModalDialog\";\nimport { RegisterFormAPI } from \"../../common/service/RegisterFormAPI\";\nimport { RoleAPI } from \"../../common/service/RoleAPI\";\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\nimport { RegisterForm } from \"../../model/RegisterForm\";\nimport { Role } from \"../../model/Role\";\n\nfunction renderRoleDropdownList (role: Role): ReactElement {\n    let roleNameWithoutPrefix: string | undefined;\n\n    roleNameWithoutPrefix = role.roleName.slice (5);\n    return (\n        <option key = {role.roleID}>\n            {roleNameWithoutPrefix}\n        </option>\n    );\n}\n\nfunction renderRoleListSection (role: Role): ReactElement {\n    let roleNameWithoutPrefix: string | undefined;\n    \n    roleNameWithoutPrefix = role.roleName.slice (5);\n    return (\n        <span key = {role.roleID}>\n            {roleNameWithoutPrefix},&nbsp;\n        </span>\n    );\n}\n\nfunction renderRegisterFormTable (\n        registerForm: RegisterForm\n        , index: number\n        , handleAcceptRequest: (\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\n        ) => Promise<void> \n        , handleRejectRequest: (\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\n        ) => void \n): ReactElement {\n    return (\n        <tr key = {registerForm.formID}>\n            <td>\n                {index + 1}\n            </td>\n            <td>\n                {`${\n                    registerForm.firstName\n                } ${\n                    registerForm.middleName\n                } ${\n                    registerForm.lastName\n                }`}\n            </td>\n            <td>\n                {registerForm.phoneNumber}\n            </td>\n            <td>\n                {registerForm.email}\n            </td>\n            <td>\n                {registerForm.userName}\n            </td>\n            <td>\n                <Button \n                    variant = \"success\"\n                    type = \"button\"\n                    value = {registerForm.formID}\n                    onClick = {\n                        (event) => {\n                            handleAcceptRequest (event).catch (\n                                    (error: unknown) => {\n                                        console.error (error);\n                                    }\n                            );\n                        }\n                    }\n                >\n                    Accept\n                </Button>\n                <Button \n                    variant = \"danger\"\n                    type = \"button\"\n                    value = {registerForm.formID}\n                    onClick = {handleRejectRequest}\n                >\n                    Reject\n                </Button>\n            </td>\n        </tr>\n    );\n}\n\ninterface CreateAccountPageProps {\n    dialogController: DialogControl;\n    modalDialog: ReactElement;\n}\n\nexport function CreateAccountPage (\n    props: CreateAccountPageProps\n): ReactElement {\n\n    // Variables declaration:\n    let [registerFormHolder, setRegisterFormHolder] \n        = useState<RegisterForm[]> ([]);\n    let registerFormAPI: RegisterFormAPI;\n    let typeGuardian: TypeGuard;\n    let [pageNumber, setPageNumber] = useState<number> (0);\n    let [pageSize, setPageSize] = useState<number> (10);\n    let [roleHolder, setRoleHolder] = useState<Role[]> ([]);\n    let roleAPI: RoleAPI;\n    let [selectedRoleName, setSelectedRoleName] = useState<string> (\"\");\n    let [newAccountRoleList, setNewAccountRoleList] = useState<Role[]> ([]);\n    let i: number | undefined; \n    let role: Role | undefined;\n    let selectedRoleArray: Role[] | undefined;\n    let selectedRole: Role | undefined;\n    let updatedNewAccountRoleList: Role[] | undefined;\n    let updatedRoleHolder: Role[] | undefined;\n    let defaultRoleSelection: Role | undefined;\n    let button: HTMLButtonElement | undefined;\n    let [userID, setUserID] = useState<number> (0);\n    let roleNameWithoutPrefix: string | undefined;\n\n    registerFormAPI = new RegisterFormAPI ();\n    typeGuardian = new TypeGuard ();\n    roleAPI = new RoleAPI ();\n    \n    async function handleAcceptRequest (\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\n    ): Promise<void> {\n        if (newAccountRoleList.length > 0){\n            button = event.target as HTMLButtonElement;\n            try {\n                await registerFormAPI.acceptCreateAccountRequest (\n                        Number (button.value)\n                        , newAccountRoleList\n                );\n                loadRegisterFormTable ();\n                return Promise.resolve<undefined> (undefined);\n            }\n            catch (apiError: unknown){\n                if (typeGuardian.isAxiosError (apiError)){\n                    if (typeof apiError.code === \"string\"){\n                        props.dialogController.setDialogTitle (\n                            `${apiError.code}: ${apiError.name}`\n                        );\n                    }\n                    else {\n                        props.dialogController.setDialogTitle (apiError.name);\n                    }\n                    props.dialogController.setDialogBody (apiError.message);\n                    props.dialogController.setDialogType (\"error\");\n                    props.dialogController.setShowDialog (true);\n                }\n                return Promise.reject (apiError);\n            }\n        }\n        else {\n            props.dialogController.setDialogTitle (\"Error !\");\n            props.dialogController.setDialogBody (\n                    \"Please add at least one role.\"\n            );\n            props.dialogController.setDialogType (\"error\");\n            props.dialogController.setShowDialog (true);\n            return Promise.reject (\n                    new Error (\"Please add at least one role !\")\n            );\n        }\n    }\n\n    function handleRejectRequest (\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\n    ): void {\n        button = event.target as HTMLButtonElement;\n        setUserID (Number (button.value));\n        props.dialogController.setDialogTitle (\"Confirm Rejection\");\n        props.dialogController.setDialogBody (\n                \"Are you sure you want to reject this create account request ?\"\n        );\n        props.dialogController.setDialogType (\"confirm\");\n        props.dialogController.setShowDialog (true);\n    }\n\n    async function executeRequestRejection (): Promise<void> {\n        try {\n            await registerFormAPI.rejectCreateAccountRequest (\n                    userID\n            );\n            loadRegisterFormTable ();\n            return Promise.resolve<undefined> (undefined);\n        }\n        catch (apiError: unknown){\n            if (typeGuardian.isAxiosError (apiError)){\n                if (typeof apiError.code === \"string\"){\n                    props.dialogController.setDialogTitle (\n                        `${apiError.code}: ${apiError.name}`\n                    );\n                }\n                else {\n                    props.dialogController.setDialogTitle (apiError.name);\n                }\n                props.dialogController.setDialogBody (apiError.message);\n                props.dialogController.setDialogType (\"error\");\n                props.dialogController.setShowDialog (true);\n            }\n            return Promise.reject (apiError);\n        }\n    }\n\n    function handleAddRole (){\n        for (i = 0; i < roleHolder.length; i++){\n            role = roleHolder[i];\n            if (role.roleName === `ROLE_${selectedRoleName}`){\n                updatedRoleHolder = roleHolder.slice ();\n                selectedRoleArray = updatedRoleHolder.splice (i, 1);\n                setRoleHolder (updatedRoleHolder);\n                if (updatedRoleHolder.length > 0){\n                    defaultRoleSelection = updatedRoleHolder[0];\n                    roleNameWithoutPrefix \n                        = defaultRoleSelection.roleName.slice (5); \n                    setSelectedRoleName (roleNameWithoutPrefix);\n                }\n                selectedRole = selectedRoleArray[0];\n                updatedNewAccountRoleList = newAccountRoleList.slice ();\n                updatedNewAccountRoleList.push (selectedRole);\n                setNewAccountRoleList (updatedNewAccountRoleList);\n                break;\n            }\n        }\n    }\n\n    function handleReset (){\n        loadRoleDropdownList ().catch (\n                (error: unknown) => {\n                    console.error (error);\n                }\n        );\n        updatedNewAccountRoleList = new Array<Role> ();\n        setNewAccountRoleList (updatedNewAccountRoleList);\n    }\n\n    function handleSelectedRoleChange (\n        event: ChangeEvent<\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\n        >\n    ): void {\n        setSelectedRoleName (event.target.value);\n    }\n\n    async function loadRoleDropdownList (): Promise<void> {\n        try {\n            updatedRoleHolder = await roleAPI.getAllRole (); \n            setRoleHolder (updatedRoleHolder);\n            defaultRoleSelection = updatedRoleHolder[0];\n            roleNameWithoutPrefix = defaultRoleSelection.roleName.slice (5);\n            setSelectedRoleName (roleNameWithoutPrefix);\n            return Promise.resolve<undefined> (undefined);\n        }\n        catch (apiError: unknown){\n            if (typeGuardian.isAxiosError (apiError)){\n                if (typeof apiError.code === \"string\"){\n                    props.dialogController.setDialogTitle (\n                            `${apiError.code}: ${apiError.name}`\n                    );\n                }\n                else {\n                    props.dialogController.setDialogTitle (apiError.name);\n                }\n                props.dialogController.setDialogBody (apiError.message);\n                props.dialogController.setDialogType (\"error\");\n                props.dialogController.setShowDialog (true);\n            }\n            return Promise.reject (apiError);\n        }\n    }\n\n    async function loadRegisterFormTable (): Promise<void> {\n        try {\n            setRegisterFormHolder (\n                    await registerFormAPI.getAllCreateAccountRequest (\n                            pageNumber\n                            , pageSize\n                    )\n            );\n            return Promise.resolve<undefined> (undefined);\n        }\n        catch (apiError: unknown){\n            if (typeGuardian.isAxiosError (apiError)){\n                if (typeof apiError.code === \"string\"){\n                    props.dialogController.setDialogTitle (\n                            `${apiError.code}: ${apiError.name}`\n                    );\n                }\n                else {\n                    props.dialogController.setDialogTitle (apiError.name);\n                }\n                props.dialogController.setDialogBody (apiError.message);\n                props.dialogController.setDialogType (\"error\");\n                props.dialogController.setShowDialog (true);\n            }\n            return Promise.reject (apiError);\n        }\n    }\n\n    useEffect (\n        (): void => {\n            loadRoleDropdownList ().catch (\n                    (error: unknown) => {\n                        console.error (error);\n                    }\n            );\n            loadRegisterFormTable ().catch (\n                    (error: unknown) => {\n                        console.error (error);\n                    }\n            );\n        }\n        , []\n    );\n\n    useEffect (\n        (): void => {\n            if (props.dialogController.dialogIsConfirmed === true){\n                executeRequestRejection ().catch (\n                        (error: unknown) => {\n                            console.error (error);\n                        }\n                );\n                props.dialogController.setDialogIsConfirmed (false); \n            }\n        }\n        , [props.dialogController.dialogIsConfirmed]\n    );\n\n    return (\n        <Container fluid = {true}>\n            {props.modalDialog}\n            <main>\n                <Container>\n                    <Row className = \"bg-white\">\n                        <Col>\n                            <Breadcrumb>\n                                <Breadcrumb.Item \n                                    linkAs = {Link}\n                                    linkProps = {{to: \"/\"}}\n                                >\n                                    Home\n                                </Breadcrumb.Item>\n                                <Breadcrumb.Item \n                                    linkAs = {Link}\n                                    linkProps = {{to: \"/admin-console\"}}\n                                >\n                                    Admin Console\n                                </Breadcrumb.Item>\n                                <Breadcrumb.Item active>\n                                    Create Account Requests\n                                </Breadcrumb.Item>\n                            </Breadcrumb>\n                            <h1>\n                                Create Account Requests\n                            </h1>\n                            <hr/>\n                            <Form>\n                                <Form.Group>\n                                    <Form.Row \n                                        className = \"justify-content-md-center\"\n                                    >\n                                        <Form.Label className = \"mr-2\">\n                                            <h4>\n                                                {\"~\"} Add role \n                                                for the new account:\n                                            </h4>\n                                        </Form.Label>\n                                        <Col xs = \"auto\" className = \"mr-2\">\n                                            <Form.Control \n                                                as = \"select\" \n                                                value = {selectedRoleName}\n                                                onChange = {\n                                                    (event) => {\n                                            // eslint-disable-next-line max-len\n                                                        handleSelectedRoleChange (\n                                                            event\n                                                        );\n                                                    } \n                                                }\n                                            >\n                                                {roleHolder.map (\n                                                    (\n                                                            role\n                                            // eslint-disable-next-line max-len\n                                                    ) => renderRoleDropdownList (\n                                                            role\n                                                    )  \n                                                )}\n                                            </Form.Control>\n                                        </Col>\n                                        <Button \n                                            variant = \"success\"\n                                            type = \"button\"\n                                            className = \"mr-2\"\n                                            onClick = {\n                                                () => {\n                                                    handleAddRole ();\n                                                }\n                                            }\n                                        >\n                                            Add role\n                                        </Button>\n                                        <Button \n                                            variant = \"primary\"\n                                            type = \"button\"\n                                            className = \"mr-2\"\n                                            onClick = {\n                                                () => {\n                                                    handleReset ();\n                                                }\n                                            }\n                                        >\n                                            Reset\n                                        </Button>\n                                    </Form.Row>\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Row \n                                        className = \"justify-content-md-center\"\n                                    >\n                                        <Form.Label className = \"mr-2\">\n                                            <h4>\n                                                {\">\"} The accepted account \n                                                will have roles:\n                                            </h4>\n                                        </Form.Label>\n                                        {newAccountRoleList.map (\n                                            (\n                                                    role\n                                            ) => renderRoleListSection (\n                                                    role\n                                            )\n                                        )}\n                                    </Form.Row>\n                                </Form.Group>\n                                <Table responsive = \"md\" hover = {true}>\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                #\n                                            </th>\n                                            <th>\n                                                Full Name\n                                            </th>\n                                            <th>\n                                                Phone Number\n                                            </th>\n                                            <th>\n                                                Email\n                                            </th>\n                                            <th>\n                                                User Name\n                                            </th>\n                                            <th>\n                                                Actions\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {registerFormHolder.map (\n                                            (\n                                                    registerForm\n                                                    , index\n                                            ) => renderRegisterFormTable (\n                                                    registerForm\n                                                    , index\n                                                    , handleAcceptRequest\n                                                    , handleRejectRequest\n                                            )\n                                        )}\n                                    </tbody>\n                                </Table>\n                            </Form>\n                        </Col>\n                    </Row>\n                </Container>\n            </main>\n            <footer>\n            </footer>\n        </Container>\n    );\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\ManageCoursePage.tsx",["195","196","197"],"/* eslint-disable no-await-in-loop */\n// Import package members section:\nimport React, { \n    ChangeEvent,\n    FormEvent,\n    MouseEvent\n    , ReactElement\n    , useEffect\n    , useState \n} from \"react\";\nimport { \n    Breadcrumb\n    , Button\n    , Col\n    , Container\n    , Form\n    , Modal, Row\n    , Table \n} from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { DataPage } from \"../../App\";\nimport { DialogControl } from \"../../common/component/ModalDialog\";\nimport { CourseAPI } from \"../../common/service/CourseAPI\";\nimport { CourseLevelAPI } from \"../../common/service/CourseLevelAPI\";\nimport { CourseTypeAPI } from \"../../common/service/CourseTypeAPI\";\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\nimport { UserAPI } from \"../../common/service/UserAPI\";\nimport { Course } from \"../../model/Course\";\nimport { CourseLevel } from \"../../model/CourseLevel\";\nimport { CourseType } from \"../../model/CourseType\";\nimport { User } from \"../../model/User\";\n\nfunction renderCourseTypeDropdownList (courseType: CourseType): ReactElement {\n    return (\n        <option \n            key = {courseType.typeID} \n            value = {courseType.typeID}\n        >\n            {courseType.typeName}\n        </option>\n    );\n}\n\nfunction renderCourseLevelDropdownList (\n        courseLevel: CourseLevel\n): ReactElement {\n    return (\n        <option \n            key = {courseLevel.levelID} \n            value = {courseLevel.levelID}\n        >\n            {courseLevel.levelName}\n        </option>\n    );\n}\n\nfunction renderCourseTable (\n        course: Course\n        , index: number \n        , openViewDetailsDialog: (\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\n        ) => void \n        , openEditCourseForm: (\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\n        ) => Promise<void>\n        , handleDeleteCourse: (\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\n        ) => void \n): ReactElement {\n    return (\n        <tr key = {course.courseID}>\n            <td>\n                {index + 1}\n            </td>\n            <td>\n                {course.courseName}\n            </td>\n            <td>\n                {course.courseType.typeName}\n            </td>\n            <td>\n                {course.courseLevel.levelName}\n            </td>\n            <td>\n                {course.tuitionFee}\n            </td>\n            <td>\n                <Button \n                    variant = \"primary\"\n                    type = \"button\"\n                    value = {course.courseID}\n                    onClick = {\n                        (event) => {\n                            openViewDetailsDialog (event);\n                        }\n                    }\n                >\n                    Details\n                </Button>\n                <Button \n                    variant = \"success\"\n                    type = \"button\"\n                    value = {course.courseID}\n                    onClick = {\n                        (event) => {\n                            openEditCourseForm (event).catch (\n                                    (error: unknown) => {\n                                        console.error (error);\n                                    }\n                            );\n                        }\n                    }\n                >\n                    Edit\n                </Button>\n                <Button \n                    variant = \"danger\"\n                    type = \"button\"\n                    value = {course.courseID}\n                    onClick = {\n                        (event) => {\n                            handleDeleteCourse (event);\n                        }\n                    }\n                >\n                    Delete\n                </Button>\n            </td>\n        </tr>\n    );\n}\n\ninterface ManageCoursePageProps {\n    dialogController: DialogControl;\n    modalDialog: ReactElement;\n}\n\nexport function ManageCoursePage (props: ManageCoursePageProps): ReactElement {\n\n    // Variables declaration:\n    let [selectedCourseTypeID, setSelectedCourseTypeID] \n        = useState<number> (0); \n    let [courseTypeHolder, setCourseTypeHolder] = useState<CourseType[]> ([]);\n    let updatedCourseTypeHolder: CourseType[] | undefined;\n    let courseTypeAPI: CourseTypeAPI;\n    let defaultSelectedID: number | undefined;\n    let typeGuardian: TypeGuard;\n    let updatedCourseLevelHolder: CourseLevel[] | undefined;\n    let courseLevelAPI: CourseLevelAPI;\n    let [showCreateCourseForm, setShowCreateCourseForm] \n        = useState<boolean> (false);\n    let [courseLevelHolder, setCourseLevelHolder] \n        = useState<CourseLevel[]> ([]);\n    let [selectedCourseLevelID, setSelectedCourseLevelID] \n        = useState<number> (0);\n    let htmlElement: \n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\n    let [course, setCourse] = useState<Course> (new Course ());\n    let updatedCourse: Course | undefined;\n    let courseAPI: CourseAPI;\n    let courseType: CourseType | undefined;\n    let selectedCourseType: CourseType;\n    let courseLevel: CourseLevel | undefined;\n    let selectedCourseLevel: CourseLevel; \n    let i: number | undefined;\n    let [pageIndex] = useState<number> (0);\n    let [pageSize] = useState<number> (10);\n    let [totalPageCount, setTotalPageCount] = useState<number> (0);\n    let courseDataPage: DataPage<Course> | undefined;\n    let [courseHolder, setCourseHolder] = useState<Course[]> ([]);\n    let [showViewDetailDialog, setShowViewDetailDialog] \n        = useState<boolean> (false);\n    let button: HTMLButtonElement | undefined;\n    let courseID: number | undefined;\n    let courseSample: Course | undefined;\n    let [formattedLastModified, setFormattedLastModified] \n        = useState<string> (\"\");\n    let rawDate: Date | undefined;\n    let [formattedDateCreated, setFormattedDateCreated] \n        = useState<string> (\"\");\n    let [pendingCourseID, setPendingCourseID] = useState<number> (0);\n    let [showEditCourseForm, setShowEditCourseForm] \n        = useState<boolean> (false);\n    \n    courseTypeAPI = new CourseTypeAPI ();\n    courseLevelAPI = new CourseLevelAPI ();\n    courseAPI = new CourseAPI ();\n    typeGuardian = new TypeGuard ();\n    \n    function handleDeleteCourse (\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\n    ): void {\n        button = event.target as HTMLButtonElement;\n        setPendingCourseID (Number (button.value));\n        props.dialogController.setDialogTitle (\"Confirm Delete Course\");\n        props.dialogController.setDialogBody (\n                \"Are you sure you want to delete this course ?\"\n        );\n        props.dialogController.setDialogType (\"confirm\");\n        props.dialogController.setShowDialog (true);\n    }\n\n    async function executeCourseDeletion (): Promise<void> {\n        try {\n            await courseAPI.deleteCourse (pendingCourseID);\n            loadCourseTable ();\n            return Promise.resolve<undefined> (undefined);\n        }\n        catch (apiError: unknown){\n            if (typeGuardian.isAxiosError (apiError)){\n                if (typeof apiError.code === \"string\"){\n                    props.dialogController.setDialogTitle (\n                        `${apiError.code}: ${apiError.name}`\n                    );\n                }\n                else {\n                    props.dialogController.setDialogTitle (apiError.name);\n                }\n                props.dialogController.setDialogBody (apiError.message);\n                props.dialogController.setDialogType (\"error\");\n                props.dialogController.setShowDialog (true);\n            }\n            return Promise.reject (apiError);\n        }\n    }\n\n    function openViewDetailDialog (\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\n    ): void {\n        button = event.target as HTMLButtonElement;\n        courseID = Number (button.value);\n        for (i = 0; i < courseHolder.length; i++){\n            courseSample = courseHolder[i];\n            if (courseSample.courseID === courseID){\n                setCourse (courseSample);\n                rawDate = new Date (courseSample.lastModified); \n                if (rawDate.toString () === new Date (0).toString ()){\n                    setFormattedLastModified (\"Has not been modified yet !\");\n                }\n                else {\n                    setFormattedLastModified (rawDate.toLocaleString ());\n                }\n                rawDate = new Date (courseSample.dateCreated);\n                setFormattedDateCreated (rawDate.toLocaleString ());\n                break;\n            }\n        }\n        setShowViewDetailDialog (true);\n    }\n\n    function closeViewDetailDialog (): void {\n        setShowViewDetailDialog (false);\n    }\n    \n    function openCreateCourseForm (): void {\n        setCourse (new Course ());\n        loadCourseTypeDropdownList ().catch (\n                (error: unknown) => {\n                    console.error (error);\n                }\n        );\n        setShowCreateCourseForm (true);\n    }\n\n    function closeCreateCourseForm (): void {\n        setShowCreateCourseForm (false);\n    }\n    \n    async function openEditCourseForm (\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\n    ): Promise<void> {\n        button = event.target as HTMLButtonElement;\n        courseID = Number (button.value);\n        try {\n            for (i = 0; i < courseHolder.length; i++){\n                courseSample = courseHolder[i];\n                if (courseSample.courseID === courseID){\n                    setCourse (courseSample);\n                    await loadCourseTypeDropdownList ();\n                    setSelectedCourseTypeID (courseSample.courseType.typeID);\n                    break;\n                }\n            }\n            setShowEditCourseForm (true);\n            return Promise.resolve<undefined> (undefined);\n        }\n        catch (error: unknown){\n            return Promise.reject (error);\n        }\n    }\n\n    function closeEditCourseForm (): void {\n        setShowEditCourseForm (false);\n    }\n\n    function handleChange (\n        event: ChangeEvent<\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\n        >\n    ): void {\n        updatedCourse = new Course (course);\n        htmlElement = event.target;\n        switch (htmlElement.name){\n            default:\n                throw new Error (\"Unknown html element !\");\n\n            case \"courseNameField\":\n                updatedCourse.courseName = htmlElement.value;\n                break;\n\n            case \"descriptionTextarea\":\n                updatedCourse.description = htmlElement.value;\n                break;\n\n            case \"courseTypeDropdownList\":\n                setSelectedCourseTypeID (Number (htmlElement.value));\n                break;\n\n            case \"courseLevelDropdownList\":\n                setSelectedCourseLevelID (Number (htmlElement.value));\n                break;\n\n            case \"tuitionFeeField\":\n                updatedCourse.tuitionFee = parseFloat (htmlElement.value);\n                break;\n        }\n        setCourse (updatedCourse);\n    }\n\n    async function loadCourseTypeDropdownList (): Promise<void> {\n        try {\n            updatedCourseTypeHolder \n                = await courseTypeAPI.getAllCourseTypeInTheSystem (); \n            setCourseTypeHolder (updatedCourseTypeHolder);\n            defaultSelectedID = updatedCourseTypeHolder[0].typeID;\n            setSelectedCourseTypeID (defaultSelectedID);\n            return Promise.resolve<undefined> (undefined);\n        }\n        catch (apiError: unknown){\n            if (typeGuardian.isAxiosError (apiError)){\n                if (typeof apiError.code === \"string\"){\n                    props.dialogController.setDialogTitle (\n                            `${apiError.code}: ${apiError.name}`\n                    );\n                }\n                else {\n                    props.dialogController.setDialogTitle (apiError.name);\n                }\n                props.dialogController.setDialogBody (apiError.message);\n                props.dialogController.setDialogType (\"error\");\n                props.dialogController.setShowDialog (true);\n            }\n            return Promise.reject (apiError);\n        }\n    }\n\n    async function loadCourseLevelDropdownList (): Promise<void> {\n        try {\n            updatedCourseLevelHolder\n                = await courseLevelAPI.getAllCourseLevelByTypeID (\n                        selectedCourseTypeID\n                ); \n            setCourseLevelHolder (updatedCourseLevelHolder);\n            defaultSelectedID = updatedCourseLevelHolder[0].levelID;\n            setSelectedCourseLevelID (defaultSelectedID);\n            return Promise.resolve<undefined> (undefined);\n        }\n        catch (apiError: unknown){\n            if (typeGuardian.isAxiosError (apiError)){\n                if (typeof apiError.code === \"string\"){\n                    props.dialogController.setDialogTitle (\n                            `${apiError.code}: ${apiError.name}`\n                    );\n                }\n                else {\n                    props.dialogController.setDialogTitle (\n                            apiError.name\n                    );\n                }\n                props.dialogController.setDialogBody (apiError.message);\n                props.dialogController.setDialogType (\"error\");\n                props.dialogController.setShowDialog (true);\n            }\n            return Promise.reject (apiError);\n        }  \n    }\n\n    async function createCourse (\n            event: FormEvent<HTMLFormElement>\n    ): Promise<void> {\n        event.preventDefault ();\n        for (i = 0; i < courseTypeHolder.length; i++){\n            courseType = courseTypeHolder[i];\n            if (courseType.typeID === selectedCourseTypeID){\n                selectedCourseType = courseType;\n                break;\n            }\n        }\n        for (i = 0; i < courseLevelHolder.length; i++){\n            courseLevel = courseLevelHolder[i];\n            if (courseLevel.levelID === selectedCourseLevelID){\n                selectedCourseLevel = courseLevel;\n                break;\n            }\n        }\n        course.courseType = selectedCourseType;\n        course.courseLevel = selectedCourseLevel; \n        try {\n            await courseAPI.createNewCourse (course);\n            closeCreateCourseForm ();\n            props.dialogController.setDialogTitle (\"Course Created !\");\n            props.dialogController.setDialogBody (\n                `The course [${course.courseName}] \n                has been created successfully.`\n            );\n            props.dialogController.setDialogType (\"inform\");\n            props.dialogController.setShowDialog (true);\n            loadCourseTable ();\n            return Promise.resolve<undefined> (undefined);\n        }\n        catch (apiError: unknown){\n            if (typeGuardian.isAxiosError (apiError)){\n                if (typeof apiError.code === \"string\"){\n                    props.dialogController.setDialogTitle (\n                            `${apiError.code}: ${apiError.name}`\n                    );\n                }\n                else {\n                    props.dialogController.setDialogTitle (apiError.name);\n                }\n                props.dialogController.setDialogBody (apiError.message);\n                props.dialogController.setDialogType (\"error\");\n                props.dialogController.setShowDialog (true);\n            }\n            return Promise.reject (apiError);\n        }\n    }\n\n    async function editCourse (\n            event: FormEvent<HTMLFormElement>\n    ): Promise<void> {\n        event.preventDefault ();\n        for (i = 0; i < courseTypeHolder.length; i++){\n            courseType = courseTypeHolder[i];\n            if (courseType.typeID === selectedCourseTypeID){\n                selectedCourseType = courseType;\n                break;\n            }\n        }\n        for (i = 0; i < courseLevelHolder.length; i++){\n            courseLevel = courseLevelHolder[i];\n            if (courseLevel.levelID === selectedCourseLevelID){\n                selectedCourseLevel = courseLevel;\n                break;\n            }\n        }\n        course.courseType = selectedCourseType;\n        course.courseLevel = selectedCourseLevel; \n        try {\n            await courseAPI.updateCourse (course);\n            closeEditCourseForm ();\n            props.dialogController.setDialogTitle (\"Course Saved !\");\n            props.dialogController.setDialogBody (\n                `The course [${course.courseName}] \n                has been saved successfully.`\n            );\n            props.dialogController.setDialogType (\"inform\");\n            props.dialogController.setShowDialog (true);\n            loadCourseTable ();\n            return Promise.resolve<undefined> (undefined);\n        }\n        catch (apiError: unknown){\n            if (typeGuardian.isAxiosError (apiError)){\n                if (typeof apiError.code === \"string\"){\n                    props.dialogController.setDialogTitle (\n                            `${apiError.code}: ${apiError.name}`\n                    );\n                }\n                else {\n                    props.dialogController.setDialogTitle (apiError.name);\n                }\n                props.dialogController.setDialogBody (apiError.message);\n                props.dialogController.setDialogType (\"error\");\n                props.dialogController.setShowDialog (true);\n            }\n            return Promise.reject (apiError);\n        }\n    }\n\n    async function loadCourseTable (): Promise<void> {\n        try {\n            courseDataPage = await courseAPI.getAllCourse (\n                    pageIndex\n                    , pageSize\n            ); \n            setTotalPageCount (courseDataPage.totalPageCount);\n            setCourseHolder (courseDataPage.pageDataHolder);\n            return Promise.resolve<undefined> (undefined);\n        }\n        catch (apiError: unknown){\n            if (typeGuardian.isAxiosError (apiError)){\n                if (typeof apiError.code === \"string\"){\n                    props.dialogController.setDialogTitle (\n                            `${apiError.code}: ${apiError.name}`\n                    );\n                }\n                else {\n                    props.dialogController.setDialogTitle (apiError.name);\n                }\n                props.dialogController.setDialogBody (apiError.message);\n                props.dialogController.setDialogType (\"error\");\n                props.dialogController.setShowDialog (true);\n            }\n            return Promise.reject (apiError);\n        }\n    }\n\n    useEffect (\n        (): void => {\n            loadCourseTable ().catch (\n                    (error: unknown) => {\n                        console.error (error);\n                    }\n            );\n        }\n        , []\n    );\n\n    useEffect (\n        (): void => {\n            if (selectedCourseTypeID !== 0){\n                loadCourseLevelDropdownList ().catch (\n                        (error: unknown) => {\n                            console.error (error);\n                        }\n                );\n            }\n        }\n        , [selectedCourseTypeID]\n    );\n    \n    useEffect (\n        (): void => {\n            if (props.dialogController.dialogIsConfirmed === true){\n                executeCourseDeletion ().catch (\n                        (error: unknown) => {\n                            console.error (error);\n                        }\n                );\n                props.dialogController.setDialogIsConfirmed (false); \n            }\n        }\n        , [props.dialogController.dialogIsConfirmed]\n    );\n\n    return (\n        <Container fluid = {true}>\n            {props.modalDialog}\n            <Modal\n                show = {showCreateCourseForm}\n                backdrop = \"static\"\n                keyboard = {false}\n                size = \"lg\"\n            >\n                <Modal.Header>\n                    <Modal.Title>New Course Information</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form \n                        id = \"CreateCourseForm\"\n                        className = \"pt-2 pr-5 pl-5 pb-0\"\n                        onSubmit = {\n                            (event) => {\n                                createCourse (event).catch (\n                                        (error: unknown) => {\n                                            console.error (error);\n                                        }\n                                );\n                            }\n                        }\n                    >\n                        <Form.Group controlId = \"CourseNameField\">\n                            <Form.Label>\n                                Course Name:\n                            </Form.Label>\n                            <Form.Control\n                                type = \"text\"\n                                autoComplete = \"on\"\n                                autoFocus = {true}\n                                name = \"courseNameField\"\n                                pattern = \"^[\\p{L} .'-]+$\"\n                                placeholder = \"Name for the new course ?\"\n                                required = {true}\n                                spellCheck = {false}\n                                value = {course.courseName}\n                                onChange = {\n                                    (event) => {\n                                        handleChange (event);\n                                    }\n                                }\n                            />\n                            <Form.Text className = \"text-muted\">\n                                format: characters only !  \n                            </Form.Text>\n                        </Form.Group>\n\n                        <Form.Group controlId = \"DescriptionTextarea\">\n                            <Form.Label>\n                                Description:\n                            </Form.Label>\n                            <Form.Control\n                                as = \"textarea\"\n                                autoComplete = \"off\"\n                                autoFocus = {false}\n                                name = \"descriptionTextarea\"\n                                placeholder = \"Description for the new course ?\"\n                                required = {false}\n                                spellCheck = {true}\n                                rows = {5}\n                                value = {course.description}\n                                onChange = {\n                                    (event) => {\n                                        handleChange (event);\n                                    }\n                                }\n                            />\n                        </Form.Group>\n\n                        <Form.Group controlId = \"CourseTypeDropdownList\">\n                            <Form.Label>\n                                Course Type:\n                            </Form.Label>\n                            <Form.Control \n                                as = \"select\" \n                                name = \"courseTypeDropdownList\"\n                                autoFocus = {false}\n                                required = {true}\n                                value = {selectedCourseTypeID}\n                                onChange = {\n                                    (event) => {\n                                        handleChange (\n                                            event\n                                        );\n                                    } \n                                }\n                            >\n                                {courseTypeHolder.map (\n                                    (\n                                            courseType\n                                    ) => renderCourseTypeDropdownList (\n                                            courseType\n                                    )  \n                                )}\n                            </Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId = \"CourseLevelDropdownList\">\n                            <Form.Label>\n                                Course Level:\n                            </Form.Label>\n                            <Form.Control \n                                as = \"select\" \n                                name = \"courseLevelDropdownList\"\n                                autoFocus = {false}\n                                required = {true}\n                                value = {selectedCourseLevelID}\n                                onChange = {\n                                    (event) => {\n                                        handleChange (\n                                            event\n                                        );\n                                    } \n                                }\n                            >\n                                {courseLevelHolder.map (\n                                    (\n                                            courseLevel\n                                    ) => renderCourseLevelDropdownList (\n                                            courseLevel\n                                    )  \n                                )}\n                            </Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId = \"TuitionFeeField\">\n                            <Form.Label>\n                                Tuition Fee (VND):\n                            </Form.Label>\n                            <Form.Control\n                                type = \"number\"\n                                autoComplete = \"on\"\n                                autoFocus = {false}\n                                name = \"tuitionFeeField\"\n                                placeholder = \"Price of the new course ?\"\n                                required = {true}\n                                spellCheck = {false}\n                                min = {0}\n                                step = {500}\n                                value = {course.tuitionFee}\n                                onChange = {\n                                    (event) => {\n                                        handleChange (event);\n                                    }\n                                }\n                            />\n                            <Form.Text className = \"text-muted\">\n                                format: numbers only !  \n                            </Form.Text>\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button \n                        variant = \"success\" \n                        type = \"submit\"\n                        form = \"CreateCourseForm\" \n                    >\n                        Create Course\n                    </Button>\n                    <Button \n                        variant = \"outline-secondary\" \n                        onClick = {closeCreateCourseForm}\n                    >\n                        Cancel\n                    </Button>   \n                </Modal.Footer>\n            </Modal>\n            <Modal\n                show = {showViewDetailDialog}\n                backdrop = \"static\"\n                keyboard = {false}\n                size = \"lg\"\n            >\n                <Modal.Header>\n                    <Modal.Title>Course Details</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form\n                        className = \"pt-2 pr-5 pl-5 pb-0\"\n                    >\n                        <Form.Row>\n                            <Form.Group as = {Row} controlId = \"CourseIDInfo\">\n                                <Form.Label \n                                    column = {true}\n                                    md = {5}\n                                >\n                                    + Course ID:\n                                </Form.Label>\n                                <Col md = {7}>\n                                    <Form.Control \n                                        plaintext = {true} \n                                        readOnly = {true} \n                                        value = {course.courseID}\n                                    />\n                                </Col>\n                            </Form.Group>\n\n                            <Form.Group as = {Row} controlId = \"CourseNameInfo\">\n                                <Form.Label \n                                    column = {true}\n                                    md = {5}\n                                >\n                                    + Course Name:\n                                </Form.Label>\n                                <Col md = {7}>\n                                    <Form.Control \n                                        plaintext = {true} \n                                        readOnly = {true} \n                                        value = {course.courseName}\n                                    />\n                                </Col>\n                            </Form.Group>\n                        </Form.Row>\n                        \n                        <Form.Group controlId = \"DescriptionInfo\">\n                            <Form.Label>\n                                + Description:\n                            </Form.Label>\n                            <Form.Control\n                                as = \"textarea\"\n                                readOnly = {true}\n                                rows = {5}\n                                value = {course.description}\n                            />\n                        </Form.Group>\n                        \n                        <Form.Row>\n                            <Form.Group as = {Row} controlId = \"CourseTypeInfo\">\n                                <Form.Label \n                                    column = {true}\n                                    md = {5}\n                                >\n                                    + Course Type:\n                                </Form.Label>\n                                <Col md = {7}>\n                                    <Form.Control \n                                        plaintext = {true} \n                                        readOnly = {true} \n                                        value = {course.courseType.typeName}\n                                    />\n                                </Col>\n                            </Form.Group>\n\n                            <Form.Group \n                                as = {Row} \n                                controlId = \"CourseLevelInfo\"\n                            >\n                                <Form.Label \n                                    column = {true}\n                                    md = {5}\n                                >\n                                    + Course Level:\n                                </Form.Label>\n                                <Col md = {7}>\n                                    <Form.Control \n                                        plaintext = {true} \n                                        readOnly = {true} \n                                        value = {course.courseLevel.levelName}\n                                    />\n                                </Col>\n                            </Form.Group>\n                        </Form.Row>\n\n                        <Form.Group as = {Row} controlId = \"TuitionFeeInfo\">\n                            <Form.Label\n                                column = {true}\n                                md = {3}\n                            >\n                                + Tuition Fee (VND):\n                            </Form.Label>\n                            <Col md = {9}>\n                                <Form.Control\n                                    plaintext = {true} \n                                    readOnly = {true}\n                                    value = {\n                                        `${\n                                            course.tuitionFee.toLocaleString ()\n                                        } đ`\n                                    }\n                                />\n                            </Col>\n                        </Form.Group>\n\n                        <Form.Group as = {Row} controlId = \"LastModifiedInfo\">\n                            <Form.Label\n                                column = {true}\n                                md = {3}\n                            >\n                                + Last Modified:\n                            </Form.Label>\n                            <Col md = {9}>\n                                <Form.Control\n                                    plaintext = {true} \n                                    readOnly = {true}\n                                    value = {formattedLastModified}\n                                />\n                            </Col>\n                        </Form.Group>\n\n                        <Form.Group as = {Row} controlId = \"DateCreatedInfo\">\n                            <Form.Label\n                                column = {true}\n                                md = {3}\n                            >\n                                + Date Created:\n                            </Form.Label>\n                            <Col md = {9}>\n                                <Form.Control\n                                    plaintext = {true} \n                                    readOnly = {true}\n                                    value = {formattedDateCreated}\n                                />\n                            </Col>\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button \n                        variant = \"info\" \n                        onClick = {closeViewDetailDialog}\n                    >\n                        Close\n                    </Button>   \n                </Modal.Footer>\n            </Modal>\n            <Modal\n                show = {showEditCourseForm}\n                backdrop = \"static\"\n                keyboard = {false}\n                size = \"lg\"\n            >\n                <Modal.Header>\n                    <Modal.Title>Edit Course</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form \n                        id = \"EditCourseForm\"\n                        className = \"pt-2 pr-5 pl-5 pb-0\"\n                        onSubmit = {\n                            (event) => {\n                                editCourse (event).catch (\n                                        (error: unknown) => {\n                                            console.error (error);\n                                        }\n                                );\n                            }\n                        }\n                    >\n                        <Form.Group controlId = \"CourseNameField\">\n                            <Form.Label>\n                                Course Name:\n                            </Form.Label>\n                            <Form.Control\n                                type = \"text\"\n                                autoComplete = \"on\"\n                                autoFocus = {true}\n                                name = \"courseNameField\"\n                                pattern = \"^[\\p{L} .'-]+$\"\n                                placeholder = \"Name for the course ?\"\n                                required = {true}\n                                spellCheck = {false}\n                                value = {course.courseName}\n                                onChange = {\n                                    (event) => {\n                                        handleChange (event);\n                                    }\n                                }\n                            />\n                            <Form.Text className = \"text-muted\">\n                                format: characters only !  \n                            </Form.Text>\n                        </Form.Group>\n\n                        <Form.Group controlId = \"DescriptionTextarea\">\n                            <Form.Label>\n                                Description:\n                            </Form.Label>\n                            <Form.Control\n                                as = \"textarea\"\n                                autoComplete = \"off\"\n                                autoFocus = {false}\n                                name = \"descriptionTextarea\"\n                                placeholder = \"Description for the course ?\"\n                                required = {false}\n                                spellCheck = {true}\n                                rows = {5}\n                                value = {course.description}\n                                onChange = {\n                                    (event) => {\n                                        handleChange (event);\n                                    }\n                                }\n                            />\n                        </Form.Group>\n\n                        <Form.Group controlId = \"CourseTypeDropdownList\">\n                            <Form.Label>\n                                Course Type:\n                            </Form.Label>\n                            <Form.Control \n                                as = \"select\" \n                                name = \"courseTypeDropdownList\"\n                                autoFocus = {false}\n                                required = {true}\n                                value = {selectedCourseTypeID}\n                                onChange = {\n                                    (event) => {\n                                        handleChange (\n                                            event\n                                        );\n                                    } \n                                }\n                            >\n                                {courseTypeHolder.map (\n                                    (\n                                            courseType\n                                    ) => renderCourseTypeDropdownList (\n                                            courseType\n                                    )  \n                                )}\n                            </Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId = \"CourseLevelDropdownList\">\n                            <Form.Label>\n                                Course Level:\n                            </Form.Label>\n                            <Form.Control \n                                as = \"select\" \n                                name = \"courseLevelDropdownList\"\n                                autoFocus = {false}\n                                required = {true}\n                                value = {selectedCourseLevelID}\n                                onChange = {\n                                    (event) => {\n                                        handleChange (\n                                            event\n                                        );\n                                    } \n                                }\n                            >\n                                {courseLevelHolder.map (\n                                    (\n                                            courseLevel\n                                    ) => renderCourseLevelDropdownList (\n                                            courseLevel\n                                    )  \n                                )}\n                            </Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId = \"TuitionFeeField\">\n                            <Form.Label>\n                                Tuition Fee (VND):\n                            </Form.Label>\n                            <Form.Control\n                                type = \"number\"\n                                autoComplete = \"on\"\n                                autoFocus = {false}\n                                name = \"tuitionFeeField\"\n                                placeholder = \"Price of the course ?\"\n                                required = {true}\n                                spellCheck = {false}\n                                min = {0}\n                                step = {500}\n                                value = {course.tuitionFee}\n                                onChange = {\n                                    (event) => {\n                                        handleChange (event);\n                                    }\n                                }\n                            />\n                            <Form.Text className = \"text-muted\">\n                                format: numbers only !  \n                            </Form.Text>\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button \n                        variant = \"success\" \n                        type = \"submit\"\n                        form = \"EditCourseForm\" \n                    >\n                        Save\n                    </Button>\n                    <Button \n                        variant = \"outline-secondary\" \n                        onClick = {closeEditCourseForm}\n                    >\n                        Cancel\n                    </Button>   \n                </Modal.Footer>\n            </Modal>\n            <main>\n                <Container>\n                    <Row className = \"bg-white\">\n                        <Col>\n                            <Breadcrumb>\n                                <Breadcrumb.Item \n                                    linkAs = {Link}\n                                    linkProps = {{to: \"/\"}}\n                                >\n                                    Home\n                                </Breadcrumb.Item>\n                                <Breadcrumb.Item \n                                    linkAs = {Link}\n                                    linkProps = {{to: \"/admin-console\"}}\n                                >\n                                    Admin Console\n                                </Breadcrumb.Item>\n                                <Breadcrumb.Item active>\n                                    Manage course functions\n                                </Breadcrumb.Item>\n                            </Breadcrumb>\n                            <h1 className = \"mb-3\">\n                                <span className = \"mr-3\">\n                                    Manage Course\n                                </span>\n                                <Button \n                                    variant = \"success\"\n                                    type = \"button\"\n                                    onClick = {openCreateCourseForm}\n                                >\n                                    Create New\n                                </Button>\n                            </h1>\n                            <Form>\n                                <Table responsive = \"md\" hover = {true}>\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                #\n                                            </th>\n                                            <th>\n                                                Course Name\n                                            </th>\n                                            <th>\n                                                Course Type\n                                            </th>\n                                            <th>\n                                                Course Level\n                                            </th>\n                                            <th>\n                                                Tuition Fee\n                                            </th>\n                                            <th>\n                                                Actions\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {courseHolder.map (\n                                            (\n                                                    course\n                                                    , index\n                                            ) => renderCourseTable (\n                                                    course\n                                                    , index\n                                                    , openViewDetailDialog\n                                                    , openEditCourseForm\n                                                    , handleDeleteCourse\n                                            )\n                                        )}\n                                    </tbody>\n                                </Table>\n                            </Form>\n                        </Col>\n                    </Row>\n                </Container>\n            </main>\n            <footer>\n            </footer>\n        </Container>\n    );\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx",["198"],"// Import package members section:\nimport axios, { AxiosError, AxiosInstance, AxiosResponse } from \"axios\";\nimport { LoggedInUser } from \"../../model/LoggedInUser\";\nimport { User } from \"../../model/User\";\nimport { AxiosInstanceGet } from \"./AxiosInstanceGet\";\nimport { ErrorHandle } from \"./ErrorHandle\";\nimport { TypeGuard } from \"./TypeGuard\";\n\nexport class UserAPI {\n\n    // Variables declaration:\n    private serverResponse: AxiosResponse<unknown> | undefined;\n    private axiosInstance: AxiosInstance;\n    private axiosInstanceGetter: AxiosInstanceGet | undefined;\n    private typeGuardian: TypeGuard;\n    private loggedInUser: LoggedInUser | undefined;\n    private axiosError: AxiosError<unknown> | undefined;\n    private errorHandler: ErrorHandle;\n    private requestParameterHolder: URLSearchParams | undefined;\n    private userHolder: User[] | undefined;\n\n    public constructor() {\n        this.axiosInstanceGetter = new AxiosInstanceGet();\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance();\n        this.errorHandler = new ErrorHandle();\n        this.typeGuardian = new TypeGuard();\n    }\n\n    public listUsers(): Promise<AxiosResponse> {\n        return axios.get(\"http://localhost:8080/users\");\n    }\n\n    public async getAllUserExcludingCurrentLoggedInUser(\n        pageNumber: number\n        , pageSize: number\n    ): Promise<User[]> {\n        this.requestParameterHolder = new URLSearchParams();\n        this.requestParameterHolder.set(\"pageNumber\", pageNumber.toString());\n        this.requestParameterHolder.set(\"pageSize\", pageSize.toString());\n        try {\n            this.serverResponse = await this.axiosInstance.get<unknown>(\n                \"/users:excluding-logged-in-user\"\n                , { params: this.requestParameterHolder }\n            );\n            if (this.typeGuardian.isUserArray(this.serverResponse.data)) {\n                this.userHolder = this.serverResponse.data;\n                return Promise.resolve<User[]>(this.userHolder);\n            }\n            else {\n                throw new Error(\"This server response is not valid !\");\n            }\n        }\n        catch (apiError: unknown) {\n            try {\n                this.axiosError\n                    = await this.errorHandler.handleApiError(apiError);\n                return Promise.reject(this.axiosError);\n            }\n            catch (apiError2: unknown) {\n                return Promise.reject(apiError2);\n            }\n        }\n    }\n\n    public async disableAnotherUser(\n        userID: number\n    ): Promise<void> {\n        try {\n            await this.axiosInstance.patch<undefined>(\n                `/users/${userID}:disable`\n            );\n            return Promise.resolve<undefined>(undefined);\n        }\n        catch (apiError: unknown) {\n            try {\n                this.axiosError\n                    = await this.errorHandler.handleApiError(apiError);\n                return Promise.reject(this.axiosError);\n            }\n            catch (apiError2: unknown) {\n                return Promise.reject(apiError2);\n            }\n        }\n    }\n\n    public async enableUser(\n        userID: number\n    ): Promise<void> {\n        try {\n            await this.axiosInstance.patch<undefined>(\n                `/users/${userID}:enable`\n            );\n            return Promise.resolve<undefined>(undefined);\n        }\n        catch (apiError: unknown) {\n            try {\n                this.axiosError\n                    = await this.errorHandler.handleApiError(apiError);\n                return Promise.reject(this.axiosError);\n            }\n            catch (apiError2: unknown) {\n                return Promise.reject(apiError2);\n            }\n        }\n    }\n\n    public async deleteAnotherUser(\n        userID: number\n    ): Promise<void> {\n        try {\n            await this.axiosInstance.delete<undefined>(\n                `/users/${userID}`\n            );\n            return Promise.resolve<undefined>(undefined);\n        }\n        catch (apiError: unknown) {\n            try {\n                this.axiosError\n                    = await this.errorHandler.handleApiError(apiError);\n                return Promise.reject(this.axiosError);\n            }\n            catch (apiError2: unknown) {\n                return Promise.reject(apiError2);\n            }\n        }\n    }\n\n    public async getCurrentLoggedInUser(\n        userName: string\n        , password: string\n    ): Promise<LoggedInUser> {\n        try {\n            this.serverResponse = await this.axiosInstance.get<unknown>(\n                \"/logged-in-user\"\n                , {\n                    auth: {\n                        username: userName\n                        , password: password\n                    }\n                }\n            );\n            if (this.typeGuardian.isLoggedInUser(this.serverResponse.data)) {\n                this.loggedInUser = this.serverResponse.data;\n                return Promise.resolve<LoggedInUser>(this.loggedInUser);\n            }\n            else {\n                throw new Error(\"This server response is not valid !\");\n            }\n        }\n        catch (apiError: unknown) {\n            try {\n                this.axiosError\n                    = await this.errorHandler.handleApiError(apiError);\n                return Promise.reject(this.axiosError);\n            }\n            catch (apiError2: unknown) {\n                return Promise.reject(apiError2);\n            }\n        }\n    }\n\n    public async registerUser(user: User): Promise<AxiosResponse> {\n        this.axiosInstanceGetter = new AxiosInstanceGet();\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance();\n        try {\n            this.serverResponse = await this.axiosInstance.post(\n                \"/users\"\n                , user\n            );\n            this.typeGuardian = new TypeGuard();\n            if (this.typeGuardian.isAxiosResponse(this.serverResponse)) {\n                return this.serverResponse;\n            }\n            else {\n                throw new Error(\"This server response is not valid !\");\n            }\n        }\n        catch (error) {\n            console.error(error.toJSON());\n            return Promise.reject<AxiosResponse>(error);\n        }\n    }\n\n    public async deleteUser(userID: string): Promise<AxiosResponse> {\n        try {\n            this.serverResponse = await this.axiosInstance.delete(\n                `/users/${userID}`\n            );\n            this.typeGuardian = new TypeGuard();\n            if (this.typeGuardian.isAxiosResponse(this.serverResponse)) {\n                return this.serverResponse;\n            }\n            else {\n                throw new Error(\"This server response is not valid !\");\n            }\n        }\n        catch (error) {\n            console.error(error.toJSON());\n            return Promise.reject<AxiosResponse>(error);\n        }\n    }\n\n    public async update(user: User, userID: number): Promise<AxiosResponse> {\n        this.axiosInstanceGetter = new AxiosInstanceGet();\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance();\n        try {\n            this.serverResponse = await this.axiosInstance.put(\n                `/editInfo/${userID}`\n                , user\n            );\n            this.typeGuardian = new TypeGuard();\n            if (this.typeGuardian.isAxiosResponse(this.serverResponse)) {\n                return this.serverResponse;\n            }\n            else {\n                throw new Error(\"This server response is not valid !\");\n            }\n        }\n        catch (error) {\n            console.error(error.toJSON());\n            return Promise.reject<AxiosResponse>(error);\n        }\n    }\n\n    public async displayStudent(userID: number): Promise<AxiosResponse> {\n        this.axiosInstanceGetter = new AxiosInstanceGet();\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance();\n        try {\n            this.serverResponse = await this.axiosInstance.get(\n                `/getUsers/${userID}`\n            );\n            this.typeGuardian = new TypeGuard();\n            if (this.typeGuardian.isAxiosResponse(this.serverResponse)) {\n                return this.serverResponse;\n            }\n            else {\n                throw new Error(\"This server response is not valid !\");\n            }\n        }\n        catch (error) {\n            console.error(error.toJSON());\n            return Promise.reject<AxiosResponse>(error);\n        }\n    }\n\n    public async displayStudentbyID(userID: number): Promise<AxiosResponse> {\n        this.axiosInstanceGetter = new AxiosInstanceGet();\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance();\n        try {\n            this.serverResponse = await this.axiosInstance.get(\n                `/getStudent/${userID}`\n            );\n            this.typeGuardian = new TypeGuard();\n            if (this.typeGuardian.isAxiosResponse(this.serverResponse)) {\n                return this.serverResponse;\n            }\n            else {\n                throw new Error(\"This server response is not valid !\");\n            }\n        }\n        catch (error) {\n            console.error(error.toJSON());\n            return Promise.reject<AxiosResponse>(error);\n        }\n    }\n\n    public async viewStudent(userID: number): Promise<AxiosResponse> {\n        this.axiosInstanceGetter = new AxiosInstanceGet();\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance();\n        try {\n            this.serverResponse = await this.axiosInstance.get(\n                `/users`\n            );\n            this.typeGuardian = new TypeGuard();\n            if (this.typeGuardian.isAxiosResponse(this.serverResponse)) {\n                return this.serverResponse;\n            }\n            else {\n                throw new Error(\"This server response is not valid !\");\n            }\n        }\n        catch (error) {\n            console.error(error.toJSON());\n            return Promise.reject<AxiosResponse>(error);\n        }\n    }\n\n    public updateStudents(\n        user: User, userID: number\n    ): Promise<AxiosResponse<unknown>> {\n        try {\n            return axios.put(`http://localhost:8080/editInfo/${userID}`, user);\n        }\n        catch (error) {\n            console.error(error.toJSON());\n            return Promise.reject<AxiosResponse>(error);\n        }\n    }\n\n    public async displayTeacher(userID: number): Promise<AxiosResponse> {\n        this.axiosInstanceGetter = new AxiosInstanceGet();\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance();\n        try {\n            this.serverResponse = await this.axiosInstance.get(\n                `/getUsers/${userID}`\n            );\n            this.typeGuardian = new TypeGuard();\n            if (this.typeGuardian.isAxiosResponse(this.serverResponse)) {\n                return this.serverResponse;\n            }\n            else {\n                throw new Error(\"This server response is not valid !\");\n            }\n        }\n        catch (error) {\n            console.error(error.toJSON());\n            return Promise.reject<AxiosResponse>(error);\n        }\n    }\n\n    public updateTeacher(\n        user: User, userID: number\n    ): Promise<AxiosResponse<unknown>> {\n        try {\n            return axios.put(`http://localhost:8080/editInfo/${userID}`, user);\n        }\n        catch (error) {\n            console.error(error.toJSON());\n            return Promise.reject<AxiosResponse>(error);\n        }\n    }\n\n\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\User.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\RegisterForm.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\RegisterFormAPI.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\CourseAPI.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\CourseTypeAPI.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\CourseLevelAPI.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\Course.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\CourseType.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\CourseLevel.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\EditTeacherInfo.tsx",["199","200","201"],"import React, {\n    ChangeEvent, FormEvent, ReactElement, useEffect, useState\n} from 'react';\nimport {\n    Button, Col, Container, Form, Row\n} from 'react-bootstrap';\nimport { UserAPI } from '../common/service/UserAPI';\nimport { useParams } from 'react-router-dom';\nimport { User, UserIndexSignature } from '../model/User';\n\nexport function EditTeacherInfo (): ReactElement {\n    let [user, setUser] = useState<User>(new User());\n    let updatedUser: User | undefined;\n    let inputField:\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\n    let userAPI: UserAPI | undefined;\n    let param: any = useParams();\n    let [teacher, setTeacher] = useState<User>(new User());\n    \n    useEffect (() => {\n        userAPI = new UserAPI();\n        userAPI.displayTeacher(param.teacherID).then(\n            (res) => {\n                setUser(res.data);\n            }\n    );\n    }, []);\n\n    \n    function handleUserChange (\n        event: ChangeEvent<\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\n        >\n    ){\n        updatedUser = new User(user);\n        inputField = event.target;\n        updatedUser[\n            inputField.name as keyof UserIndexSignature\n        ] = inputField.value;\n        setUser(updatedUser);\n    }\n\n    function updateTeacher (event: FormEvent<HTMLFormElement>, userID: number) {\n        event.preventDefault();\n        userAPI = new UserAPI();\n        userAPI.update(user, userID);\n        console.log(userID);\n    }\n \n    console.log(param.teacherID);\n    return (\n        <Container fluid={true} id=\"PageContentContainer\">\n            <Container fluid={true} id=\"PageHeaderContainer\">\n                <header>\n                </header>\n                <nav>\n                </nav>\n            </Container>\n            <main>\n                <Container id=\"PageBodyContainer\">\n                    <h1>{param.teacherID}</h1>\n                    <Row>\n                        <Col>\n                            <Form\n                                noValidate={false}\n                                onSubmit={(event) => {\n                                    updateTeacher(event, param.teacherID);\n                                }}\n                            >\n                                <Form.Group>\n                                    <Form.Label>\n                                        User Name:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"userName\"\n                                        id=\"userName\"\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\n                                        required={true}\n                                        spellCheck={false}\n                                        value = {user.userName}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        First Name:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"firstName\"\n                                        id=\"firstName\"\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\n                                        value={user.firstName}\n                                        required={true}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Middle Name:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"middleName\"\n                                        id=\"middleName\"\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\n                                        value={user.middleName}\n                                        required={true}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Last Name:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"lastName\"\n                                        id=\"lastName\"\n                                        pattern=\"^[a-z0-9_-]{1,15}$\"\n                                        value={user.lastName}\n                                        required={true}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Email:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"email\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"email\"\n                                        id=\"email\"\n                                        value={user.email}\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        DOB:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"date\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"dob\"\n                                        id=\"dob\"\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Phone:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"phoneNumber\"\n                                        id=\"phoneNumber\"\n                                        value={user.phoneNumber}\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Gender\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"gender\"\n                                        id=\"gender\"\n                                        value={user.gender}\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Password:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"password\"\n                                        autoComplete=\"off\"\n                                        autoFocus={false}\n                                        name=\"password\"\n                                        id=\"password\"\n                                        placeholder=\"Your new password\"\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Account Status\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"accountStatus\"\n                                        id=\"accountStatus\"\n                                        value={user.accountStatus}\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Button\n                                    variant=\"success\"\n                                    type=\"submit\"\n                                    block = {true}\n                                >\n                                    Save\n                                </Button>\n                            </Form>\n                        </Col>\n                    </Row>\n                </Container>\n            </main>\n            <footer>\n            </footer>\n        </Container>\n    );\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx",["202","203","204","205","206","207","208","209","210","211","212","213","214"],"/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, {\r\n    ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, FormControl, Nav, Navbar, Row, Table\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { Link, useParams, useRouteMatch } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\nimport './ViewProfilePage.css';\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction renderUserTable(\r\n    user: User\r\n    , index: number\r\n): ReactElement {\r\n    return (\r\n        <tr key={user.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {user.firstName}\r\n            </td>\r\n            <td>\r\n                {user.middleName}\r\n            </td>\r\n            <td>\r\n                {user.lastName}\r\n            </td>\r\n            <td>\r\n                {user.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {user.dob}\r\n            </td>\r\n            <td>\r\n                {user.email}\r\n            </td>\r\n            <td>\r\n                {user.gender}\r\n            </td>\r\n            <td>\r\n                {user.job}\r\n            </td>\r\n            <td>\r\n                {user.selfDescription}\r\n            </td>\r\n            <td>\r\n                {user.accountStatus}\r\n            </td>\r\n            <td>\r\n                {user.dateCreated}\r\n            </td>\r\n            <td>\r\n                {user.lastLogin}\r\n            </td>\r\n            <td>\r\n                {user.lastModified}\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\nexport function ViewProfilePage(): ReactElement {\r\n\r\n    let [user, getUser] = useState<User>(new User());\r\n    let userID: number;\r\n    let showUser: User | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let match = useRouteMatch();\r\n    let param: any = useParams();\r\n    let studentID: number;\r\n    let [student, setStudent] = useState<User[]>([]);\r\n\r\n    useEffect(() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.viewStudent(param.studentID).then(\r\n            (res) => {\r\n                setStudent(res.data);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    console.log(param.studentID);\r\n\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <Row className=\"bg-white\">\r\n                        <Col>\r\n                            <Table responsive=\"md\" hover={true}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            #\r\n                                            </th>\r\n                                        <th>\r\n                                            First Name\r\n                                            </th>\r\n                                        <th>\r\n                                            Middle Name\r\n                                            </th>\r\n                                        <th>\r\n                                            Last Name\r\n                                            </th>\r\n                                        <th>\r\n                                            Phone Number\r\n                                            </th>\r\n                                        <th>\r\n                                            Date of birth\r\n                                            </th>\r\n                                        <th>\r\n                                            Email\r\n                                            </th>\r\n                                        <th>\r\n                                            Gender\r\n                                            </th>\r\n                                        <th>\r\n                                            Job\r\n                                            </th>\r\n                                        <th>\r\n                                            Description\r\n                                            </th>\r\n                                        <th>\r\n                                            Status\r\n                                            </th>\r\n                                        <th>\r\n                                            Date Created\r\n                                            </th>\r\n                                        <th>\r\n                                            Last Login\r\n                                            </th>\r\n                                        <th>\r\n                                            Last Modifiled\r\n                                            </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {student.map(\r\n                                        (\r\n                                            user\r\n                                            , index\r\n                                        ) => renderUserTable(\r\n                                            user\r\n                                            , index\r\n                                        )\r\n                                    )}\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\ManageTeacherPage.tsx",[],["215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231"],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\DetailPage.tsx",["232","233","234","235","236","237","238","239","240","241","242","243","244","245"],{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","replacedBy":"249"},{"ruleId":"250","replacedBy":"251"},{"ruleId":"252","replacedBy":"253"},{"ruleId":"254","replacedBy":"255"},{"ruleId":"256","replacedBy":"257"},{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","replacedBy":"261"},{"ruleId":"262","replacedBy":"263"},{"ruleId":"264","replacedBy":"265"},{"ruleId":"266","replacedBy":"267"},{"ruleId":"268","replacedBy":"269"},{"ruleId":"270","replacedBy":"271"},{"ruleId":"272","replacedBy":"273"},{"ruleId":"274","replacedBy":"275"},{"ruleId":"276","replacedBy":"277"},{"ruleId":"278","replacedBy":"279"},{"ruleId":"280","severity":1,"message":"281","line":33,"column":10,"nodeType":"282","messageId":"283","endLine":33,"endColumn":27},{"ruleId":"284","severity":1,"message":"285","line":17,"column":16,"nodeType":"286","messageId":"287","endLine":17,"endColumn":19,"suggestions":"288"},{"ruleId":"280","severity":1,"message":"289","line":18,"column":10,"nodeType":"282","messageId":"283","endLine":18,"endColumn":17},{"ruleId":"280","severity":1,"message":"290","line":18,"column":19,"nodeType":"282","messageId":"283","endLine":18,"endColumn":29},{"ruleId":"280","severity":1,"message":"291","line":3,"column":5,"nodeType":"282","messageId":"283","endLine":3,"endColumn":16},{"ruleId":"280","severity":1,"message":"292","line":4,"column":7,"nodeType":"282","messageId":"283","endLine":4,"endColumn":15},{"ruleId":"280","severity":1,"message":"293","line":4,"column":17,"nodeType":"282","messageId":"283","endLine":4,"endColumn":26},{"ruleId":"280","severity":1,"message":"294","line":6,"column":7,"nodeType":"282","messageId":"283","endLine":6,"endColumn":21},{"ruleId":"280","severity":1,"message":"295","line":6,"column":23,"nodeType":"282","messageId":"283","endLine":6,"endColumn":31},{"ruleId":"280","severity":1,"message":"296","line":9,"column":5,"nodeType":"282","messageId":"283","endLine":9,"endColumn":11},{"ruleId":"280","severity":1,"message":"297","line":9,"column":30,"nodeType":"282","messageId":"283","endLine":9,"endColumn":34},{"ruleId":"280","severity":1,"message":"298","line":12,"column":10,"nodeType":"282","messageId":"283","endLine":12,"endColumn":19},{"ruleId":"280","severity":1,"message":"299","line":14,"column":10,"nodeType":"282","messageId":"283","endLine":14,"endColumn":17},{"ruleId":"280","severity":1,"message":"300","line":15,"column":10,"nodeType":"282","messageId":"283","endLine":15,"endColumn":22},{"ruleId":"280","severity":1,"message":"301","line":16,"column":10,"nodeType":"282","messageId":"283","endLine":16,"endColumn":18},{"ruleId":"280","severity":1,"message":"302","line":16,"column":20,"nodeType":"282","messageId":"283","endLine":16,"endColumn":27},{"ruleId":"280","severity":1,"message":"303","line":17,"column":10,"nodeType":"282","messageId":"283","endLine":17,"endColumn":20},{"ruleId":"280","severity":1,"message":"304","line":17,"column":22,"nodeType":"282","messageId":"283","endLine":17,"endColumn":33},{"ruleId":"280","severity":1,"message":"305","line":18,"column":10,"nodeType":"282","messageId":"283","endLine":18,"endColumn":23},{"ruleId":"280","severity":1,"message":"306","line":125,"column":22,"nodeType":"282","messageId":"283","endLine":125,"endColumn":35},{"ruleId":"280","severity":1,"message":"307","line":126,"column":20,"nodeType":"282","messageId":"283","endLine":126,"endColumn":31},{"ruleId":"280","severity":1,"message":"299","line":27,"column":10,"nodeType":"282","messageId":"283","endLine":27,"endColumn":17},{"ruleId":"280","severity":1,"message":"308","line":31,"column":10,"nodeType":"282","messageId":"283","endLine":31,"endColumn":14},{"ruleId":"280","severity":1,"message":"309","line":168,"column":10,"nodeType":"282","messageId":"283","endLine":168,"endColumn":24},{"ruleId":"280","severity":1,"message":"310","line":267,"column":30,"nodeType":"282","messageId":"283","endLine":267,"endColumn":44},{"ruleId":"284","severity":1,"message":"285","line":17,"column":16,"nodeType":"286","messageId":"287","endLine":17,"endColumn":19,"suggestions":"311"},{"ruleId":"280","severity":1,"message":"312","line":18,"column":10,"nodeType":"282","messageId":"283","endLine":18,"endColumn":17},{"ruleId":"280","severity":1,"message":"313","line":18,"column":19,"nodeType":"282","messageId":"283","endLine":18,"endColumn":29},{"ruleId":"280","severity":1,"message":"296","line":6,"column":5,"nodeType":"282","messageId":"283","endLine":6,"endColumn":11},{"ruleId":"280","severity":1,"message":"297","line":6,"column":29,"nodeType":"282","messageId":"283","endLine":6,"endColumn":33},{"ruleId":"280","severity":1,"message":"314","line":6,"column":35,"nodeType":"282","messageId":"283","endLine":6,"endColumn":46},{"ruleId":"280","severity":1,"message":"315","line":6,"column":48,"nodeType":"282","messageId":"283","endLine":6,"endColumn":51},{"ruleId":"280","severity":1,"message":"316","line":6,"column":53,"nodeType":"282","messageId":"283","endLine":6,"endColumn":59},{"ruleId":"280","severity":1,"message":"317","line":9,"column":10,"nodeType":"282","messageId":"283","endLine":9,"endColumn":14},{"ruleId":"280","severity":1,"message":"318","line":10,"column":16,"nodeType":"282","messageId":"283","endLine":10,"endColumn":34},{"ruleId":"280","severity":1,"message":"319","line":67,"column":10,"nodeType":"282","messageId":"283","endLine":67,"endColumn":14},{"ruleId":"280","severity":1,"message":"320","line":67,"column":16,"nodeType":"282","messageId":"283","endLine":67,"endColumn":23},{"ruleId":"280","severity":1,"message":"310","line":68,"column":9,"nodeType":"282","messageId":"283","endLine":68,"endColumn":23},{"ruleId":"280","severity":1,"message":"321","line":69,"column":9,"nodeType":"282","messageId":"283","endLine":69,"endColumn":35},{"ruleId":"280","severity":1,"message":"322","line":71,"column":9,"nodeType":"282","messageId":"283","endLine":71,"endColumn":14},{"ruleId":"280","severity":1,"message":"323","line":73,"column":9,"nodeType":"282","messageId":"283","endLine":73,"endColumn":26},{"ruleId":"246","replacedBy":"324"},{"ruleId":"248","replacedBy":"325"},{"ruleId":"250","replacedBy":"326"},{"ruleId":"252","replacedBy":"327"},{"ruleId":"254","replacedBy":"328"},{"ruleId":"256","replacedBy":"329"},{"ruleId":"258","replacedBy":"330"},{"ruleId":"260","replacedBy":"331"},{"ruleId":"262","replacedBy":"332"},{"ruleId":"264","replacedBy":"333"},{"ruleId":"266","replacedBy":"334"},{"ruleId":"268","replacedBy":"335"},{"ruleId":"270","replacedBy":"336"},{"ruleId":"272","replacedBy":"337"},{"ruleId":"274","replacedBy":"338"},{"ruleId":"276","replacedBy":"339"},{"ruleId":"278","replacedBy":"340"},{"ruleId":"280","severity":1,"message":"296","line":6,"column":5,"nodeType":"282","messageId":"283","endLine":6,"endColumn":11},{"ruleId":"280","severity":1,"message":"297","line":6,"column":29,"nodeType":"282","messageId":"283","endLine":6,"endColumn":33},{"ruleId":"280","severity":1,"message":"314","line":6,"column":35,"nodeType":"282","messageId":"283","endLine":6,"endColumn":46},{"ruleId":"280","severity":1,"message":"315","line":6,"column":48,"nodeType":"282","messageId":"283","endLine":6,"endColumn":51},{"ruleId":"280","severity":1,"message":"316","line":6,"column":53,"nodeType":"282","messageId":"283","endLine":6,"endColumn":59},{"ruleId":"280","severity":1,"message":"341","line":6,"column":66,"nodeType":"282","messageId":"283","endLine":6,"endColumn":71},{"ruleId":"280","severity":1,"message":"317","line":9,"column":10,"nodeType":"282","messageId":"283","endLine":9,"endColumn":14},{"ruleId":"280","severity":1,"message":"318","line":10,"column":16,"nodeType":"282","messageId":"283","endLine":10,"endColumn":34},{"ruleId":"280","severity":1,"message":"319","line":69,"column":10,"nodeType":"282","messageId":"283","endLine":69,"endColumn":14},{"ruleId":"280","severity":1,"message":"320","line":69,"column":16,"nodeType":"282","messageId":"283","endLine":69,"endColumn":23},{"ruleId":"280","severity":1,"message":"310","line":70,"column":9,"nodeType":"282","messageId":"283","endLine":70,"endColumn":23},{"ruleId":"280","severity":1,"message":"321","line":71,"column":9,"nodeType":"282","messageId":"283","endLine":71,"endColumn":35},{"ruleId":"280","severity":1,"message":"322","line":73,"column":9,"nodeType":"282","messageId":"283","endLine":73,"endColumn":14},{"ruleId":"280","severity":1,"message":"323","line":75,"column":9,"nodeType":"282","messageId":"283","endLine":75,"endColumn":26},"callback-return",[],"global-require",[],"handle-callback-err",[],"id-blacklist",["342"],"lines-around-directive",["343"],"no-buffer-constructor",[],"no-catch-shadow",["344"],"no-mixed-requires",[],"no-native-reassign",["345"],"no-negated-in-lhs",["346"],"no-new-require",[],"no-path-concat",[],"no-process-env",[],"no-process-exit",[],"no-restricted-modules",[],"no-sync",[],"prefer-reflect",[],"@typescript-eslint/no-unused-vars","'ManageTeacherPage' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["347","348"],"'student' is assigned a value but never used.","'setStudent' is assigned a value but never used.","'ChangeEvent' is defined but never used.","'Dispatch' is defined but never used.","'FormEvent' is defined but never used.","'SetStateAction' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'TypeGuard' is defined but never used.","'UserAPI' is defined but never used.","'LoggedInUser' is defined but never used.","'Location' is defined but never used.","'History' is defined but never used.","'useHistory' is defined but never used.","'useLocation' is defined but never used.","'LocationState' is defined but never used.","'setPageNumber' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","'User' is defined but never used.","'totalPageCount' is assigned a value but never used.","'userID' is defined but never used.",["349","350"],"'teacher' is assigned a value but never used.","'setTeacher' is assigned a value but never used.","'FormControl' is defined but never used.","'Nav' is defined but never used.","'Navbar' is defined but never used.","'Link' is defined but never used.","'UserIndexSignature' is defined but never used.","'user' is assigned a value but never used.","'getUser' is assigned a value but never used.","'showUser' is defined but never used.","'match' is assigned a value but never used.","'studentID' is defined but never used.",[],[],[],["342"],["343"],[],["344"],[],["345"],["346"],[],[],[],[],[],[],[],"'Table' is defined but never used.","id-denylist","padding-line-between-statements","no-shadow","no-global-assign","no-unsafe-negation",{"messageId":"351","fix":"352","desc":"353"},{"messageId":"354","fix":"355","desc":"356"},{"messageId":"351","fix":"357","desc":"353"},{"messageId":"354","fix":"358","desc":"356"},"suggestUnknown",{"range":"359","text":"360"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"359","text":"361"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"362","text":"360"},{"range":"362","text":"361"},[622,625],"unknown","never",[622,625]]
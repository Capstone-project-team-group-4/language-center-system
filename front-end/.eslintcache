[{"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\index.tsx":"1","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\reportWebVitals.ts":"2","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\App.tsx":"3","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx":"4","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\HomePage.tsx":"5","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx":"6","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx":"7","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\LogInPage.tsx":"8","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx":"9","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx":"10","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx":"11","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx":"12","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageCoursePage.tsx":"13","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx":"14","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx":"15","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx":"16","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx":"17","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx":"18","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx":"19","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx":"20","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\User.tsx":"21","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RegisterFormAPI.tsx":"22","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\RegisterForm.tsx":"23","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx":"24","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseTypeAPI.tsx":"25","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseLevelAPI.tsx":"26","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseAPI.tsx":"27","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\Course.tsx":"28","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx":"29","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx":"30","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\CourseType.tsx":"31","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\CourseLevel.tsx":"32","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageLessonPage.tsx":"33","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\Lesson.tsx":"34","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\LessonAPI.tsx":"35"},{"size":641,"mtime":1614439037000,"results":"36","hashOfConfig":"37"},{"size":446,"mtime":1615400528577,"results":"38","hashOfConfig":"37"},{"size":7741,"mtime":1615650929768,"results":"39","hashOfConfig":"37"},{"size":543,"mtime":1615400528512,"results":"40","hashOfConfig":"37"},{"size":3794,"mtime":1615400528518,"results":"41","hashOfConfig":"37"},{"size":2565,"mtime":1615400528551,"results":"42","hashOfConfig":"37"},{"size":11967,"mtime":1615487029107,"results":"43","hashOfConfig":"37"},{"size":8849,"mtime":1615487029108,"results":"44","hashOfConfig":"37"},{"size":16309,"mtime":1615487029115,"results":"45","hashOfConfig":"37"},{"size":5042,"mtime":1615487029116,"results":"46","hashOfConfig":"37"},{"size":20741,"mtime":1615487029118,"results":"47","hashOfConfig":"37"},{"size":13901,"mtime":1615487029119,"results":"48","hashOfConfig":"37"},{"size":46942,"mtime":1615978900580,"results":"49","hashOfConfig":"37"},{"size":1278,"mtime":1615487029096,"results":"50","hashOfConfig":"37"},{"size":3948,"mtime":1615632179934,"results":"51","hashOfConfig":"37"},{"size":5163,"mtime":1615400528500,"results":"52","hashOfConfig":"37"},{"size":3786,"mtime":1615400528499,"results":"53","hashOfConfig":"37"},{"size":1414,"mtime":1615400528498,"results":"54","hashOfConfig":"37"},{"size":6371,"mtime":1615487029099,"results":"55","hashOfConfig":"37"},{"size":9240,"mtime":1615487029099,"results":"56","hashOfConfig":"37"},{"size":2054,"mtime":1615487029104,"results":"57","hashOfConfig":"37"},{"size":4663,"mtime":1615487029097,"results":"58","hashOfConfig":"37"},{"size":1028,"mtime":1615487029103,"results":"59","hashOfConfig":"37"},{"size":1853,"mtime":1615487029098,"results":"60","hashOfConfig":"37"},{"size":1937,"mtime":1615487029095,"results":"61","hashOfConfig":"37"},{"size":2035,"mtime":1615487029094,"results":"62","hashOfConfig":"37"},{"size":4379,"mtime":1615487029094,"results":"63","hashOfConfig":"37"},{"size":1403,"mtime":1615487029100,"results":"64","hashOfConfig":"37"},{"size":1882,"mtime":1615487029096,"results":"65","hashOfConfig":"37"},{"size":553,"mtime":1615400528501,"results":"66","hashOfConfig":"37"},{"size":211,"mtime":1615487029101,"results":"67","hashOfConfig":"37"},{"size":381,"mtime":1615487029101,"results":"68","hashOfConfig":"37"},{"size":36103,"mtime":1615979389378,"results":"69","hashOfConfig":"37"},{"size":1361,"mtime":1615539502910,"results":"70","hashOfConfig":"37"},{"size":5060,"mtime":1615977095683,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1ii22s2",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\index.tsx",[],["147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163"],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\reportWebVitals.ts",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\App.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\HomePage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx",["164","165","166","167","168","169","170","171","172","173","174","175","176","177","178"],"// Import package members section:\r\nimport React, { \r\n    ChangeEvent\r\n    , Dispatch, FormEvent\r\n    , ReactElement\r\n    , SetStateAction, useState \r\n} from 'react';\r\nimport { \r\n    Button, Card, Container, Form, ListGroup, Row \r\n} from 'react-bootstrap';\r\nimport './SelectRolePage.css';\r\nimport { TypeGuard } from '../common/service/TypeGuard';\r\nimport { DialogControl } from '../common/component/ModalDialog';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { LoggedInUser } from '../model/LoggedInUser';\r\nimport { Location, History } from \"../../node_modules/@types/history\";\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { LocationState } from '../common/component/ProtectedRoute';\r\n\r\ninterface SelectRolePageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function SelectRolePage (props: SelectRolePageProps): ReactElement {\r\n\r\n    // Variables declaration:\r\n    \r\n    return (\r\n        <Container \r\n            fluid = {true} \r\n            id = \"SelectRolePageContentContainer\" \r\n            className = \"vh-100\"\r\n        >   \r\n            {props.modalDialog}\r\n            <header>\r\n            </header>\r\n            <nav>\r\n            </nav>\r\n            <main className = \"h-100\">\r\n                <Container \r\n                    fluid = {true} \r\n                    className = \"h-100\"\r\n                >\r\n                    <Row className = {\r\n                        `h-100 \r\n                        justify-content-center \r\n                        align-items-center`\r\n                    }>\r\n                        <Card id = \"SelectRoleCard\">\r\n                            <Card.Header className = \"text-center\">\r\n                                Choose a role\r\n                            </Card.Header>\r\n                            <ListGroup variant = \"flush\">\r\n                                <ListGroup.Item>\r\n                                    Cras justo odio\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    Dapibus ac facilisis in\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    Vestibulum at eros\r\n                                </ListGroup.Item>\r\n                            </ListGroup>\r\n                        </Card>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx",["179","180","181"],"import React, {\r\n    ChangeEvent, FormEvent, ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, Row\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { useParams } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\n\r\nexport function EditStudentInfo (): ReactElement {\r\n    let [user, setUser] = useState<User>(new User());\r\n    let updatedUser: User | undefined;\r\n    let inputField:\r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let param: any = useParams();\r\n    let [student, setStudent] = useState<User>(new User());\r\n    \r\n    useEffect (() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.displayStudent(param.studentID).then(\r\n            (res) => {\r\n                setUser(res.data);\r\n                // console.log(student.userName);\r\n            }\r\n    );\r\n    }, []);\r\n\r\n    \r\n    function handleUserChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ){\r\n        updatedUser = new User(user);\r\n        inputField = event.target;\r\n        updatedUser[\r\n            inputField.name as keyof UserIndexSignature\r\n        ] = inputField.value;\r\n        setUser(updatedUser);\r\n    }\r\n\r\n    function updateStudent (event: FormEvent<HTMLFormElement>, userID: number) {\r\n        event.preventDefault();\r\n        userAPI = new UserAPI();\r\n        userAPI.update(user, userID);\r\n        console.log(userID);\r\n    }\r\n \r\n    console.log(param.studentID);\r\n    // console.log(student.userName);\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <h1>{param.studentID}</h1>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form\r\n                                noValidate={false}\r\n                                onSubmit={(event) => {\r\n                                    updateStudent(event, param.studentID);\r\n                                }}\r\n                            >\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        User Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"userName\"\r\n                                        id=\"userName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        First Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"firstName\"\r\n                                        id=\"firstName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        value={user.firstName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Last Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"lastName\"\r\n                                        id=\"lastName\"\r\n                                        pattern=\"^[a-z0-9_-]{1,15}$\"\r\n                                        value={user.lastName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Email:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"email\"\r\n                                        id=\"email\"\r\n                                        value={user.email}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        DOB:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"dob\"\r\n                                        id=\"dob\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Phone:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"phoneNumber\"\r\n                                        id=\"phoneNumber\"\r\n                                        value={user.phoneNumber}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Gender\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"gender\"\r\n                                        id=\"gender\"\r\n                                        value={user.gender}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Job:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"job\"\r\n                                        id=\"job\"\r\n                                        value={user.job}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Password:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        autoComplete=\"off\"\r\n                                        autoFocus={false}\r\n                                        name=\"password\"\r\n                                        id=\"password\"\r\n                                        placeholder=\"Your new password\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Account Status\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"accountStatus\"\r\n                                        id=\"accountStatus\"\r\n                                        value={user.accountStatus}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button\r\n                                    variant=\"success\"\r\n                                    type=\"submit\"\r\n                                    block = {true}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\LogInPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx",["182","183"],"// Import package members section:\r\nimport React, { \r\n    ChangeEvent\r\n    , MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { \r\n    Breadcrumb\r\n    , Button\r\n    , Col\r\n    , Container\r\n    , Form\r\n    , Row\r\n    , Table \r\n} from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { RegisterFormAPI } from \"../../common/service/RegisterFormAPI\";\r\nimport { RoleAPI } from \"../../common/service/RoleAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { RegisterForm } from \"../../model/RegisterForm\";\r\nimport { Role } from \"../../model/Role\";\r\n\r\nfunction renderRoleDropdownList (role: Role): ReactElement {\r\n    let roleNameWithoutPrefix: string | undefined;\r\n\r\n    roleNameWithoutPrefix = role.roleName.slice (5);\r\n    return (\r\n        <option key = {role.roleID}>\r\n            {roleNameWithoutPrefix}\r\n        </option>\r\n    );\r\n}\r\n\r\nfunction renderRoleListSection (role: Role): ReactElement {\r\n    let roleNameWithoutPrefix: string | undefined;\r\n    \r\n    roleNameWithoutPrefix = role.roleName.slice (5);\r\n    return (\r\n        <span key = {role.roleID}>\r\n            {roleNameWithoutPrefix},&nbsp;\r\n        </span>\r\n    );\r\n}\r\n\r\nfunction renderRegisterFormTable (\r\n        registerForm: RegisterForm\r\n        , index: number\r\n        , handleAcceptRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void> \r\n        , handleRejectRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n): ReactElement {\r\n    return (\r\n        <tr key = {registerForm.formID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {`${\r\n                    registerForm.firstName\r\n                } ${\r\n                    registerForm.middleName\r\n                } ${\r\n                    registerForm.lastName\r\n                }`}\r\n            </td>\r\n            <td>\r\n                {registerForm.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {registerForm.email}\r\n            </td>\r\n            <td>\r\n                {registerForm.userName}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {registerForm.formID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            handleAcceptRequest (event).catch (\r\n                                    (error: unknown) => {\r\n                                        console.error (error);\r\n                                    }\r\n                            );\r\n                        }\r\n                    }\r\n                >\r\n                    Accept\r\n                </Button>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {registerForm.formID}\r\n                    onClick = {handleRejectRequest}\r\n                >\r\n                    Reject\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface CreateAccountPageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function CreateAccountPage (\r\n    props: CreateAccountPageProps\r\n): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [registerFormHolder, setRegisterFormHolder] \r\n        = useState<RegisterForm[]> ([]);\r\n    let registerFormAPI: RegisterFormAPI;\r\n    let typeGuardian: TypeGuard;\r\n    let [pageNumber, setPageNumber] = useState<number> (0);\r\n    let [pageSize, setPageSize] = useState<number> (10);\r\n    let [roleHolder, setRoleHolder] = useState<Role[]> ([]);\r\n    let roleAPI: RoleAPI;\r\n    let [selectedRoleName, setSelectedRoleName] = useState<string> (\"\");\r\n    let [newAccountRoleList, setNewAccountRoleList] = useState<Role[]> ([]);\r\n    let i: number | undefined; \r\n    let role: Role | undefined;\r\n    let selectedRoleArray: Role[] | undefined;\r\n    let selectedRole: Role | undefined;\r\n    let updatedNewAccountRoleList: Role[] | undefined;\r\n    let updatedRoleHolder: Role[] | undefined;\r\n    let defaultRoleSelection: Role | undefined;\r\n    let button: HTMLButtonElement | undefined;\r\n    let [userID, setUserID] = useState<number> (0);\r\n    let roleNameWithoutPrefix: string | undefined;\r\n\r\n    registerFormAPI = new RegisterFormAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    roleAPI = new RoleAPI ();\r\n    \r\n    async function handleAcceptRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        if (newAccountRoleList.length > 0){\r\n            button = event.target as HTMLButtonElement;\r\n            try {\r\n                await registerFormAPI.acceptCreateAccountRequest (\r\n                        Number (button.value)\r\n                        , newAccountRoleList\r\n                );\r\n                loadRegisterFormTable ();\r\n                return Promise.resolve<undefined> (undefined);\r\n            }\r\n            catch (apiError: unknown){\r\n                if (typeGuardian.isAxiosError (apiError)){\r\n                    if (typeof apiError.code === \"string\"){\r\n                        props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                        );\r\n                    }\r\n                    else {\r\n                        props.dialogController.setDialogTitle (apiError.name);\r\n                    }\r\n                    props.dialogController.setDialogBody (apiError.message);\r\n                    props.dialogController.setDialogType (\"error\");\r\n                    props.dialogController.setShowDialog (true);\r\n                }\r\n                return Promise.reject (apiError);\r\n            }\r\n        }\r\n        else {\r\n            props.dialogController.setDialogTitle (\"Error !\");\r\n            props.dialogController.setDialogBody (\r\n                    \"Please add at least one role.\"\r\n            );\r\n            props.dialogController.setDialogType (\"error\");\r\n            props.dialogController.setShowDialog (true);\r\n            return Promise.reject (\r\n                    new Error (\"Please add at least one role !\")\r\n            );\r\n        }\r\n    }\r\n\r\n    function handleRejectRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setUserID (Number (button.value));\r\n        props.dialogController.setDialogTitle (\"Confirm Rejection\");\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to reject this create account request ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function executeRequestRejection (): Promise<void> {\r\n        try {\r\n            await registerFormAPI.rejectCreateAccountRequest (\r\n                    userID\r\n            );\r\n            loadRegisterFormTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    function handleAddRole (){\r\n        for (i = 0; i < roleHolder.length; i++){\r\n            role = roleHolder[i];\r\n            if (role.roleName === `ROLE_${selectedRoleName}`){\r\n                updatedRoleHolder = roleHolder.slice ();\r\n                selectedRoleArray = updatedRoleHolder.splice (i, 1);\r\n                setRoleHolder (updatedRoleHolder);\r\n                if (updatedRoleHolder.length > 0){\r\n                    defaultRoleSelection = updatedRoleHolder[0];\r\n                    roleNameWithoutPrefix \r\n                        = defaultRoleSelection.roleName.slice (5); \r\n                    setSelectedRoleName (roleNameWithoutPrefix);\r\n                }\r\n                selectedRole = selectedRoleArray[0];\r\n                updatedNewAccountRoleList = newAccountRoleList.slice ();\r\n                updatedNewAccountRoleList.push (selectedRole);\r\n                setNewAccountRoleList (updatedNewAccountRoleList);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleReset (){\r\n        loadRoleDropdownList ().catch (\r\n                (error: unknown) => {\r\n                    console.error (error);\r\n                }\r\n        );\r\n        updatedNewAccountRoleList = new Array<Role> ();\r\n        setNewAccountRoleList (updatedNewAccountRoleList);\r\n    }\r\n\r\n    function handleSelectedRoleChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ): void {\r\n        setSelectedRoleName (event.target.value);\r\n    }\r\n\r\n    async function loadRoleDropdownList (): Promise<void> {\r\n        try {\r\n            updatedRoleHolder = await roleAPI.getAllRole (); \r\n            setRoleHolder (updatedRoleHolder);\r\n            defaultRoleSelection = updatedRoleHolder[0];\r\n            roleNameWithoutPrefix = defaultRoleSelection.roleName.slice (5);\r\n            setSelectedRoleName (roleNameWithoutPrefix);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadRegisterFormTable (): Promise<void> {\r\n        try {\r\n            setRegisterFormHolder (\r\n                    await registerFormAPI.getAllCreateAccountRequest (\r\n                            pageNumber\r\n                            , pageSize\r\n                    )\r\n            );\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    useEffect (\r\n        (): void => {\r\n            loadRoleDropdownList ().catch (\r\n                    (error: unknown) => {\r\n                        console.error (error);\r\n                    }\r\n            );\r\n            loadRegisterFormTable ().catch (\r\n                    (error: unknown) => {\r\n                        console.error (error);\r\n                    }\r\n            );\r\n        }\r\n        , []\r\n    );\r\n\r\n    useEffect (\r\n        (): void => {\r\n            if (props.dialogController.dialogIsConfirmed === true){\r\n                executeRequestRejection ().catch (\r\n                        (error: unknown) => {\r\n                            console.error (error);\r\n                        }\r\n                );\r\n                props.dialogController.setDialogIsConfirmed (false); \r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/\"}}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/admin-console\"}}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Create Account Requests\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1>\r\n                                Create Account Requests\r\n                            </h1>\r\n                            <hr/>\r\n                            <Form>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\"~\"} Add role \r\n                                                for the new account:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        <Col xs = \"auto\" className = \"mr-2\">\r\n                                            <Form.Control \r\n                                                as = \"select\" \r\n                                                value = {selectedRoleName}\r\n                                                onChange = {\r\n                                                    (event) => {\r\n                                            // eslint-disable-next-line max-len\r\n                                                        handleSelectedRoleChange (\r\n                                                            event\r\n                                                        );\r\n                                                    } \r\n                                                }\r\n                                            >\r\n                                                {roleHolder.map (\r\n                                                    (\r\n                                                            role\r\n                                            // eslint-disable-next-line max-len\r\n                                                    ) => renderRoleDropdownList (\r\n                                                            role\r\n                                                    )  \r\n                                                )}\r\n                                            </Form.Control>\r\n                                        </Col>\r\n                                        <Button \r\n                                            variant = \"success\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleAddRole ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Add role\r\n                                        </Button>\r\n                                        <Button \r\n                                            variant = \"primary\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleReset ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Reset\r\n                                        </Button>\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\">\"} The accepted account \r\n                                                will have roles:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        {newAccountRoleList.map (\r\n                                            (\r\n                                                    role\r\n                                            ) => renderRoleListSection (\r\n                                                    role\r\n                                            )\r\n                                        )}\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Table responsive = \"md\" hover = {true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                Full Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Phone Number\r\n                                            </th>\r\n                                            <th>\r\n                                                Email\r\n                                            </th>\r\n                                            <th>\r\n                                                User Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Actions\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {registerFormHolder.map (\r\n                                            (\r\n                                                    registerForm\r\n                                                    , index\r\n                                            ) => renderRegisterFormTable (\r\n                                                    registerForm\r\n                                                    , index\r\n                                                    , handleAcceptRequest\r\n                                                    , handleRejectRequest\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageCoursePage.tsx",["184","185","186"],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\User.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RegisterFormAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\RegisterForm.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseTypeAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseLevelAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\Course.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\CourseType.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\CourseLevel.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageLessonPage.tsx",["187"],"import React, {\r\n    ChangeEvent, FormEvent, MouseEvent,\r\n    ReactElement, useEffect, useState\r\n} from \"react\";\r\nimport { Breadcrumb, Button, Col, Container, Form, Modal, Row, Table }\r\n    from \"react-bootstrap\";\r\nimport { Lesson } from '../../model/Lesson';\r\nimport { LessonAPI } from '../../common/service/LessonAPI';\r\nimport { Link } from \"react-router-dom\";\r\nimport { DataPage } from \"../../App\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\n\r\nfunction renderLessonTable (\r\n    lesson: Lesson\r\n    , index: number\r\n    , openViewDetailsDialog: (\r\n        event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ) => void\r\n    , openEditLessonForm: (\r\n        event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ) => void\r\n    , handleDeleteLesson: (\r\n        event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ) => void\r\n): ReactElement {\r\n    return (\r\n        <tr key={lesson.lessonID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {lesson.lessonName}\r\n            </td>\r\n            <td>\r\n                {lesson.lessonType}\r\n            </td>\r\n            <td>\r\n                {lesson.duration}\r\n            </td>\r\n            <td>\r\n                <Button\r\n                    variant=\"primary\"\r\n                    type=\"button\"\r\n                    value={lesson.lessonID}\r\n                    onClick={\r\n                        (event) => {\r\n                            openViewDetailsDialog(event);\r\n                        }\r\n                    }\r\n                >\r\n                    Details\r\n            </Button>\r\n                <Button\r\n                    variant=\"success\"\r\n                    type=\"button\"\r\n                    value={lesson.lessonID}\r\n                    onClick={\r\n                        (event) => {\r\n                            openEditLessonForm(event);\r\n                        }\r\n                    }\r\n                >\r\n                    Edit\r\n            </Button>\r\n                <Button\r\n                    variant=\"danger\"\r\n                    type=\"button\"\r\n                    value={lesson.lessonID}\r\n                    onClick={\r\n                        (event) => {\r\n                            handleDeleteLesson(event);\r\n                        }\r\n                    }\r\n                >\r\n                    Delete\r\n            </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface ManageLessonPageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function ManageLessonPage (props: ManageLessonPageProps): ReactElement {\r\n    // Variables declaration:\r\n    let typeGuardian: TypeGuard;\r\n    let [showCreateLessonForm, setShowCreateLessonForm]\r\n        = useState<boolean>(false);\r\n    let htmlElement:\r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let [lesson, setLesson] = useState<Lesson>(new Lesson());\r\n    let updatedLesson: Lesson | undefined;\r\n    let lessonAPI: LessonAPI;\r\n    let i: number | undefined;\r\n    let [pageIndex] = useState<number>(0);\r\n    let [pageSize] = useState<number>(10);\r\n    let [totalPageCount, setTotalPageCount] = useState<number>(0);\r\n    let lessonDataPage: DataPage<Lesson> | undefined;\r\n    let [lessonHolder, setLessonHolder] = useState<Lesson[]>([]);\r\n    let [showViewDetailDialog, setShowViewDetailDialog]\r\n        = useState<boolean>(false);\r\n    let button: HTMLButtonElement | undefined;\r\n    let lessonID: number | undefined;\r\n    let lessonSample: Lesson | undefined;\r\n    let [formattedLastModified, setFormattedLastModified]\r\n        = useState<string>(\"\");\r\n    let rawDate: Date | undefined;\r\n    let [formattedDateCreated, setFormattedDateCreated]\r\n        = useState<string>(\"\");\r\n    let [pendingLessonID, setPendingLessonID] = useState<number>(0);\r\n    let [showEditLessonForm, setShowEditLessonForm]\r\n        = useState<boolean>(false);\r\n\r\n    lessonAPI = new LessonAPI();\r\n    typeGuardian = new TypeGuard();\r\n\r\n    function handleDeleteLesson (\r\n        event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setPendingLessonID(Number(button.value));\r\n        props.dialogController.setDialogTitle(\"Confirm Delete Lesson\");\r\n        props.dialogController.setDialogBody(\r\n            \"Are you sure you want to delete this lesson ?\"\r\n        );\r\n        props.dialogController.setDialogType(\"confirm\");\r\n        props.dialogController.setShowDialog(true);\r\n    }\r\n\r\n    async function executeLessonDeletion (): Promise<void> {\r\n        try {\r\n            await lessonAPI.deleteLesson(pendingLessonID);\r\n            loadLessonTable();\r\n            return Promise.resolve<undefined>(undefined);\r\n        }\r\n        catch (apiError: unknown) {\r\n            if (typeGuardian.isAxiosError(apiError)) {\r\n                if (typeof apiError.code === \"string\") {\r\n                    props.dialogController.setDialogTitle(\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle(apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody(apiError.message);\r\n                props.dialogController.setDialogType(\"error\");\r\n                props.dialogController.setShowDialog(true);\r\n            }\r\n            return Promise.reject(apiError);\r\n        }\r\n    }\r\n\r\n    function openViewDetailDialog (\r\n        event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        lessonID = Number(button.value);\r\n        for (i = 0; i < lessonHolder.length; i++) {\r\n            lessonSample = lessonHolder[i];\r\n            if (lessonSample.lessonID === lessonID) {\r\n                setLesson(lessonSample);\r\n                rawDate = new Date(lessonSample.lastModified);\r\n                if (rawDate.toString() === new Date(0).toString()) {\r\n                    setFormattedLastModified(\"Has not been modified yet !\");\r\n                }\r\n                else {\r\n                    setFormattedLastModified(rawDate.toLocaleString());\r\n                }\r\n                rawDate = new Date(lessonSample.dateCreated);\r\n                setFormattedDateCreated(rawDate.toLocaleString());\r\n                break;\r\n            }\r\n        }\r\n        setShowViewDetailDialog(true);\r\n    }\r\n\r\n    function closeViewDetailDialog (): void {\r\n        setShowViewDetailDialog(false);\r\n    }\r\n\r\n    function openCreateLessonForm (): void {\r\n        setLesson(new Lesson());\r\n        setShowCreateLessonForm(true);\r\n    }\r\n\r\n    function closeCreateLessonForm (): void {\r\n        setShowCreateLessonForm(false);\r\n    }\r\n\r\n    function openEditLessonForm (\r\n        event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        lessonID = Number(button.value);\r\n        for (i = 0; i < lessonHolder.length; i++) {\r\n            lessonSample = lessonHolder[i];\r\n            if (lessonSample.lessonID === lessonID) {\r\n                setLesson(lessonSample);\r\n                break;\r\n            }\r\n        }\r\n        setShowEditLessonForm(true);\r\n    }\r\n\r\n    function closeEditLessonForm (): void {\r\n        setShowEditLessonForm(false);\r\n    }\r\n\r\n    function handleChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ): void {\r\n        updatedLesson = new Lesson(lesson);\r\n        htmlElement = event.target;\r\n        console.log(htmlElement.name);\r\n        switch (htmlElement.name) {\r\n            default:\r\n                throw new Error(\"Unknown html element !\");\r\n\r\n            case \"lessonNameField\":\r\n                updatedLesson.lessonName = htmlElement.value;\r\n                break;\r\n\r\n            case \"lessonTypeField\":\r\n                updatedLesson.lessonType = htmlElement.value;\r\n                break;\r\n\r\n            case \"descriptionTextarea\":\r\n                updatedLesson.description = htmlElement.value;\r\n                break;\r\n\r\n            case \"durationField\":\r\n                updatedLesson.duration = Number(htmlElement.value);\r\n                break;\r\n        }\r\n        setLesson(updatedLesson);\r\n    }\r\n\r\n    async function createLesson (\r\n        event: FormEvent<HTMLFormElement>\r\n    ): Promise<void> {\r\n        event.preventDefault();\r\n        try {\r\n            await lessonAPI.createNewLesson(lesson);\r\n            closeCreateLessonForm();\r\n            props.dialogController.setDialogTitle(\"Lesson Created !\");\r\n            props.dialogController.setDialogBody(\r\n                `The lesson [${lesson.lessonName}] \r\n            has been created successfully.`\r\n            );\r\n            props.dialogController.setDialogType(\"inform\");\r\n            props.dialogController.setShowDialog(true);\r\n            loadLessonTable();\r\n            return Promise.resolve<undefined>(undefined);\r\n        }\r\n        catch (apiError: unknown) {\r\n            if (typeGuardian.isAxiosError(apiError)) {\r\n                if (typeof apiError.code === \"string\") {\r\n                    props.dialogController.setDialogTitle(\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle(apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody(apiError.message);\r\n                props.dialogController.setDialogType(\"error\");\r\n                props.dialogController.setShowDialog(true);\r\n            }\r\n            return Promise.reject(apiError);\r\n        }\r\n    }\r\n\r\n    async function editLesson (\r\n        event: FormEvent<HTMLFormElement>\r\n    ): Promise<void> {\r\n        event.preventDefault();\r\n        try {\r\n            await lessonAPI.updateLesson(lesson);\r\n            closeEditLessonForm();\r\n            props.dialogController.setDialogTitle(\"Lesson Saved !\");\r\n            props.dialogController.setDialogBody(\r\n                `The lesson [${lesson.lessonName}] \r\n            has been saved successfully.`\r\n            );\r\n            props.dialogController.setDialogType(\"inform\");\r\n            props.dialogController.setShowDialog(true);\r\n            loadLessonTable();\r\n            return Promise.resolve<undefined>(undefined);\r\n        }\r\n        catch (apiError: unknown) {\r\n            if (typeGuardian.isAxiosError(apiError)) {\r\n                if (typeof apiError.code === \"string\") {\r\n                    props.dialogController.setDialogTitle(\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle(apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody(apiError.message);\r\n                props.dialogController.setDialogType(\"error\");\r\n                props.dialogController.setShowDialog(true);\r\n            }\r\n            return Promise.reject(apiError);\r\n        }\r\n    }\r\n\r\n    async function loadLessonTable (): Promise<void> {\r\n        try {\r\n            lessonDataPage = await lessonAPI.getAllLesson(\r\n                pageIndex\r\n                , pageSize\r\n            );\r\n            setTotalPageCount(lessonDataPage.totalPageCount);\r\n            setLessonHolder(lessonDataPage.pageDataHolder);\r\n            return Promise.resolve<undefined>(undefined);\r\n        }\r\n        catch (apiError: unknown) {\r\n            if (typeGuardian.isAxiosError(apiError)) {\r\n                if (typeof apiError.code === \"string\") {\r\n                    props.dialogController.setDialogTitle(\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle(apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody(apiError.message);\r\n                props.dialogController.setDialogType(\"error\");\r\n                props.dialogController.setShowDialog(true);\r\n            }\r\n            return Promise.reject(apiError);\r\n        }\r\n    }\r\n\r\n    useEffect(\r\n        (): void => {\r\n            loadLessonTable().catch(\r\n                (error: unknown) => {\r\n                    console.error(error);\r\n                }\r\n            );\r\n        }\r\n        , []\r\n    );\r\n\r\n    useEffect(\r\n        (): void => {\r\n            if (props.dialogController.dialogIsConfirmed === true) {\r\n                executeLessonDeletion().catch(\r\n                    (error: unknown) => {\r\n                        console.error(error);\r\n                    }\r\n                );\r\n                props.dialogController.setDialogIsConfirmed(false);\r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    // Modals\r\n    return (\r\n        <Container fluid={true}>\r\n            {props.modalDialog}\r\n            <Modal\r\n                show={showCreateLessonForm}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n                size=\"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>New Lesson Information</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form\r\n                        id=\"CreateLessonForm\"\r\n                        className=\"pt-2 pr-5 pl-5 pb-0\"\r\n                        onSubmit={\r\n                            (event) => {\r\n                                createLesson(event).catch(\r\n                                    (error: unknown) => {\r\n                                        console.error(error);\r\n                                    }\r\n                                );\r\n                            }\r\n                        }\r\n                    >\r\n                        <Form.Group controlId=\"LessonNameField\">\r\n                            <Form.Label>\r\n                                Lesson Name:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                autoComplete=\"on\"\r\n                                autoFocus={true}\r\n                                name=\"lessonNameField\"\r\n                                pattern=\"^[a-zA-Z0-9\\+]*$\"\r\n                                placeholder=\"Name for the new lesson ?\"\r\n                                required={true}\r\n                                spellCheck={false}\r\n                                value={lesson.lessonName}\r\n                                onChange={\r\n                                    (event) => {\r\n                                        handleChange(event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className=\"text-muted\">\r\n                                format: no special character !\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"LessonTypeField\">\r\n                            <Form.Label>\r\n                                Lesson Type:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                autoComplete=\"on\"\r\n                                autoFocus={true}\r\n                                name=\"lessonTypeField\"\r\n                                pattern=\"^[\\p{L} .'-]+$\"\r\n                                placeholder=\"Type for the new lesson ?\"\r\n                                required={true}\r\n                                spellCheck={false}\r\n                                value={lesson.lessonType}\r\n                                onChange={\r\n                                    (event) => {\r\n                                        handleChange(event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className=\"text-muted\">\r\n                                format: no special character !\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"DescriptionTextarea\">\r\n                            <Form.Label>\r\n                                Description:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                autoComplete=\"off\"\r\n                                autoFocus={false}\r\n                                name=\"descriptionTextarea\"\r\n                                placeholder=\"Description for the new lesson ?\"\r\n                                required={false}\r\n                                spellCheck={true}\r\n                                rows={5}\r\n                                value={lesson.description}\r\n                                onChange={\r\n                                    (event) => {\r\n                                        handleChange(event);\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"durationField\">\r\n                            <Form.Label>\r\n                                Duration (minutes) :\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                autoComplete=\"on\"\r\n                                autoFocus={false}\r\n                                name=\"durationField\"\r\n                                placeholder=\"Duration of the new lesson ?\"\r\n                                required={true}\r\n                                spellCheck={false}\r\n                                min={0}\r\n                                step={1}\r\n                                value={lesson.duration}\r\n                                onChange={\r\n                                    (event) => {\r\n                                        handleChange(event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className=\"text-muted\">\r\n                                format: numbers only !\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        variant=\"success\"\r\n                        type=\"submit\"\r\n                        form=\"CreateLessonForm\"\r\n                    >\r\n                        Create\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outline-secondary\"\r\n                        onClick={closeCreateLessonForm}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Modal\r\n                show={showViewDetailDialog}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n                size=\"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>Lesson Details</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form\r\n                        id=\"viewLessonForm\"\r\n                        className=\"pt-2 pr-5 pl-5 pb-0\"\r\n                    >\r\n                        <Form.Row>\r\n                            <Form.Group as={Row} controlId=\"LessonIDInfo\">\r\n                                <Form.Label\r\n                                    column={true}\r\n                                    md={5}\r\n                                >\r\n                                    + Lesson ID:\r\n                                </Form.Label>\r\n                                <Col md={7}>\r\n                                    <Form.Control\r\n                                        plaintext={true}\r\n                                        readOnly={true}\r\n                                        value={lesson.lessonID}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n\r\n                        <Form.Row>\r\n                            <Form.Group as={Row} controlId=\"LessonNameInfo\">\r\n                                <Form.Label\r\n                                    column={true}\r\n                                    md={5}\r\n                                >\r\n                                    + Lesson Name:\r\n                                </Form.Label>\r\n                                <Col md={7}>\r\n                                    <Form.Control\r\n                                        plaintext={true}\r\n                                        readOnly={true}\r\n                                        value={lesson.lessonName}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n\r\n                        <Form.Row>\r\n                            <Form.Group as={Row} controlId=\"LessonTypeInfo\">\r\n                                <Form.Label\r\n                                    column={true}\r\n                                    md={5}\r\n                                >\r\n                                    + Lesson Type:\r\n                                </Form.Label>\r\n                                <Col md={7}>\r\n                                    <Form.Control\r\n                                        plaintext={true}\r\n                                        readOnly={true}\r\n                                        value={lesson.lessonType}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n\r\n                        <Form.Group controlId=\"DescriptionInfo\">\r\n                            <Form.Label>\r\n                                + Description:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                readOnly={true}\r\n                                rows={5}\r\n                                value={lesson.description}\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Row>\r\n\r\n                            <Form.Group as={Row} controlId=\"DurationInfo\">\r\n                                <Form.Label\r\n                                    column={true}\r\n                                    md={6}\r\n                                >\r\n                                    + Duration (minutes):\r\n                            </Form.Label>\r\n                                <Col\r\n                                    md={4}\r\n                                >\r\n                                    <Form.Control\r\n                                        plaintext={true}\r\n                                        readOnly={true}\r\n                                        value={\r\n                                            `${lesson.duration.toLocaleString()\r\n                                            }`\r\n                                        }\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n\r\n                        </Form.Row>\r\n\r\n                        <Form.Row>\r\n\r\n                            <Form.Group as={Row}\r\n                                controlId=\"LastModifiedInfo\">\r\n                                <Form.Label\r\n                                    column={true}\r\n                                    md={5}\r\n                                >\r\n                                    + Last Modified:\r\n                            </Form.Label>\r\n                                <Col md={7}>\r\n                                    <Form.Control\r\n                                        plaintext={true}\r\n                                        readOnly={true}\r\n                                        value={formattedLastModified}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n\r\n                        </Form.Row>\r\n\r\n                        <Form.Row>\r\n\r\n                            <Form.Group as={Row}\r\n                                controlId=\"DateCreatedInfo\">\r\n                                <Form.Label\r\n                                    column={true}\r\n                                    md={5}\r\n                                >\r\n                                    + Date Created:\r\n                            </Form.Label>\r\n                                <Col md={7}>\r\n                                    <Form.Control\r\n                                        plaintext={true}\r\n                                        readOnly={true}\r\n                                        value={formattedDateCreated}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n\r\n                        </Form.Row>\r\n\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        variant=\"info\"\r\n                        onClick={closeViewDetailDialog}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Modal\r\n                show={showEditLessonForm}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n                size=\"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>Edit Lesson</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form\r\n                        id=\"EditLessonForm\"\r\n                        className=\"pt-2 pr-5 pl-5 pb-0\"\r\n                        onSubmit={\r\n                            (event) => {\r\n                                editLesson(event).catch(\r\n                                    (error: unknown) => {\r\n                                        console.error(error);\r\n                                    }\r\n                                );\r\n                            }\r\n                        }\r\n                    >\r\n                        <Form.Group controlId=\"LessonNameField\">\r\n                            <Form.Label>\r\n                                Lesson Name:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                autoComplete=\"on\"\r\n                                autoFocus={true}\r\n                                name=\"lessonNameField\"\r\n                                pattern=\"^[a-zA-Z0-9\\+]*$\"\r\n                                placeholder=\"Name for the lesson ?\"\r\n                                required={true}\r\n                                spellCheck={false}\r\n                                value={lesson.lessonName}\r\n                                onChange={\r\n                                    (event) => {\r\n                                        handleChange(event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className=\"text-muted\">\r\n                                format: no special character !\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"LessonTypeField\">\r\n                            <Form.Label>\r\n                                Lesson Type:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                autoComplete=\"on\"\r\n                                autoFocus={true}\r\n                                name=\"lessonTypeField\"\r\n                                pattern=\"^[\\p{L} .'-]+$\"\r\n                                placeholder=\"Type for the lesson ?\"\r\n                                required={true}\r\n                                spellCheck={false}\r\n                                value={lesson.lessonType}\r\n                                onChange={\r\n                                    (event) => {\r\n                                        handleChange(event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className=\"text-muted\">\r\n                                format: no special character !\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"DescriptionTextarea\">\r\n                            <Form.Label>\r\n                                Description:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                autoComplete=\"off\"\r\n                                autoFocus={false}\r\n                                name=\"descriptionTextarea\"\r\n                                placeholder=\"Description for the lesson ?\"\r\n                                required={false}\r\n                                spellCheck={true}\r\n                                rows={5}\r\n                                value={lesson.description}\r\n                                onChange={\r\n                                    (event) => {\r\n                                        handleChange(event);\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"DurationField\">\r\n                            <Form.Label>\r\n                                Duration (minutes):\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                autoComplete=\"on\"\r\n                                autoFocus={false}\r\n                                name=\"durationField\"\r\n                                placeholder=\"Duration of the lesson ?\"\r\n                                required={true}\r\n                                spellCheck={false}\r\n                                min={0}\r\n                                step={1}\r\n                                value={lesson.duration}\r\n                                onChange={\r\n                                    (event) => {\r\n                                        handleChange(event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className=\"text-muted\">\r\n                                format: numbers only !\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        variant=\"success\"\r\n                        type=\"submit\"\r\n                        form=\"EditLessonForm\"\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outline-secondary\"\r\n                        onClick={closeEditLessonForm}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            <main>\r\n                <Container>\r\n                    <Row className=\"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item\r\n                                    linkAs={Link}\r\n                                    linkProps={{ to: \"/\" }}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item\r\n                                    linkAs={Link}\r\n                                    linkProps={{\r\n                                        to:\r\n                                        \"/admin-console/manage-course-function\"\r\n                                    }}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Manage course function\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Manage lesson function\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1 className=\"mb-3\">\r\n                                <span className=\"mr-3\">\r\n                                    Manage Lessons\r\n                                </span>\r\n                                <Button\r\n                                    variant=\"success\"\r\n                                    type=\"button\"\r\n                                    onClick={openCreateLessonForm}\r\n                                >\r\n                                    Create New\r\n                                </Button>\r\n                            </h1>\r\n                            <Form>\r\n                                <Table responsive=\"md\" hover={true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                Lesson Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Lesson Type\r\n                                            </th>\r\n                                            <th>\r\n                                                Duration (minutes)\r\n                                            </th>\r\n                                            <th>\r\n                                                Actions\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {lessonHolder.map(\r\n                                            (\r\n                                                lesson\r\n                                                , index\r\n                                            ) => renderLessonTable(\r\n                                                lesson\r\n                                                , index\r\n                                                , openViewDetailDialog\r\n                                                , openEditLessonForm\r\n                                                , handleDeleteLesson\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n        </Container>\r\n    );\r\n}\r\n","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\Lesson.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\LessonAPI.tsx",[],{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","severity":1,"message":"223","line":3,"column":5,"nodeType":"224","messageId":"225","endLine":3,"endColumn":16},{"ruleId":"222","severity":1,"message":"226","line":4,"column":7,"nodeType":"224","messageId":"225","endLine":4,"endColumn":15},{"ruleId":"222","severity":1,"message":"227","line":4,"column":17,"nodeType":"224","messageId":"225","endLine":4,"endColumn":26},{"ruleId":"222","severity":1,"message":"228","line":6,"column":7,"nodeType":"224","messageId":"225","endLine":6,"endColumn":21},{"ruleId":"222","severity":1,"message":"229","line":6,"column":23,"nodeType":"224","messageId":"225","endLine":6,"endColumn":31},{"ruleId":"222","severity":1,"message":"230","line":9,"column":5,"nodeType":"224","messageId":"225","endLine":9,"endColumn":11},{"ruleId":"222","severity":1,"message":"231","line":9,"column":30,"nodeType":"224","messageId":"225","endLine":9,"endColumn":34},{"ruleId":"222","severity":1,"message":"232","line":12,"column":10,"nodeType":"224","messageId":"225","endLine":12,"endColumn":19},{"ruleId":"222","severity":1,"message":"233","line":14,"column":10,"nodeType":"224","messageId":"225","endLine":14,"endColumn":17},{"ruleId":"222","severity":1,"message":"234","line":15,"column":10,"nodeType":"224","messageId":"225","endLine":15,"endColumn":22},{"ruleId":"222","severity":1,"message":"235","line":16,"column":10,"nodeType":"224","messageId":"225","endLine":16,"endColumn":18},{"ruleId":"222","severity":1,"message":"236","line":16,"column":20,"nodeType":"224","messageId":"225","endLine":16,"endColumn":27},{"ruleId":"222","severity":1,"message":"237","line":17,"column":10,"nodeType":"224","messageId":"225","endLine":17,"endColumn":20},{"ruleId":"222","severity":1,"message":"238","line":17,"column":22,"nodeType":"224","messageId":"225","endLine":17,"endColumn":33},{"ruleId":"222","severity":1,"message":"239","line":18,"column":10,"nodeType":"224","messageId":"225","endLine":18,"endColumn":23},{"ruleId":"240","severity":1,"message":"241","line":17,"column":16,"nodeType":"242","messageId":"243","endLine":17,"endColumn":19,"suggestions":"244"},{"ruleId":"222","severity":1,"message":"245","line":18,"column":10,"nodeType":"224","messageId":"225","endLine":18,"endColumn":17},{"ruleId":"222","severity":1,"message":"246","line":18,"column":19,"nodeType":"224","messageId":"225","endLine":18,"endColumn":29},{"ruleId":"222","severity":1,"message":"247","line":125,"column":22,"nodeType":"224","messageId":"225","endLine":125,"endColumn":35},{"ruleId":"222","severity":1,"message":"248","line":126,"column":20,"nodeType":"224","messageId":"225","endLine":126,"endColumn":31},{"ruleId":"222","severity":1,"message":"233","line":27,"column":10,"nodeType":"224","messageId":"225","endLine":27,"endColumn":17},{"ruleId":"222","severity":1,"message":"249","line":31,"column":10,"nodeType":"224","messageId":"225","endLine":31,"endColumn":14},{"ruleId":"222","severity":1,"message":"250","line":168,"column":10,"nodeType":"224","messageId":"225","endLine":168,"endColumn":24},{"ruleId":"222","severity":1,"message":"250","line":101,"column":10,"nodeType":"224","messageId":"225","endLine":101,"endColumn":24},"callback-return",[],"global-require",[],"handle-callback-err",[],"id-blacklist",["251"],"lines-around-directive",["252"],"no-buffer-constructor",[],"no-catch-shadow",["253"],"no-mixed-requires",[],"no-native-reassign",["254"],"no-negated-in-lhs",["255"],"no-new-require",[],"no-path-concat",[],"no-process-env",[],"no-process-exit",[],"no-restricted-modules",[],"no-sync",[],"prefer-reflect",[],"@typescript-eslint/no-unused-vars","'ChangeEvent' is defined but never used.","Identifier","unusedVar","'Dispatch' is defined but never used.","'FormEvent' is defined but never used.","'SetStateAction' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'TypeGuard' is defined but never used.","'UserAPI' is defined but never used.","'LoggedInUser' is defined but never used.","'Location' is defined but never used.","'History' is defined but never used.","'useHistory' is defined but never used.","'useLocation' is defined but never used.","'LocationState' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["256","257"],"'student' is assigned a value but never used.","'setStudent' is assigned a value but never used.","'setPageNumber' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","'User' is defined but never used.","'totalPageCount' is assigned a value but never used.","id-denylist","padding-line-between-statements","no-shadow","no-global-assign","no-unsafe-negation",{"messageId":"258","fix":"259","desc":"260"},{"messageId":"261","fix":"262","desc":"263"},"suggestUnknown",{"range":"264","text":"265"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"264","text":"266"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[638,641],"unknown","never"]
[{"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\index.tsx":"1","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\App.tsx":"2","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\reportWebVitals.ts":"3","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx":"4","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\HomePage.tsx":"5","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx":"6","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\LogInPage.tsx":"7","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx":"8","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx":"9","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageStudentPage.tsx":"10","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx":"11","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx":"12","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx":"13","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx":"14","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx":"15","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx":"16","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx":"17","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\User.tsx":"18","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\NewUserAPI.tsx":"19","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx":"20","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx":"21","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx":"22","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx":"23","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx":"24","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\NewUser.tsx":"25","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx":"26","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\ManageLessonPage.tsx":"27","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\EditLessonPage.tsx":"28"},{"size":641,"mtime":1614439037000,"results":"29","hashOfConfig":"30"},{"size":5973,"mtime":1615366279106,"results":"31","hashOfConfig":"30"},{"size":431,"mtime":1614439037000,"results":"32","hashOfConfig":"30"},{"size":519,"mtime":1614439037000,"results":"33","hashOfConfig":"30"},{"size":3721,"mtime":1614439037000,"results":"34","hashOfConfig":"30"},{"size":12711,"mtime":1614995503866,"results":"35","hashOfConfig":"30"},{"size":8234,"mtime":1614439037000,"results":"36","hashOfConfig":"30"},{"size":2493,"mtime":1614439037000,"results":"37","hashOfConfig":"30"},{"size":3219,"mtime":1614439037000,"results":"38","hashOfConfig":"30"},{"size":13029,"mtime":1614994621478,"results":"39","hashOfConfig":"30"},{"size":16741,"mtime":1614439037000,"results":"40","hashOfConfig":"30"},{"size":1373,"mtime":1614439037000,"results":"41","hashOfConfig":"30"},{"size":2307,"mtime":1614439037000,"results":"42","hashOfConfig":"30"},{"size":1232,"mtime":1614439037000,"results":"43","hashOfConfig":"30"},{"size":5033,"mtime":1614439037000,"results":"44","hashOfConfig":"30"},{"size":3692,"mtime":1614439037000,"results":"45","hashOfConfig":"30"},{"size":2202,"mtime":1614439037000,"results":"46","hashOfConfig":"30"},{"size":1868,"mtime":1614932720488,"results":"47","hashOfConfig":"30"},{"size":4411,"mtime":1614439037000,"results":"48","hashOfConfig":"30"},{"size":5687,"mtime":1614439037000,"results":"49","hashOfConfig":"30"},{"size":1546,"mtime":1614439037000,"results":"50","hashOfConfig":"30"},{"size":538,"mtime":1614439037000,"results":"51","hashOfConfig":"30"},{"size":1898,"mtime":1614439037000,"results":"52","hashOfConfig":"30"},{"size":12501,"mtime":1614439037000,"results":"53","hashOfConfig":"30"},{"size":1026,"mtime":1614439037000,"results":"54","hashOfConfig":"30"},{"size":5145,"mtime":1614994892291,"results":"55","hashOfConfig":"30"},{"size":3978,"mtime":1615220671235,"results":"56","hashOfConfig":"30"},{"size":10345,"mtime":1615367591189,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"17ytrng",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\index.tsx",[],["121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137"],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\App.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\reportWebVitals.ts",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\HomePage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx",["138","139","140"],"import React, {\n    ChangeEvent, FormEvent, ReactElement, useEffect, useState\n} from 'react';\nimport {\n    Button, Col, Container, Form, Row\n} from 'react-bootstrap';\nimport { UserAPI } from '../common/service/UserAPI';\nimport { useParams } from 'react-router-dom';\nimport { User, UserIndexSignature } from '../model/User';\n\nexport function EditStudentInfo (): ReactElement {\n    let [user, setUser] = useState<User>(new User());\n    let updatedUser: User | undefined;\n    let inputField:\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\n    let userAPI: UserAPI | undefined;\n    let param: any = useParams();\n    let [student, setStudent] = useState<User>(new User());\n    \n    useEffect (() => {\n        userAPI = new UserAPI();\n        userAPI.displayStudent(param.studentID).then(\n            (res) => {\n                setUser(res.data);\n                // console.log(student.userName);\n            }\n    );\n    }, []);\n\n    \n    function handleUserChange (\n        event: ChangeEvent<\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\n        >\n    ){\n        updatedUser = new User(user);\n        inputField = event.target;\n        updatedUser[\n            inputField.name as keyof UserIndexSignature\n        ] = inputField.value;\n        setUser(updatedUser);\n    }\n\n    function updateStudent (event: FormEvent<HTMLFormElement>, userID: number) {\n        event.preventDefault();\n        userAPI = new UserAPI();\n        userAPI.update(user, userID);\n        console.log(userID);\n    }\n \n    console.log(param.studentID);\n    // console.log(student.userName);\n    return (\n        <Container fluid={true} id=\"PageContentContainer\">\n            <Container fluid={true} id=\"PageHeaderContainer\">\n                <header>\n                </header>\n                <nav>\n                </nav>\n            </Container>\n            <main>\n                <Container id=\"PageBodyContainer\">\n                    <h1>{param.studentID}</h1>\n                    <Row>\n                        <Col>\n                            <Form\n                                noValidate={false}\n                                onSubmit={(event) => {\n                                    updateStudent(event, param.studentID);\n                                }}\n                            >\n                                <Form.Group>\n                                    <Form.Label>\n                                        User Name:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"userName\"\n                                        id=\"userName\"\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\n                                        required={true}\n                                        spellCheck={false}\n                                        value = {user.userName}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        First Name:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"firstName\"\n                                        id=\"firstName\"\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\n                                        value={user.firstName}\n                                        required={true}\n                                        spellCheck={false}\n                                        // value = {user.userName}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Middle Name:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"middleName\"\n                                        id=\"middleName\"\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\n                                        value={user.middleName}\n                                        required={true}\n                                        spellCheck={false}\n                                        // value = {user.userName}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Last Name:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"lastName\"\n                                        id=\"lastName\"\n                                        pattern=\"^[a-z0-9_-]{1,15}$\"\n                                        value={user.lastName}\n                                        required={true}\n                                        spellCheck={false}\n                                        // value = {user.userName}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Email:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"email\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"email\"\n                                        id=\"email\"\n                                        value={user.email}\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        DOB:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"date\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"dob\"\n                                        id=\"dob\"\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Phone:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"phoneNumber\"\n                                        id=\"phoneNumber\"\n                                        value={user.phoneNumber}\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Gender\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"gender\"\n                                        id=\"gender\"\n                                        value={user.gender}\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Job:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"job\"\n                                        id=\"job\"\n                                        value={user.job}\n                                        required={true}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Password:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"password\"\n                                        autoComplete=\"off\"\n                                        autoFocus={false}\n                                        name=\"password\"\n                                        id=\"password\"\n                                        placeholder=\"Your new password\"\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Account Status\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"accountStatus\"\n                                        id=\"accountStatus\"\n                                        value={user.accountStatus}\n                                        required={false}\n                                        spellCheck={false}\n                                        // value = {user.userName}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Button\n                                    variant=\"success\"\n                                    type=\"submit\"\n                                    block = {true}\n                                >\n                                    Save\n                                </Button>\n                            </Form>\n                        </Col>\n                    </Row>\n                </Container>\n            </main>\n            <footer>\n            </footer>\n        </Container>\n    );\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\LogInPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx",["141","142","143","144","145","146","147","148","149","150","151","152","153","154","155"],"// Import package members section:\nimport React, { \n    ChangeEvent\n    , Dispatch, FormEvent\n    , ReactElement\n    , SetStateAction, useState \n} from 'react';\nimport { \n    Button, Card, Container, Form, ListGroup, Row \n} from 'react-bootstrap';\nimport './SelectRolePage.css';\nimport { TypeGuard } from '../common/service/TypeGuard';\nimport { DialogControl } from '../common/component/ModalDialog';\nimport { UserAPI } from '../common/service/UserAPI';\nimport { LoggedInUser } from '../model/LoggedInUser';\nimport { Location, History } from \"../../node_modules/@types/history\";\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { LocationState } from '../common/component/ProtectedRoute';\n\ninterface SelectRolePageProps {\n    dialogController: DialogControl;\n    modalDialog: ReactElement;\n}\n\nexport function SelectRolePage (props: SelectRolePageProps): ReactElement {\n\n    // Variables declaration:\n    \n    return (\n        <Container \n            fluid = {true} \n            id = \"SelectRolePageContentContainer\" \n            className = \"vh-100\"\n        >   \n            {props.modalDialog}\n            <header>\n            </header>\n            <nav>\n            </nav>\n            <main className = \"h-100\">\n                <Container \n                    fluid = {true} \n                    className = \"h-100\"\n                >\n                    <Row className = {\n                        `h-100 \n                        justify-content-center \n                        align-items-center`\n                    }>\n                        <Card id = \"SelectRoleCard\">\n                            <Card.Header className = \"text-center\">\n                                Choose a role\n                            </Card.Header>\n                            <ListGroup variant = \"flush\">\n                                <ListGroup.Item>\n                                    Cras justo odio\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    Dapibus ac facilisis in\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    Vestibulum at eros\n                                </ListGroup.Item>\n                            </ListGroup>\n                        </Card>\n                    </Row>\n                </Container>\n            </main>\n            <footer>\n            </footer>\n        </Container>\n    );\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageStudentPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx",["156","157"],"// Import package members section:\nimport React, { \n    ChangeEvent\n    , MouseEvent\n    , ReactElement\n    , useEffect\n    , useState \n} from \"react\";\nimport { Button, Col, Container, Form, Row, Table } from \"react-bootstrap\";\nimport { DialogControl } from \"../../common/component/ModalDialog\";\nimport { NewUserAPI } from \"../../common/service/NewUserAPI\";\nimport { RoleAPI } from \"../../common/service/RoleAPI\";\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\nimport { NewUser } from \"../../model/NewUser\";\nimport { Role } from \"../../model/Role\";\n\nfunction renderRoleDropdownList (role: Role): ReactElement {\n    return (\n        <option key = {role.roleID}>\n            {role.roleName}\n        </option>\n    );\n}\n\nfunction renderRoleListSection (role: Role): ReactElement {\n    return (\n        <span key = {role.roleID}>\n            {role.roleName},&nbsp;\n        </span>\n    );\n}\n\nfunction renderNewUserTable (\n        newUser: NewUser\n        , index: number\n        , handleAcceptRequest: (\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\n        ) => Promise<void> \n        , handleRejectRequest: (\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\n        ) => Promise<void> \n): ReactElement {\n    return (\n        <tr key = {newUser.userID}>\n            <td>\n                {index + 1}\n            </td>\n            <td>\n                {`${newUser.firstName} ${newUser.lastName}`}\n            </td>\n            <td>\n                {newUser.phoneNumber}\n            </td>\n            <td>\n                {newUser.email}\n            </td>\n            <td>\n                {newUser.userName}\n            </td>\n            <td>\n                <Button \n                    variant = \"success\"\n                    type = \"button\"\n                    value = {newUser.userID}\n                    onClick = {handleAcceptRequest}\n                >\n                    Accept\n                </Button>\n                <Button \n                    variant = \"danger\"\n                    type = \"button\"\n                    value = {newUser.userID}\n                    onClick = {handleRejectRequest}\n                >\n                    Reject\n                </Button>\n            </td>\n        </tr>\n    );\n}\n\ninterface CreateAccountPageProps {\n    dialogController: DialogControl;\n    modalDialog: ReactElement;\n}\n\nexport function CreateAccountPage (\n    props: CreateAccountPageProps\n): ReactElement {\n\n    // Variables declaration:\n    let [newUserHolder, setNewUserHolder] = useState<NewUser[]> ([]);\n    let newUserAPI: NewUserAPI;\n    let typeGuardian: TypeGuard;\n    let [pageNumber, setPageNumber] = useState<number> (0);\n    let [pageSize, setPageSize] = useState<number> (10);\n    let [roleHolder, setRoleHolder] = useState<Role[]> ([]);\n    let roleAPI: RoleAPI;\n    let [selectedRoleName, setSelectedRoleName] = useState<string> (\"\");\n    let [newAccountRoleList, setNewAccountRoleList] = useState<Role[]> ([]);\n    let i: number | undefined; \n    let role: Role | undefined;\n    let selectedRoleArray: Role[] | undefined;\n    let selectedRole: Role | undefined;\n    let updatedNewAccountRoleList: Role[] | undefined;\n    let updatedRoleHolder: Role[] | undefined;\n    let defaultRoleSelection: Role | undefined;\n    let button: HTMLButtonElement | undefined; \n    let userID: number | undefined;\n\n    newUserAPI = new NewUserAPI ();\n    typeGuardian = new TypeGuard ();\n    roleAPI = new RoleAPI ();\n    \n    async function handleAcceptRequest (\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\n    ): Promise<void> {\n        if (newAccountRoleList.length > 0){\n            button = event.target as HTMLButtonElement;\n            userID = Number (button.value);\n            try {\n                await newUserAPI.acceptCreateAccountRequest (\n                        userID\n                        , newAccountRoleList\n                );\n                loadNewUserTable ();\n            }\n            catch (apiError: unknown){\n                if (typeGuardian.isAxiosError (apiError)){\n                    if (typeof apiError.code === \"string\"){\n                        props.dialogController.setDialogTitle (\n                            `${apiError.code}: ${apiError.name}`\n                        );\n                    }\n                    else {\n                        props.dialogController.setDialogTitle (apiError.name);\n                    }\n                    props.dialogController.setDialogBody (apiError.message);\n                    props.dialogController.setDialogType (\"error\");\n                    props.dialogController.setShowDialog (true);\n                }\n                else {\n                    throw new Error (\"This api error is not valid !\");\n                }\n            }\n        }\n        else {\n            props.dialogController.setDialogTitle (\"Error !\");\n            props.dialogController.setDialogBody (\n                    \"Please add at least one role.\"\n            );\n            props.dialogController.setDialogType (\"error\");\n            props.dialogController.setShowDialog (true);\n        }\n    }\n\n    async function handleRejectRequest (\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\n    ): Promise<void> {\n        button = event.target as HTMLButtonElement;\n        userID = Number (button.value);\n        try {\n            await newUserAPI.rejectCreateAccountRequest (\n                    userID\n            );\n            loadNewUserTable ();\n        }\n        catch (apiError: unknown){\n            if (typeGuardian.isAxiosError (apiError)){\n                if (typeof apiError.code === \"string\"){\n                    props.dialogController.setDialogTitle (\n                        `${apiError.code}: ${apiError.name}`\n                    );\n                }\n                else {\n                    props.dialogController.setDialogTitle (apiError.name);\n                }\n                props.dialogController.setDialogBody (apiError.message);\n                props.dialogController.setDialogType (\"error\");\n                props.dialogController.setShowDialog (true);\n            }\n            else {\n                throw new Error (\"This api error is not valid !\");\n            }\n        }\n    }\n\n    function handleAddRole (){\n        for (i = 0; i < roleHolder.length; i++){\n            role = roleHolder[i];\n            if (role.roleName === selectedRoleName){\n                updatedRoleHolder = roleHolder.slice ();\n                selectedRoleArray = updatedRoleHolder.splice (i, 1);\n                setRoleHolder (updatedRoleHolder);\n                if (updatedRoleHolder.length > 0){\n                    defaultRoleSelection = updatedRoleHolder[0];\n                    setSelectedRoleName (defaultRoleSelection.roleName);\n                }\n                selectedRole = selectedRoleArray[0];\n                updatedNewAccountRoleList = newAccountRoleList.slice ();\n                updatedNewAccountRoleList.push (selectedRole);\n                setNewAccountRoleList (updatedNewAccountRoleList);\n                break;\n            }\n        }\n    }\n\n    function handleReset (){\n        loadRoleDropdownList ();\n        updatedNewAccountRoleList = new Array<Role> ();\n        setNewAccountRoleList (updatedNewAccountRoleList);\n    }\n\n    function handleSelectedRoleChange (\n        event: ChangeEvent<\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\n        >\n    ): void {\n        setSelectedRoleName (event.target.value);\n    }\n\n    async function loadRoleDropdownList (): Promise<void> {\n        try {\n            updatedRoleHolder = await roleAPI.getAllRole (); \n            setRoleHolder (updatedRoleHolder);\n            defaultRoleSelection = updatedRoleHolder[0];\n            setSelectedRoleName (defaultRoleSelection.roleName);\n        }\n        catch (apiError: unknown){\n            if (typeGuardian.isAxiosError (apiError)){\n                if (typeof apiError.code === \"string\"){\n                    props.dialogController.setDialogTitle (\n                            `${apiError.code}: ${apiError.name}`\n                    );\n                }\n                else {\n                    props.dialogController.setDialogTitle (apiError.name);\n                }\n                props.dialogController.setDialogBody (apiError.message);\n                props.dialogController.setDialogType (\"error\");\n                props.dialogController.setShowDialog (true);\n            }\n            else {\n                throw new Error (\"This api error is not valid !\");\n            }\n        }\n    }\n\n    async function loadNewUserTable (): Promise<void> {\n        try {\n            setNewUserHolder (await newUserAPI.getAllCreateAccountRequest (\n                pageNumber\n                , pageSize\n            ));\n        }\n        catch (apiError: unknown){\n            if (typeGuardian.isAxiosError (apiError)){\n                if (typeof apiError.code === \"string\"){\n                    props.dialogController.setDialogTitle (\n                            `${apiError.code}: ${apiError.name}`\n                    );\n                }\n                else {\n                    props.dialogController.setDialogTitle (apiError.name);\n                }\n                props.dialogController.setDialogBody (apiError.message);\n                props.dialogController.setDialogType (\"error\");\n                props.dialogController.setShowDialog (true);\n            }\n            else {\n                throw new Error (\"This api error is not valid !\");\n            }\n        }\n    }\n\n    useEffect (\n        function fetchTableData (): void {\n            loadRoleDropdownList ();\n            loadNewUserTable ();\n        }\n        , []\n    );\n\n    return (\n        <Container fluid = {true}>\n            {props.modalDialog}\n            <main>\n                <Container>\n                    <Row className = \"bg-white\">\n                        <Col>\n                            <h1>\n                                Create Account Requests\n                            </h1>\n                            <hr/>\n                            <Form>\n                                <Form.Group>\n                                    <Form.Row \n                                        className = \"justify-content-md-center\"\n                                    >\n                                        <Form.Label className = \"mr-2\">\n                                            <h4>\n                                                {\"~\"} Add role \n                                                for the new account:\n                                            </h4>\n                                        </Form.Label>\n                                        <Col xs = \"auto\" className = \"mr-2\">\n                                            <Form.Control \n                                                as = \"select\" \n                                                value = {selectedRoleName}\n                                                onChange = {\n                                                    (event) => {\n// eslint-disable-next-line max-len\n                                                        handleSelectedRoleChange (\n                                                            event\n                                                        );\n                                                    } \n                                                }\n                                            >\n                                                {roleHolder.map (\n                                                    (\n                                                            role\n// eslint-disable-next-line max-len\n                                                    ) => renderRoleDropdownList (\n                                                            role\n                                                    )  \n                                                )}\n                                            </Form.Control>\n                                        </Col>\n                                        <Button \n                                            variant = \"success\"\n                                            type = \"button\"\n                                            className = \"mr-2\"\n                                            onClick = {\n                                                () => {\n                                                    handleAddRole ();\n                                                }\n                                            }\n                                        >\n                                            Add role\n                                        </Button>\n                                        <Button \n                                            variant = \"primary\"\n                                            type = \"button\"\n                                            className = \"mr-2\"\n                                            onClick = {\n                                                () => {\n                                                    handleReset ();\n                                                }\n                                            }\n                                        >\n                                            Reset\n                                        </Button>\n                                    </Form.Row>\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Row \n                                        className = \"justify-content-md-center\"\n                                    >\n                                        <Form.Label className = \"mr-2\">\n                                            <h4>\n                                                {\">\"} The accepted account \n                                                will have roles:\n                                            </h4>\n                                        </Form.Label>\n                                        {newAccountRoleList.map (\n                                            (\n                                                    role\n                                            ) => renderRoleListSection (\n                                                    role\n                                            )\n                                        )}\n                                    </Form.Row>\n                                </Form.Group>\n                                <Table responsive = \"md\" hover = {true}>\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                #\n                                            </th>\n                                            <th>\n                                                Full Name\n                                            </th>\n                                            <th>\n                                                Phone Number\n                                            </th>\n                                            <th>\n                                                Email\n                                            </th>\n                                            <th>\n                                                User Name\n                                            </th>\n                                            <th>\n                                                Actions\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {newUserHolder.map (\n                                            (\n                                                    newUser\n                                                    , index\n                                            ) => renderNewUserTable (\n                                                    newUser\n                                                    , index\n                                                    , handleAcceptRequest\n                                                    , handleRejectRequest\n                                            )\n                                        )}\n                                    </tbody>\n                                </Table>\n                            </Form>\n                        </Col>\n                    </Row>\n                </Container>\n            </main>\n            <footer>\n            </footer>\n        </Container>\n    );\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\User.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\NewUserAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx",[],["158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174"],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\NewUser.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx",["175","176","177","178","179","180","181","182","183"],"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, {\n    ReactElement, useEffect, useState\n} from 'react';\nimport {\n    Button, Col, Container, Form, FormControl, Nav, Navbar, Row, Table\n} from 'react-bootstrap';\nimport { UserAPI } from '../common/service/UserAPI';\nimport { Link, useParams, useRouteMatch } from 'react-router-dom';\nimport { User, UserIndexSignature } from '../model/User';\nimport './ViewProfilePage.css';\nfunction renderUserTable (\n    user: User\n    , index: number\n): ReactElement {\n    return (\n        <tr key={user.userID}>\n            <td>\n                {index + 1}\n            </td>\n            <td>\n                {user.firstName}\n            </td>\n            <td>\n                {user.lastName}\n            </td>\n            <td>\n                {user.phoneNumber}\n            </td>\n            <td>\n                {user.dob}\n            </td>\n            <td>\n                {user.email}\n            </td>\n            <td>\n                {user.gender}\n            </td>\n            <td>\n                {user.job}\n            </td>\n            <td>\n                {user.selfDescription}\n            </td>\n            <td>\n                {user.accountStatus}\n            </td>\n            <td>\n                {user.dateCreated}\n            </td>\n            <td>\n                {user.lastLogin}\n            </td>\n        </tr>\n    );\n}\nexport function ViewProfilePage (): ReactElement {\n\n    let userAPI: UserAPI | undefined;\n    let param: any = useParams();\n    let studentID: number;\n    let [student, setStudent] = useState<User[]>([]);\n\n    useEffect(() => {\n        userAPI = new UserAPI();\n        userAPI.displayStudent(param.studentID).then(\n            (res) => {\n\n                setStudent(res.data);\n            }\n        );\n    }, []);\n\n    console.log(param.studentID);\n\n    return (\n        <Container fluid={true} id=\"PageContentContainer\">\n            <Container fluid={true} id=\"PageHeaderContainer\">\n                <header>\n                </header>\n                <nav>\n                </nav>\n            </Container>\n            <main>\n                <Container id=\"PageBodyContainer\">\n                    <Row className = \"bg-white\">\n                        <Col>\n                        <Table responsive=\"md\" hover={true}>\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                #\n                                            </th>\n                                            <th>\n                                                First Name\n                                            </th>\n                                            <th>\n                                                Last Name\n                                            </th>\n                                            <th>\n                                                Phone Number\n                                            </th>\n                                            <th>\n                                                Date of birth\n                                            </th>\n                                            <th>\n                                                Email\n                                            </th>\n                                            <th>\n                                                Gender\n                                            </th>\n                                            <th>\n                                                Job\n                                            </th>\n                                            <th>\n                                                Description\n                                            </th>\n                                            <th>\n                                                Status\n                                            </th>\n                                            <th>\n                                                Date Created\n                                            </th>\n                                            <th>\n                                                Last Login\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {student.map(\n                                            (\n                                                user\n                                                , index\n                                            ) => renderUserTable(\n                                                user\n                                                , index\n                                            )\n                                        )}\n                                    </tbody>\n                                </Table>\n                        </Col>\n                    </Row>\n                </Container>\n            </main>\n            <footer>\n            </footer>\n        </Container>\n    );\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\ManageLessonPage.tsx",["184"],"import React, { ReactElement, useState, useEffect } from 'react';\r\n// import { Lesson } from '../model/Lesson';\r\nimport './ManageLessonPage.css';\r\n\r\nexport function ManageLessonPage () : ReactElement {\r\n    // let [lesson, setLesson] = useState<Lesson[]>([]);\r\n    let [lesson, setLesson] = useState(\r\n        [\r\n            {\r\n                lessonID: 1,\r\n                lessonName: \"Unit1\",\r\n                lessonType: \"Voca\",\r\n                duration: 1\r\n            },\r\n            {\r\n                lessonID: 2,\r\n                lessonName: \"Unit2\",\r\n                lessonType: \"Grammar\",\r\n                duration: 2\r\n            },\r\n            {\r\n                lessonID: 3,\r\n                lessonName: \"Unit3\",\r\n                lessonType: \"Speaking\",\r\n                duration: 2\r\n            },\r\n            {\r\n                lessonID: 4,\r\n                lessonName: \"Unit4\",\r\n                lessonType: \"Writing\",\r\n                duration: 3\r\n            }\r\n        ]\r\n    );\r\n    // let userAPI: LessonAPI = new LessonAPI();\r\n    useEffect(() => {\r\n        // userAPI.listLessons().then(\r\n        //     (res) => {\r\n        //         console.log(res);\r\n        //         setUser(res.data as Lesson[]);\r\n        //     }\r\n        // );\r\n    }, []);\r\n    return (\r\n        <div className=\"container\">\r\n            <div>\r\n                <h1>Bài học của khóa học A</h1>\r\n                <hr />\r\n            </div>\r\n            <div className=\"text-center\">\r\n                <table className=\"table table-bordered table-hover\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Tên bài học</th>\r\n                            <th>Loại bài học</th>\r\n                            <th>Số ca</th>\r\n                            <th>Hành động</th>\r\n                        </tr>    \r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            lesson.map((item, index) => <tr key={index}>\r\n                                <td>{item[\"lessonID\"]}</td>\r\n                                <td>{item[\"lessonName\"]}</td>\r\n                                <td>{item[\"lessonType\"]}</td>\r\n                                <td>{item[\"duration\"]}</td>\r\n                                <td id=\"action\">\r\n                                    <button type=\"button\"\r\n                                            className=\"btn btn-info act-btn\">\r\n                                                <span className=\r\n                                                    \"fa fa-eye mr-5\">\r\n                                                </span>\r\n                                                Xem\r\n                                            </button>\r\n                                    <button type=\"button\"\r\n                                            className=\"btn btn-warning act-btn\">\r\n                                                <span className=\r\n                                                    \"fa fa-pencil mr-5\">\r\n                                                </span>\r\n                                                Sửa\r\n                                            </button>\r\n                                    <button type=\"button\"\r\n                                            className=\"btn btn-danger \r\n                                            act-btn\">\r\n                                                <span className=\r\n                                                    \"fa fa-trash mr-5\">\r\n                                                </span>\r\n                                                Xóa    \r\n                                            </button>\r\n                                </td>\r\n                            </tr>\r\n                            )\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\EditLessonPage.tsx",["185","186","187","188","189","190","191","192","193"],{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","replacedBy":"227"},{"ruleId":"228","severity":1,"message":"229","line":17,"column":16,"nodeType":"230","messageId":"231","endLine":17,"endColumn":19,"suggestions":"232"},{"ruleId":"233","severity":1,"message":"234","line":18,"column":10,"nodeType":"235","messageId":"236","endLine":18,"endColumn":17},{"ruleId":"233","severity":1,"message":"237","line":18,"column":19,"nodeType":"235","messageId":"236","endLine":18,"endColumn":29},{"ruleId":"233","severity":1,"message":"238","line":3,"column":5,"nodeType":"235","messageId":"236","endLine":3,"endColumn":16},{"ruleId":"233","severity":1,"message":"239","line":4,"column":7,"nodeType":"235","messageId":"236","endLine":4,"endColumn":15},{"ruleId":"233","severity":1,"message":"240","line":4,"column":17,"nodeType":"235","messageId":"236","endLine":4,"endColumn":26},{"ruleId":"233","severity":1,"message":"241","line":6,"column":7,"nodeType":"235","messageId":"236","endLine":6,"endColumn":21},{"ruleId":"233","severity":1,"message":"242","line":6,"column":23,"nodeType":"235","messageId":"236","endLine":6,"endColumn":31},{"ruleId":"233","severity":1,"message":"243","line":9,"column":5,"nodeType":"235","messageId":"236","endLine":9,"endColumn":11},{"ruleId":"233","severity":1,"message":"244","line":9,"column":30,"nodeType":"235","messageId":"236","endLine":9,"endColumn":34},{"ruleId":"233","severity":1,"message":"245","line":12,"column":10,"nodeType":"235","messageId":"236","endLine":12,"endColumn":19},{"ruleId":"233","severity":1,"message":"246","line":14,"column":10,"nodeType":"235","messageId":"236","endLine":14,"endColumn":17},{"ruleId":"233","severity":1,"message":"247","line":15,"column":10,"nodeType":"235","messageId":"236","endLine":15,"endColumn":22},{"ruleId":"233","severity":1,"message":"248","line":16,"column":10,"nodeType":"235","messageId":"236","endLine":16,"endColumn":18},{"ruleId":"233","severity":1,"message":"249","line":16,"column":20,"nodeType":"235","messageId":"236","endLine":16,"endColumn":27},{"ruleId":"233","severity":1,"message":"250","line":17,"column":10,"nodeType":"235","messageId":"236","endLine":17,"endColumn":20},{"ruleId":"233","severity":1,"message":"251","line":17,"column":22,"nodeType":"235","messageId":"236","endLine":17,"endColumn":33},{"ruleId":"233","severity":1,"message":"252","line":18,"column":10,"nodeType":"235","messageId":"236","endLine":18,"endColumn":23},{"ruleId":"233","severity":1,"message":"253","line":95,"column":22,"nodeType":"235","messageId":"236","endLine":95,"endColumn":35},{"ruleId":"233","severity":1,"message":"254","line":96,"column":20,"nodeType":"235","messageId":"236","endLine":96,"endColumn":31},{"ruleId":"194","replacedBy":"255"},{"ruleId":"196","replacedBy":"256"},{"ruleId":"198","replacedBy":"257"},{"ruleId":"200","replacedBy":"258"},{"ruleId":"202","replacedBy":"259"},{"ruleId":"204","replacedBy":"260"},{"ruleId":"206","replacedBy":"261"},{"ruleId":"208","replacedBy":"262"},{"ruleId":"210","replacedBy":"263"},{"ruleId":"212","replacedBy":"264"},{"ruleId":"214","replacedBy":"265"},{"ruleId":"216","replacedBy":"266"},{"ruleId":"218","replacedBy":"267"},{"ruleId":"220","replacedBy":"268"},{"ruleId":"222","replacedBy":"269"},{"ruleId":"224","replacedBy":"270"},{"ruleId":"226","replacedBy":"271"},{"ruleId":"233","severity":1,"message":"243","line":6,"column":5,"nodeType":"235","messageId":"236","endLine":6,"endColumn":11},{"ruleId":"233","severity":1,"message":"244","line":6,"column":29,"nodeType":"235","messageId":"236","endLine":6,"endColumn":33},{"ruleId":"233","severity":1,"message":"272","line":6,"column":35,"nodeType":"235","messageId":"236","endLine":6,"endColumn":46},{"ruleId":"233","severity":1,"message":"273","line":6,"column":48,"nodeType":"235","messageId":"236","endLine":6,"endColumn":51},{"ruleId":"233","severity":1,"message":"274","line":6,"column":53,"nodeType":"235","messageId":"236","endLine":6,"endColumn":59},{"ruleId":"233","severity":1,"message":"275","line":9,"column":10,"nodeType":"235","messageId":"236","endLine":9,"endColumn":14},{"ruleId":"233","severity":1,"message":"276","line":9,"column":27,"nodeType":"235","messageId":"236","endLine":9,"endColumn":40},{"ruleId":"233","severity":1,"message":"277","line":10,"column":16,"nodeType":"235","messageId":"236","endLine":10,"endColumn":34},{"ruleId":"233","severity":1,"message":"278","line":61,"column":9,"nodeType":"235","messageId":"236","endLine":61,"endColumn":26},{"ruleId":"233","severity":1,"message":"279","line":7,"column":18,"nodeType":"235","messageId":"236","endLine":7,"endColumn":27},{"ruleId":"233","severity":1,"message":"238","line":2,"column":5,"nodeType":"235","messageId":"236","endLine":2,"endColumn":16},{"ruleId":"233","severity":1,"message":"240","line":2,"column":18,"nodeType":"235","messageId":"236","endLine":2,"endColumn":27},{"ruleId":"233","severity":1,"message":"280","line":2,"column":43,"nodeType":"235","messageId":"236","endLine":2,"endColumn":52},{"ruleId":"233","severity":1,"message":"242","line":2,"column":54,"nodeType":"235","messageId":"236","endLine":2,"endColumn":62},{"ruleId":"233","severity":1,"message":"246","line":7,"column":10,"nodeType":"235","messageId":"236","endLine":7,"endColumn":17},{"ruleId":"233","severity":1,"message":"281","line":9,"column":10,"nodeType":"235","messageId":"236","endLine":9,"endColumn":14},{"ruleId":"233","severity":1,"message":"277","line":9,"column":16,"nodeType":"235","messageId":"236","endLine":9,"endColumn":34},{"ruleId":"228","severity":1,"message":"229","line":18,"column":16,"nodeType":"230","messageId":"231","endLine":18,"endColumn":19,"suggestions":"282"},{"ruleId":"233","severity":1,"message":"283","line":35,"column":44,"nodeType":"235","messageId":"236","endLine":35,"endColumn":49},"callback-return",[],"global-require",[],"handle-callback-err",[],"id-blacklist",["284"],"lines-around-directive",["285"],"no-buffer-constructor",[],"no-catch-shadow",["286"],"no-mixed-requires",[],"no-native-reassign",["287"],"no-negated-in-lhs",["288"],"no-new-require",[],"no-path-concat",[],"no-process-env",[],"no-process-exit",[],"no-restricted-modules",[],"no-sync",[],"prefer-reflect",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["289","290"],"@typescript-eslint/no-unused-vars","'student' is assigned a value but never used.","Identifier","unusedVar","'setStudent' is assigned a value but never used.","'ChangeEvent' is defined but never used.","'Dispatch' is defined but never used.","'FormEvent' is defined but never used.","'SetStateAction' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'TypeGuard' is defined but never used.","'UserAPI' is defined but never used.","'LoggedInUser' is defined but never used.","'Location' is defined but never used.","'History' is defined but never used.","'useHistory' is defined but never used.","'useLocation' is defined but never used.","'LocationState' is defined but never used.","'setPageNumber' is assigned a value but never used.","'setPageSize' is assigned a value but never used.",[],[],[],["284"],["285"],[],["286"],[],["287"],["288"],[],[],[],[],[],[],[],"'FormControl' is defined but never used.","'Nav' is defined but never used.","'Navbar' is defined but never used.","'Link' is defined but never used.","'useRouteMatch' is defined but never used.","'UserIndexSignature' is defined but never used.","'studentID' is defined but never used.","'setLesson' is assigned a value but never used.","'useEffect' is defined but never used.","'User' is defined but never used.",["291","292"],"'event' is defined but never used.","id-denylist","padding-line-between-statements","no-shadow","no-global-assign","no-unsafe-negation",{"messageId":"293","fix":"294","desc":"295"},{"messageId":"296","fix":"297","desc":"298"},{"messageId":"293","fix":"299","desc":"295"},{"messageId":"296","fix":"300","desc":"298"},"suggestUnknown",{"range":"301","text":"302"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"301","text":"303"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"304","text":"302"},{"range":"304","text":"303"},[622,625],"unknown","never",[676,679]]
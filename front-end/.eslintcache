[{"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\index.tsx":"1","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\reportWebVitals.ts":"2","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\App.tsx":"3","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx":"4","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\HomePage.tsx":"5","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\SignupPage.tsx":"6","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx":"7","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx":"8","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx":"9","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx":"10","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx":"11","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx":"12","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\NewUserAPI.tsx":"13","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx":"14","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\User.tsx":"15","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\NewUser.tsx":"16","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx":"17","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx":"18","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx":"19"},{"size":664,"mtime":1612773986093,"results":"20","hashOfConfig":"21"},{"size":440,"mtime":1611763342772,"results":"22","hashOfConfig":"21"},{"size":2852,"mtime":1614225306842,"results":"23","hashOfConfig":"21"},{"size":12230,"mtime":1614225305984,"results":"24","hashOfConfig":"21"},{"size":3677,"mtime":1612773986097,"results":"25","hashOfConfig":"21"},{"size":11545,"mtime":1612773986100,"results":"26","hashOfConfig":"21"},{"size":3432,"mtime":1614225299613,"results":"27","hashOfConfig":"21"},{"size":2547,"mtime":1614225308887,"results":"28","hashOfConfig":"21"},{"size":3773,"mtime":1612773986090,"results":"29","hashOfConfig":"21"},{"size":1077,"mtime":1612773986081,"results":"30","hashOfConfig":"21"},{"size":1737,"mtime":1612773986087,"results":"31","hashOfConfig":"21"},{"size":5002,"mtime":1614222964492,"results":"32","hashOfConfig":"21"},{"size":2267,"mtime":1612773986091,"results":"33","hashOfConfig":"21"},{"size":728,"mtime":1612773986092,"results":"34","hashOfConfig":"21"},{"size":1165,"mtime":1612773986094,"results":"35","hashOfConfig":"21"},{"size":647,"mtime":1612773986093,"results":"36","hashOfConfig":"21"},{"size":499,"mtime":1612773986091,"results":"37","hashOfConfig":"21"},{"size":1937,"mtime":1612773986091,"results":"38","hashOfConfig":"21"},{"size":5548,"mtime":1614229270590,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1gkshst",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\index.tsx",[],["84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100"],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\reportWebVitals.ts",["101"],"import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\App.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx",["102","103"],"import React, {\r\n    ChangeEvent, FormEvent, ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, Row\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { useParams } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\n\r\nexport function EditStudentInfo (): ReactElement {\r\n    let [user, setUser] = useState<User>(new User());\r\n    let updatedUser: User | undefined;\r\n    let inputField:\r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let param: any = useParams();\r\n    let [student, setStudent] = useState<User>(new User());\r\n    let date: string;\r\n    useEffect (() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.displayStudent(param.studentID).then(\r\n            (res) => {\r\n                setStudent(res.data);\r\n                // console.log(student.userName);\r\n            }\r\n    );\r\n    }, []);\r\n\r\n    \r\n    function handleUserChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ){\r\n        updatedUser = user;\r\n        inputField = event.target;\r\n        updatedUser[\r\n            inputField.name as keyof UserIndexSignature\r\n        ] = inputField.value;\r\n        setUser(updatedUser);\r\n    }\r\n\r\n    function updateStudent (event: FormEvent<HTMLFormElement>, userID: number) {\r\n        event.preventDefault();\r\n        userAPI = new UserAPI();\r\n        userAPI.update(user, userID);\r\n        console.log(userID);\r\n    }\r\n \r\n    console.log(param.studentID);\r\n    // console.log(student.userName);\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <h1>{param.studentID}</h1>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form\r\n                                noValidate={false}\r\n                                onSubmit={(event) => {\r\n                                    updateStudent(event, param.studentID);\r\n                                }}\r\n                            >\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        User Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"userName\"\r\n                                        id=\"userName\"\r\n                                        pattern=\"^[\\\\p{L} .'-]+$\"\r\n                                        placeholder={student.userName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {student.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        First Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"firstName\"\r\n                                        id=\"firstName\"\r\n                                        pattern=\"^[\\\\p{L} .'-]+$\"\r\n                                        placeholder={student.firstName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Last Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"lastName\"\r\n                                        id=\"lastName\"\r\n                                        pattern=\"^[\\\\p{L} .'-]+$\"\r\n                                        placeholder={student.lastName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Email:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"email\"\r\n                                        id=\"email\"\r\n                                        placeholder={student.email}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        DOB:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"dob\"\r\n                                        id=\"dob\"\r\n                                        // value=\"07/08/1997\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Phone:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"phoneNumber\"\r\n                                        id=\"phoneNumber\"\r\n                                        placeholder={student.phoneNumber}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Gender\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"gender\"\r\n                                        id=\"gender\"\r\n                                        placeholder={student.gender}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Job:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"job\"\r\n                                        id=\"job\"\r\n                                        placeholder={student.job}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Password:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        autoComplete=\"off\"\r\n                                        autoFocus={false}\r\n                                        name=\"password\"\r\n                                        id=\"password\"\r\n                                        pattern=\"^\\\\S+$\"\r\n                                        placeholder=\"Your new password\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Account Status\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"accountStatus\"\r\n                                        id=\"accountStatus\"\r\n                                        placeholder={student.accountStatus}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button\r\n                                    variant=\"success\"\r\n                                    type=\"submit\"\r\n                                    block = {true}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\HomePage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\SignupPage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx",["104"],"// Import package members section:\r\nimport React, { ReactElement, useEffect, useState } from \"react\";\r\nimport { Col, Container, Row, Table } from \"react-bootstrap\";\r\nimport { NewUserAPI } from \"../../common/service/NewUserAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { NewUser } from \"../../model/NewUser\";\r\n\r\ninterface CreateAccountPageProps {\r\n    setShowDialog (showDialog: boolean): void;\r\n    setDialogTitle (dialogTitle: string): void;\r\n    setDialogBody (dialogBody: string): void;\r\n    setDialogType (dialogType: string): void;\r\n    handleCloseDialog (): void;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function CreateAccountPage (\r\n    props: CreateAccountPageProps\r\n): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [newUserHolder, setNewUserHolder] = useState<NewUser[]> ([]);\r\n    let newUserAPI: NewUserAPI;\r\n    let typeGuardian: TypeGuard;\r\n\r\n    newUserAPI = new NewUserAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    \r\n    async function getAllCreateAccountRequests (): Promise<void> {\r\n        try {\r\n            setNewUserHolder (await newUserAPI.getAllNewUser ());\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.setDialogTitle (`${apiError.code}: ${apiError.name}`);\r\n                }\r\n                else {\r\n                    props.setDialogTitle (apiError.name);\r\n                }\r\n                props.setDialogBody (apiError.message);\r\n                props.setDialogType (\"error\");\r\n                props.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect (\r\n        function fetchTableData (): void {\r\n            getAllCreateAccountRequests ();\r\n        }\r\n        , []\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <h1>\r\n                                Create Account Requests\r\n                            </h1>\r\n                            <hr/>\r\n                            <Table responsive = \"md\">\r\n\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx",["105","106"],"import axios, { AxiosInstance, AxiosResponse } from \"axios\";\r\nimport { User } from \"../../model/User\";\r\nimport { AxiosInstanceGet } from \"./AxiosInstanceGet\";\r\nimport { TypeGuard } from \"./TypeGuard\";\r\n\r\nexport class UserAPI {\r\n\r\n    // Variables declaration:\r\n    private serverResponse: AxiosResponse | undefined;\r\n    private axiosInstance: AxiosInstance | undefined;\r\n    private axiosInstanceGetter: AxiosInstanceGet | undefined;\r\n    private typeGuardian: TypeGuard | undefined;\r\n    \r\n    /*\r\n     * public async listUsers (): Promise<AxiosResponse> {\r\n     *     this.axiosInstanceGetter = new AxiosInstanceGet ();\r\n     *     this.axiosInstance = this.axiosInstanceGetter.getNewInstance ();\r\n     *     try {\r\n     *         this.serverResponse = await this.axiosInstance.get (\r\n     *             \"/users\"\r\n     *         );\r\n     *         this.typeGuardian = new TypeGuard ();\r\n     *         if (this.typeGuardian.isAxiosResponse (this.serverResponse)){\r\n     *             return this.serverResponse;\r\n     *         }\r\n     *         else {\r\n     *             throw new Error (\"This server response is not valid !\");\r\n     *         }\r\n     *     }\r\n     *     catch (error){\r\n     *         console.error (error.toJSON ());\r\n     *         return Promise.reject<AxiosResponse> (error);\r\n     *     }   \r\n     * }\r\n     */\r\n    public listUsers (): Promise<AxiosResponse> {\r\n        return axios.get(\"http://localhost:8080/users\");\r\n    }\r\n\r\n    public async registerUser (user: User): Promise<AxiosResponse> {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet ();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance ();\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.post (\r\n                \"/users\"\r\n                , user\r\n            );\r\n            this.typeGuardian = new TypeGuard ();\r\n            if (this.typeGuardian.isAxiosResponse (this.serverResponse)){\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error (\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error){\r\n            console.error (error.toJSON ());\r\n            return Promise.reject<AxiosResponse> (error);\r\n        }   \r\n    }\r\n\r\n    public async deleteUser (userID: string): Promise<AxiosResponse> {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet ();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance ();\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.delete (\r\n                `/users/${userID}`\r\n            );\r\n            this.typeGuardian = new TypeGuard ();\r\n            if (this.typeGuardian.isAxiosResponse (this.serverResponse)){\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error (\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error){\r\n            console.error (error.toJSON ());\r\n            return Promise.reject<AxiosResponse> (error);\r\n        }\r\n    }\r\n\r\n    public async update (user: User, userID: number): Promise<AxiosResponse> {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet ();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance ();\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.put (\r\n                `/editInfo/${userID}`\r\n                , user\r\n            );\r\n            this.typeGuardian = new TypeGuard ();\r\n            if (this.typeGuardian.isAxiosResponse (this.serverResponse)){\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error (\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error){\r\n            console.error (error.toJSON ());\r\n            return Promise.reject<AxiosResponse> (error);\r\n        }   \r\n    }\r\n    \r\n    public async displayStudent (userID: number): Promise<AxiosResponse> {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet ();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance ();\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.get (\r\n                `/users`\r\n            );\r\n            this.typeGuardian = new TypeGuard ();\r\n            if (this.typeGuardian.isAxiosResponse (this.serverResponse)){\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error (\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error){\r\n            console.error (error.toJSON ());\r\n            return Promise.reject<AxiosResponse> (error);\r\n        }   \r\n    }\r\n    \r\n    public updateStudents (user: User, userID: number){\r\n        try {\r\n            return axios.put(`http://localhost:8080/editInfo/${userID}`, user);}\r\n        catch (error){\r\n            console.error (error.toJSON ());\r\n            return Promise.reject<AxiosResponse> (error);\r\n        }\r\n    }\r\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\NewUserAPI.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\User.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\NewUser.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx",[],["107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123"],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx",["124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140"],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":3,"column":25,"nodeType":"177","messageId":"178","endLine":3,"endColumn":57},{"ruleId":"179","severity":1,"message":"180","line":17,"column":16,"nodeType":"181","messageId":"182","endLine":17,"endColumn":19,"suggestions":"183"},{"ruleId":"184","severity":1,"message":"185","line":19,"column":9,"nodeType":"186","messageId":"187","endLine":19,"endColumn":21},{"ruleId":"184","severity":1,"message":"188","line":22,"column":10,"nodeType":"186","messageId":"187","endLine":22,"endColumn":23},{"ruleId":"184","severity":1,"message":"189","line":105,"column":34,"nodeType":"186","messageId":"187","endLine":105,"endColumn":48},{"ruleId":"175","severity":1,"message":"176","line":126,"column":5,"nodeType":"190","messageId":"178","endLine":126,"endColumn":55},{"ruleId":"141","replacedBy":"191"},{"ruleId":"143","replacedBy":"192"},{"ruleId":"145","replacedBy":"193"},{"ruleId":"147","replacedBy":"194"},{"ruleId":"149","replacedBy":"195"},{"ruleId":"151","replacedBy":"196"},{"ruleId":"153","replacedBy":"197"},{"ruleId":"155","replacedBy":"198"},{"ruleId":"157","replacedBy":"199"},{"ruleId":"159","replacedBy":"200"},{"ruleId":"161","replacedBy":"201"},{"ruleId":"163","replacedBy":"202"},{"ruleId":"165","replacedBy":"203"},{"ruleId":"167","replacedBy":"204"},{"ruleId":"169","replacedBy":"205"},{"ruleId":"171","replacedBy":"206"},{"ruleId":"173","replacedBy":"207"},{"ruleId":"184","severity":1,"message":"208","line":2,"column":5,"nodeType":"186","messageId":"187","endLine":2,"endColumn":16},{"ruleId":"184","severity":1,"message":"209","line":2,"column":18,"nodeType":"186","messageId":"187","endLine":2,"endColumn":27},{"ruleId":"184","severity":1,"message":"210","line":2,"column":29,"nodeType":"186","messageId":"187","endLine":2,"endColumn":39},{"ruleId":"184","severity":1,"message":"211","line":5,"column":5,"nodeType":"186","messageId":"187","endLine":5,"endColumn":11},{"ruleId":"184","severity":1,"message":"212","line":5,"column":29,"nodeType":"186","messageId":"187","endLine":5,"endColumn":33},{"ruleId":"184","severity":1,"message":"213","line":5,"column":35,"nodeType":"186","messageId":"187","endLine":5,"endColumn":46},{"ruleId":"184","severity":1,"message":"214","line":5,"column":48,"nodeType":"186","messageId":"187","endLine":5,"endColumn":51},{"ruleId":"184","severity":1,"message":"215","line":5,"column":53,"nodeType":"186","messageId":"187","endLine":5,"endColumn":59},{"ruleId":"184","severity":1,"message":"216","line":8,"column":10,"nodeType":"186","messageId":"187","endLine":8,"endColumn":14},{"ruleId":"184","severity":1,"message":"217","line":9,"column":16,"nodeType":"186","messageId":"187","endLine":9,"endColumn":34},{"ruleId":"184","severity":1,"message":"218","line":58,"column":10,"nodeType":"186","messageId":"187","endLine":58,"endColumn":14},{"ruleId":"184","severity":1,"message":"219","line":58,"column":16,"nodeType":"186","messageId":"187","endLine":58,"endColumn":23},{"ruleId":"184","severity":1,"message":"189","line":59,"column":9,"nodeType":"186","messageId":"187","endLine":59,"endColumn":23},{"ruleId":"184","severity":1,"message":"220","line":60,"column":9,"nodeType":"186","messageId":"187","endLine":60,"endColumn":35},{"ruleId":"184","severity":1,"message":"221","line":62,"column":9,"nodeType":"186","messageId":"187","endLine":62,"endColumn":14},{"ruleId":"179","severity":1,"message":"180","line":63,"column":16,"nodeType":"181","messageId":"182","endLine":63,"endColumn":19,"suggestions":"222"},{"ruleId":"184","severity":1,"message":"223","line":64,"column":9,"nodeType":"186","messageId":"187","endLine":64,"endColumn":26},"callback-return",[],"global-require",[],"handle-callback-err",[],"id-blacklist",["224"],"lines-around-directive",["225"],"no-buffer-constructor",[],"no-catch-shadow",["226"],"no-mixed-requires",[],"no-native-reassign",["227"],"no-negated-in-lhs",["228"],"no-new-require",[],"no-path-concat",[],"no-process-env",[],"no-process-exit",[],"no-restricted-modules",[],"no-sync",[],"prefer-reflect",[],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["229","230"],"@typescript-eslint/no-unused-vars","'date' is defined but never used.","Identifier","unusedVar","'newUserHolder' is assigned a value but never used.","'userID' is defined but never used.","FunctionExpression",[],[],[],["224"],["225"],[],["226"],[],["227"],["228"],[],[],[],[],[],[],[],"'ChangeEvent' is defined but never used.","'FormEvent' is defined but never used.","'MouseEvent' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'Nav' is defined but never used.","'Navbar' is defined but never used.","'Link' is defined but never used.","'UserIndexSignature' is defined but never used.","'user' is assigned a value but never used.","'getUser' is assigned a value but never used.","'showUser' is defined but never used.","'match' is assigned a value but never used.",["231","232"],"'studentID' is defined but never used.","id-denylist","padding-line-between-statements","no-shadow","no-global-assign","no-unsafe-negation",{"messageId":"233","fix":"234","desc":"235"},{"messageId":"236","fix":"237","desc":"238"},{"messageId":"233","fix":"239","desc":"235"},{"messageId":"236","fix":"240","desc":"238"},"suggestUnknown",{"range":"241","text":"242"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"241","text":"243"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"244","text":"242"},{"range":"244","text":"243"},[638,641],"unknown","never",[1720,1723]]
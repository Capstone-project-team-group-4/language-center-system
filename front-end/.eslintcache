[{"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\index.tsx":"1","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\App.tsx":"2","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\reportWebVitals.ts":"3","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\HomePage.tsx":"4","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx":"5","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx":"6","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\LogInPage.tsx":"7","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx":"8","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx":"9","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx":"10","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx":"11","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx":"12","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx":"13","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx":"14","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx":"15","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx":"16","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx":"17","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx":"18","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx":"19","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\User.tsx":"20","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\NewUserAPI.tsx":"21","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx":"22","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\NewUser.tsx":"23","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx":"24","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx":"25","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx":"26"},{"size":664,"mtime":1614260798543,"results":"27","hashOfConfig":"28"},{"size":6352,"mtime":1614613277816,"results":"29","hashOfConfig":"28"},{"size":446,"mtime":1614350241978,"results":"30","hashOfConfig":"28"},{"size":3794,"mtime":1614350241965,"results":"31","hashOfConfig":"28"},{"size":543,"mtime":1614350241963,"results":"32","hashOfConfig":"28"},{"size":11967,"mtime":1614612286945,"results":"33","hashOfConfig":"28"},{"size":8454,"mtime":1614350241969,"results":"34","hashOfConfig":"28"},{"size":2565,"mtime":1614350241971,"results":"35","hashOfConfig":"28"},{"size":12783,"mtime":1614350242001,"results":"36","hashOfConfig":"28"},{"size":5289,"mtime":1614612571732,"results":"37","hashOfConfig":"28"},{"size":4926,"mtime":1614614491944,"results":"38","hashOfConfig":"28"},{"size":18779,"mtime":1614350241977,"results":"39","hashOfConfig":"28"},{"size":13087,"mtime":1614350241977,"results":"40","hashOfConfig":"28"},{"size":1414,"mtime":1614350241958,"results":"41","hashOfConfig":"28"},{"size":1269,"mtime":1614350241961,"results":"42","hashOfConfig":"28"},{"size":3786,"mtime":1614350241960,"results":"43","hashOfConfig":"28"},{"size":5163,"mtime":1614350241960,"results":"44","hashOfConfig":"28"},{"size":3162,"mtime":1614350241962,"results":"45","hashOfConfig":"28"},{"size":3306,"mtime":1614350241959,"results":"46","hashOfConfig":"28"},{"size":1850,"mtime":1614612286944,"results":"47","hashOfConfig":"28"},{"size":4536,"mtime":1614350241962,"results":"48","hashOfConfig":"28"},{"size":9182,"mtime":1614612571729,"results":"49","hashOfConfig":"28"},{"size":1073,"mtime":1614350241964,"results":"50","hashOfConfig":"28"},{"size":1589,"mtime":1614350241962,"results":"51","hashOfConfig":"28"},{"size":1944,"mtime":1614350241961,"results":"52","hashOfConfig":"28"},{"size":553,"mtime":1614350241960,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"138g4e1",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\index.tsx",[],["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130"],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\App.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\reportWebVitals.ts",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\HomePage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx",["131","132","133"],"import React, {\r\n    ChangeEvent, FormEvent, ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, Row\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { useParams } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\n\r\nexport function EditStudentInfo (): ReactElement {\r\n    let [user, setUser] = useState<User>(new User());\r\n    let updatedUser: User | undefined;\r\n    let inputField:\r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let param: any = useParams();\r\n    let [student, setStudent] = useState<User>(new User());\r\n    \r\n    useEffect (() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.displayStudent(param.studentID).then(\r\n            (res) => {\r\n                setUser(res.data);\r\n                // console.log(student.userName);\r\n            }\r\n    );\r\n    }, []);\r\n\r\n    \r\n    function handleUserChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ){\r\n        updatedUser = new User(user);\r\n        inputField = event.target;\r\n        updatedUser[\r\n            inputField.name as keyof UserIndexSignature\r\n        ] = inputField.value;\r\n        setUser(updatedUser);\r\n    }\r\n\r\n    function updateStudent (event: FormEvent<HTMLFormElement>, userID: number) {\r\n        event.preventDefault();\r\n        userAPI = new UserAPI();\r\n        userAPI.update(user, userID);\r\n        console.log(userID);\r\n    }\r\n \r\n    console.log(param.studentID);\r\n    // console.log(student.userName);\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <h1>{param.studentID}</h1>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form\r\n                                noValidate={false}\r\n                                onSubmit={(event) => {\r\n                                    updateStudent(event, param.studentID);\r\n                                }}\r\n                            >\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        User Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"userName\"\r\n                                        id=\"userName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        First Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"firstName\"\r\n                                        id=\"firstName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        value={user.firstName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Last Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"lastName\"\r\n                                        id=\"lastName\"\r\n                                        pattern=\"^[a-z0-9_-]{1,15}$\"\r\n                                        value={user.lastName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Email:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"email\"\r\n                                        id=\"email\"\r\n                                        value={user.email}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        DOB:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"dob\"\r\n                                        id=\"dob\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Phone:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"phoneNumber\"\r\n                                        id=\"phoneNumber\"\r\n                                        value={user.phoneNumber}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Gender\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"gender\"\r\n                                        id=\"gender\"\r\n                                        value={user.gender}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Job:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"job\"\r\n                                        id=\"job\"\r\n                                        value={user.job}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Password:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        autoComplete=\"off\"\r\n                                        autoFocus={false}\r\n                                        name=\"password\"\r\n                                        id=\"password\"\r\n                                        placeholder=\"Your new password\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Account Status\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"accountStatus\"\r\n                                        id=\"accountStatus\"\r\n                                        value={user.accountStatus}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button\r\n                                    variant=\"success\"\r\n                                    type=\"submit\"\r\n                                    block = {true}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\LogInPage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx",["134","135","136","137","138","139","140","141","142","143","144","145","146","147","148"],"// Import package members section:\r\nimport React, { \r\n    ChangeEvent\r\n    , Dispatch, FormEvent\r\n    , ReactElement\r\n    , SetStateAction, useState \r\n} from 'react';\r\nimport { \r\n    Button, Card, Container, Form, ListGroup, Row \r\n} from 'react-bootstrap';\r\nimport './SelectRolePage.css';\r\nimport { TypeGuard } from '../common/service/TypeGuard';\r\nimport { DialogControl } from '../common/component/ModalDialog';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { LoggedInUser } from '../model/LoggedInUser';\r\nimport { Location, History } from \"../../node_modules/@types/history\";\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { LocationState } from '../common/component/ProtectedRoute';\r\n\r\ninterface SelectRolePageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function SelectRolePage (props: SelectRolePageProps): ReactElement {\r\n\r\n    // Variables declaration:\r\n    \r\n    return (\r\n        <Container \r\n            fluid = {true} \r\n            id = \"SelectRolePageContentContainer\" \r\n            className = \"vh-100\"\r\n        >   \r\n            {props.modalDialog}\r\n            <header>\r\n            </header>\r\n            <nav>\r\n            </nav>\r\n            <main className = \"h-100\">\r\n                <Container \r\n                    fluid = {true} \r\n                    className = \"h-100\"\r\n                >\r\n                    <Row className = {\r\n                        `h-100 \r\n                        justify-content-center \r\n                        align-items-center`\r\n                    }>\r\n                        <Card id = \"SelectRoleCard\">\r\n                            <Card.Header className = \"text-center\">\r\n                                Choose a role\r\n                            </Card.Header>\r\n                            <ListGroup variant = \"flush\">\r\n                                <ListGroup.Item>\r\n                                    Cras justo odio\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    Dapibus ac facilisis in\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    Vestibulum at eros\r\n                                </ListGroup.Item>\r\n                            </ListGroup>\r\n                        </Card>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx",["149","150","151","152","153","154","155","156","157"],"/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, {\r\n    ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, FormControl, Nav, Navbar, Row, Table\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { Link, useParams, useRouteMatch } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\nimport './ViewProfilePage.css';\r\nfunction renderUserTable(\r\n    user: User\r\n    , index: number\r\n): ReactElement {\r\n    return (\r\n        <tr key={user.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {user.firstName}\r\n            </td>\r\n            <td>\r\n                {user.lastName}\r\n            </td>\r\n            <td>\r\n                {user.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {user.dob}\r\n            </td>\r\n            <td>\r\n                {user.email}\r\n            </td>\r\n            <td>\r\n                {user.gender}\r\n            </td>\r\n            <td>\r\n                {user.job}\r\n            </td>\r\n            <td>\r\n                {user.selfDescription}\r\n            </td>\r\n            <td>\r\n                {user.accountStatus}\r\n            </td>\r\n            <td>\r\n                {user.dateCreated}\r\n            </td>\r\n            <td>\r\n                {user.lastLogin}\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\nexport function ViewProfilePage(): ReactElement {\r\n\r\n    let userAPI: UserAPI | undefined;\r\n    let param: any = useParams();\r\n    let studentID: number;\r\n    let [student, setStudent] = useState<User[]>([]);\r\n\r\n    useEffect(() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.displayStudent(param.studentID).then(\r\n            (res) => {\r\n                setStudent(res.data);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    console.log(param.studentID);\r\n\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                        <Table responsive=\"md\" hover={true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                First Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Last Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Phone Number\r\n                                            </th>\r\n                                            <th>\r\n                                                Date of birth\r\n                                            </th>\r\n                                            <th>\r\n                                                Email\r\n                                            </th>\r\n                                            <th>\r\n                                                Gender\r\n                                            </th>\r\n                                            <th>\r\n                                                Job\r\n                                            </th>\r\n                                            <th>\r\n                                                Description\r\n                                            </th>\r\n                                            <th>\r\n                                                Status\r\n                                            </th>\r\n                                            <th>\r\n                                                Date Created\r\n                                            </th>\r\n                                            <th>\r\n                                                Last Login\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {student.map(\r\n                                            (\r\n                                                user\r\n                                                , index\r\n                                            ) => renderUserTable(\r\n                                                user\r\n                                                , index\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx",["158","159"],"// Import package members section:\r\nimport React, { \r\n    ChangeEvent\r\n    , MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { \r\n    Breadcrumb\r\n    , Button\r\n    , Col\r\n    , Container\r\n    , Form\r\n    , Row\r\n    , Table \r\n} from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { NewUserAPI } from \"../../common/service/NewUserAPI\";\r\nimport { RoleAPI } from \"../../common/service/RoleAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { NewUser } from \"../../model/NewUser\";\r\nimport { Role } from \"../../model/Role\";\r\n\r\nfunction renderRoleDropdownList (role: Role): ReactElement {\r\n    return (\r\n        <option key = {role.roleID}>\r\n            {role.roleName}\r\n        </option>\r\n    );\r\n}\r\n\r\nfunction renderRoleListSection (role: Role): ReactElement {\r\n    return (\r\n        <span key = {role.roleID}>\r\n            {role.roleName},&nbsp;\r\n        </span>\r\n    );\r\n}\r\n\r\nfunction renderNewUserTable (\r\n        newUser: NewUser\r\n        , index: number\r\n        , handleAcceptRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void> \r\n        , handleRejectRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n): ReactElement {\r\n    return (\r\n        <tr key = {newUser.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {`${newUser.firstName} ${newUser.lastName}`}\r\n            </td>\r\n            <td>\r\n                {newUser.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {newUser.email}\r\n            </td>\r\n            <td>\r\n                {newUser.userName}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {newUser.userID}\r\n                    onClick = {handleAcceptRequest}\r\n                >\r\n                    Accept\r\n                </Button>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {newUser.userID}\r\n                    onClick = {handleRejectRequest}\r\n                >\r\n                    Reject\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface CreateAccountPageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function CreateAccountPage (\r\n    props: CreateAccountPageProps\r\n): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [newUserHolder, setNewUserHolder] = useState<NewUser[]> ([]);\r\n    let newUserAPI: NewUserAPI;\r\n    let typeGuardian: TypeGuard;\r\n    let [pageNumber, setPageNumber] = useState<number> (0);\r\n    let [pageSize, setPageSize] = useState<number> (10);\r\n    let [roleHolder, setRoleHolder] = useState<Role[]> ([]);\r\n    let roleAPI: RoleAPI;\r\n    let [selectedRoleName, setSelectedRoleName] = useState<string> (\"\");\r\n    let [newAccountRoleList, setNewAccountRoleList] = useState<Role[]> ([]);\r\n    let i: number | undefined; \r\n    let role: Role | undefined;\r\n    let selectedRoleArray: Role[] | undefined;\r\n    let selectedRole: Role | undefined;\r\n    let updatedNewAccountRoleList: Role[] | undefined;\r\n    let updatedRoleHolder: Role[] | undefined;\r\n    let defaultRoleSelection: Role | undefined;\r\n    let button: HTMLButtonElement | undefined;\r\n    let [userID, setUserID] = useState<number> (0);\r\n\r\n    newUserAPI = new NewUserAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    roleAPI = new RoleAPI ();\r\n    \r\n    async function handleAcceptRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        if (newAccountRoleList.length > 0){\r\n            button = event.target as HTMLButtonElement;\r\n            try {\r\n                await newUserAPI.acceptCreateAccountRequest (\r\n                        Number (button.value)\r\n                        , newAccountRoleList\r\n                );\r\n                loadNewUserTable ();\r\n            }\r\n            catch (apiError: unknown){\r\n                if (typeGuardian.isAxiosError (apiError)){\r\n                    if (typeof apiError.code === \"string\"){\r\n                        props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                        );\r\n                    }\r\n                    else {\r\n                        props.dialogController.setDialogTitle (apiError.name);\r\n                    }\r\n                    props.dialogController.setDialogBody (apiError.message);\r\n                    props.dialogController.setDialogType (\"error\");\r\n                    props.dialogController.setShowDialog (true);\r\n                }\r\n                else {\r\n                    throw new Error (\"This api error is not valid !\");\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            props.dialogController.setDialogTitle (\"Error !\");\r\n            props.dialogController.setDialogBody (\r\n                    \"Please add at least one role.\"\r\n            );\r\n            props.dialogController.setDialogType (\"error\");\r\n            props.dialogController.setShowDialog (true);\r\n        }\r\n    }\r\n\r\n    function handleRejectRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setUserID (Number (button.value));\r\n        props.dialogController.setDialogTitle (\"Confirm Rejection\");\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to reject this create account request ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function executeRequestRejection (): Promise<void> {\r\n        try {\r\n            await newUserAPI.rejectCreateAccountRequest (\r\n                    userID\r\n            );\r\n            loadNewUserTable ();\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleAddRole (){\r\n        for (i = 0; i < roleHolder.length; i++){\r\n            role = roleHolder[i];\r\n            if (role.roleName === selectedRoleName){\r\n                updatedRoleHolder = roleHolder.slice ();\r\n                selectedRoleArray = updatedRoleHolder.splice (i, 1);\r\n                setRoleHolder (updatedRoleHolder);\r\n                if (updatedRoleHolder.length > 0){\r\n                    defaultRoleSelection = updatedRoleHolder[0];\r\n                    setSelectedRoleName (defaultRoleSelection.roleName);\r\n                }\r\n                selectedRole = selectedRoleArray[0];\r\n                updatedNewAccountRoleList = newAccountRoleList.slice ();\r\n                updatedNewAccountRoleList.push (selectedRole);\r\n                setNewAccountRoleList (updatedNewAccountRoleList);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleReset (){\r\n        loadRoleDropdownList ();\r\n        updatedNewAccountRoleList = new Array<Role> ();\r\n        setNewAccountRoleList (updatedNewAccountRoleList);\r\n    }\r\n\r\n    function handleSelectedRoleChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ): void {\r\n        setSelectedRoleName (event.target.value);\r\n    }\r\n\r\n    async function loadRoleDropdownList (): Promise<void> {\r\n        try {\r\n            updatedRoleHolder = await roleAPI.getAllRole (); \r\n            setRoleHolder (updatedRoleHolder);\r\n            defaultRoleSelection = updatedRoleHolder[0];\r\n            setSelectedRoleName (defaultRoleSelection.roleName);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    async function loadNewUserTable (): Promise<void> {\r\n        try {\r\n            setNewUserHolder (await newUserAPI.getAllCreateAccountRequest (\r\n                pageNumber\r\n                , pageSize\r\n            ));\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect (\r\n        (): void => {\r\n            loadRoleDropdownList ();\r\n            loadNewUserTable ();\r\n        }\r\n        , []\r\n    );\r\n\r\n    useEffect (\r\n        (): void => {\r\n            if (props.dialogController.dialogIsConfirmed === true){\r\n                executeRequestRejection ();\r\n                props.dialogController.setDialogIsConfirmed (false); \r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/\"}}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/admin-console\"}}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Create Account Requests\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1>\r\n                                Create Account Requests\r\n                            </h1>\r\n                            <hr/>\r\n                            <Form>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\"~\"} Add role \r\n                                                for the new account:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        <Col xs = \"auto\" className = \"mr-2\">\r\n                                            <Form.Control \r\n                                                as = \"select\" \r\n                                                value = {selectedRoleName}\r\n                                                onChange = {\r\n                                                    (event) => {\r\n// eslint-disable-next-line max-len\r\n                                                        handleSelectedRoleChange (\r\n                                                            event\r\n                                                        );\r\n                                                    } \r\n                                                }\r\n                                            >\r\n                                                {roleHolder.map (\r\n                                                    (\r\n                                                            role\r\n// eslint-disable-next-line max-len\r\n                                                    ) => renderRoleDropdownList (\r\n                                                            role\r\n                                                    )  \r\n                                                )}\r\n                                            </Form.Control>\r\n                                        </Col>\r\n                                        <Button \r\n                                            variant = \"success\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleAddRole ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Add role\r\n                                        </Button>\r\n                                        <Button \r\n                                            variant = \"primary\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleReset ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Reset\r\n                                        </Button>\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\">\"} The accepted account \r\n                                                will have roles:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        {newAccountRoleList.map (\r\n                                            (\r\n                                                    role\r\n                                            ) => renderRoleListSection (\r\n                                                    role\r\n                                            )\r\n                                        )}\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Table responsive = \"md\" hover = {true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                Full Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Phone Number\r\n                                            </th>\r\n                                            <th>\r\n                                                Email\r\n                                            </th>\r\n                                            <th>\r\n                                                User Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Actions\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {newUserHolder.map (\r\n                                            (\r\n                                                    newUser\r\n                                                    , index\r\n                                            ) => renderNewUserTable (\r\n                                                    newUser\r\n                                                    , index\r\n                                                    , handleAcceptRequest\r\n                                                    , handleRejectRequest\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx",["160","161","162","163","164","165","166"],"/* eslint-disable max-len */\r\n// Import package members section:\r\nimport React, { \r\n    ChangeEvent\r\n    , MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { \r\n    Breadcrumb\r\n    , Button\r\n    , Col\r\n    , Container\r\n    , Form\r\n    , Row\r\n    , Table \r\n} from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { NewUserAPI } from \"../../common/service/NewUserAPI\";\r\nimport { RoleAPI } from \"../../common/service/RoleAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { UserAPI } from \"../../common/service/UserAPI\";\r\nimport { NewUser } from \"../../model/NewUser\";\r\nimport { Role } from \"../../model/Role\";\r\nimport { User } from \"../../model/User\";\r\n\r\nfunction renderUserTable (\r\n        user: User\r\n        , index: number\r\n        , handleDisableUser: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n        , handleEnableUser: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void>\r\n        , handleDeleteUser: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n): ReactElement {\r\n    return (\r\n        <tr key = {user.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {`${user.firstName} ${user.lastName}`}\r\n            </td>\r\n            <td>\r\n                {user.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {user.email}\r\n            </td>\r\n            <td>\r\n                {user.userName}\r\n            </td>\r\n            <td>\r\n                {user.accountStatus}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"warning\"\r\n                    type = \"button\"\r\n                    value = {user.userID}\r\n                    onClick = {handleDisableUser}\r\n                >\r\n                    Disable\r\n                </Button>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {user.userID}\r\n                    onClick = {handleEnableUser}\r\n                >\r\n                    Enable\r\n                </Button>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {user.userID}\r\n                    onClick = {handleDeleteUser}\r\n                >\r\n                    Delete\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface DisableOrDeleteAccountPageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function DisableOrDeleteAccountPage (\r\n    props: DisableOrDeleteAccountPageProps\r\n): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [userHolder, setUserHolder] = useState<User[]> ([]);\r\n    let userAPI: UserAPI;\r\n    let typeGuardian: TypeGuard;\r\n    let [pageNumber, setPageNumber] = useState<number> (0);\r\n    let [pageSize, setPageSize] = useState<number> (10);\r\n    let button: HTMLButtonElement | undefined;\r\n    let [userID, setUserID] = useState<number> (0);\r\n    let [pendingAction, setPendingAction] = useState<string> (\"\");\r\n\r\n    userAPI = new UserAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    \r\n    function handleDisableUser (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setUserID (Number (button.value));\r\n        setPendingAction (\"Disable user\");\r\n        props.dialogController.setDialogTitle (\"Confirm Disable User\");\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to disabe this user ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function handleEnableUser (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        button = event.target as HTMLButtonElement;\r\n        try {\r\n            await userAPI.enableUser (Number (button.value));\r\n            loadUserTable ();\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    async function executeUserDisablement (): Promise<void> {\r\n        try {\r\n            await userAPI.disableAnotherUser (\r\n                    userID\r\n            );\r\n            loadUserTable ();\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleDeleteUser (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setUserID (Number (button.value));\r\n        setPendingAction (\"Delete user\");\r\n        props.dialogController.setDialogTitle (\"Confirm Delete User\");\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to delete this user ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function executeUserDeletion (): Promise<void> {\r\n        try {\r\n            await userAPI.deleteAnotherUser (\r\n                    userID\r\n            );\r\n            loadUserTable ();\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    async function loadUserTable (): Promise<void> {\r\n        try {\r\n            setUserHolder (\r\n                await userAPI.getAllUserExcludingCurrentLoggedInUser (\r\n                    pageNumber\r\n                    , pageSize\r\n                )\r\n            );\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect (\r\n        (): void => {\r\n            loadUserTable ();\r\n        }\r\n        , []\r\n    );\r\n\r\n    useEffect (\r\n        (): void => {\r\n            if (props.dialogController.dialogIsConfirmed === true){\r\n                if (pendingAction === \"Disable user\"){\r\n                    executeUserDisablement ();\r\n                }\r\n                else if (pendingAction === \"Delete user\"){\r\n                    executeUserDeletion ();\r\n                }\r\n                props.dialogController.setDialogIsConfirmed (false); \r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/\"}}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/admin-console\"}}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Disable Or Delete Account\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1>\r\n                                Disable Or Delete Account\r\n                            </h1>\r\n                            <Form>\r\n                                <Form.Group>\r\n                                    \r\n                                </Form.Group>\r\n                                <Table responsive = \"md\" hover = {true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                Full Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Phone Number\r\n                                            </th>\r\n                                            <th>\r\n                                                Email\r\n                                            </th>\r\n                                            <th>\r\n                                                User Name\r\n                                            </th>\r\n                                            <th>\r\n                                                AccountStatus\r\n                                            </th>\r\n                                            <th>\r\n                                                Actions\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {userHolder.map (\r\n                                            (\r\n                                                    user\r\n                                                    , index\r\n                                            ) => renderUserTable (\r\n                                                    user\r\n                                                    , index\r\n                                                    , handleDisableUser\r\n                                                    , handleEnableUser\r\n                                                    , handleDeleteUser\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\User.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\NewUserAPI.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx",["167"],"// Import package members section:\r\nimport axios, { AxiosError, AxiosInstance, AxiosResponse } from \"axios\";\r\nimport { LoggedInUser } from \"../../model/LoggedInUser\";\r\nimport { User } from \"../../model/User\";\r\nimport { AxiosInstanceGet } from \"./AxiosInstanceGet\";\r\nimport { ErrorHandle } from \"./ErrorHandle\";\r\nimport { TypeGuard } from \"./TypeGuard\";\r\n\r\nexport class UserAPI {\r\n\r\n    // Variables declaration:\r\n    private serverResponse: AxiosResponse<unknown> | undefined;\r\n    private axiosInstance: AxiosInstance;\r\n    private axiosInstanceGetter: AxiosInstanceGet | undefined;\r\n    private typeGuardian: TypeGuard;\r\n    private loggedInUser: LoggedInUser | undefined;\r\n    private axiosError: AxiosError<unknown> | undefined;\r\n    private errorHandler: ErrorHandle;\r\n    private requestParameterHolder: URLSearchParams | undefined;\r\n    private userHolder: User[] | undefined;\r\n\r\n    public constructor (){\r\n        this.axiosInstanceGetter = new AxiosInstanceGet ();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance ();\r\n        this.errorHandler = new ErrorHandle ();\r\n        this.typeGuardian = new TypeGuard ();\r\n    }\r\n\r\n    public listUsers (): Promise<AxiosResponse> {\r\n        return axios.get(\"http://localhost:8080/users\");\r\n    }\r\n\r\n    public async getAllUserExcludingCurrentLoggedInUser (\r\n            pageNumber: number\r\n            , pageSize: number\r\n    ): Promise<User[]> {\r\n        this.requestParameterHolder = new URLSearchParams ();\r\n        this.requestParameterHolder.set (\"pageNumber\", pageNumber.toString ());\r\n        this.requestParameterHolder.set (\"pageSize\", pageSize.toString ());\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.get<unknown> (\r\n                    \"/users:excluding-logged-in-user\"\r\n                    , {params: this.requestParameterHolder}\r\n            );\r\n            if (this.typeGuardian.isUserArray (this.serverResponse.data)){\r\n                this.userHolder = this.serverResponse.data;\r\n                return Promise.resolve<User[]> (this.userHolder);\r\n            } \r\n            else {\r\n                throw new Error (\"This server response is not valid !\");\r\n            }  \r\n        }\r\n        catch (apiError: unknown){\r\n            try {\r\n                this.axiosError \r\n                    = await this.errorHandler.handleApiError (apiError); \r\n                return Promise.reject (this.axiosError);\r\n            }\r\n            catch (apiError2: unknown){\r\n                return Promise.reject ();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async disableAnotherUser (\r\n            userID: number\r\n    ): Promise<void> {\r\n        try {\r\n            await this.axiosInstance.patch<undefined> (\r\n                    `/users/${userID}:disable`\r\n            );\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            try {\r\n                this.axiosError \r\n                    = await this.errorHandler.handleApiError (apiError); \r\n                return Promise.reject (this.axiosError);\r\n            }\r\n            catch (apiError2: unknown){\r\n                return Promise.reject ();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async enableUser (\r\n            userID: number\r\n    ): Promise<void> {\r\n        try {\r\n            await this.axiosInstance.patch<undefined> (\r\n                    `/users/${userID}:enable`\r\n            );\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            try {\r\n                this.axiosError \r\n                    = await this.errorHandler.handleApiError (apiError); \r\n                return Promise.reject (this.axiosError);\r\n            }\r\n            catch (apiError2: unknown){\r\n                return Promise.reject ();\r\n            }\r\n        }\r\n    }\r\n    \r\n    public async deleteAnotherUser (\r\n            userID: number\r\n    ): Promise<void> {\r\n        try {\r\n            await this.axiosInstance.delete<undefined> (\r\n                    `/users/${userID}`\r\n            );\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            try {\r\n                this.axiosError \r\n                    = await this.errorHandler.handleApiError (apiError); \r\n                return Promise.reject (this.axiosError);\r\n            }\r\n            catch (apiError2: unknown){\r\n                return Promise.reject ();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async getCurrentLoggedInUser (\r\n            userName: string\r\n            , password: string\r\n    ): Promise<LoggedInUser> {\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.get<unknown> (\r\n                    \"/logged-in-user\"\r\n                    , {\r\n                        auth: {\r\n                            username: userName\r\n                            , password: password\r\n                        }\r\n                    }\r\n            );\r\n            if (this.typeGuardian.isLoggedInUser (this.serverResponse.data)){\r\n                this.loggedInUser = this.serverResponse.data;\r\n                return Promise.resolve<LoggedInUser> (this.loggedInUser);\r\n            } \r\n            else {\r\n                throw new Error (\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (apiError: unknown){\r\n            try {\r\n                this.axiosError \r\n                    = await this.errorHandler.handleApiError (apiError); \r\n                return Promise.reject (this.axiosError);\r\n            }\r\n            catch (apiError2: unknown){\r\n                return Promise.reject ();\r\n            }\r\n        }\r\n    }\r\n    \r\n    public async registerUser (user: User): Promise<AxiosResponse> {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet ();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance ();\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.post (\r\n                \"/users\"\r\n                , user\r\n            );\r\n            this.typeGuardian = new TypeGuard ();\r\n            if (this.typeGuardian.isAxiosResponse (this.serverResponse)){\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error (\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error){\r\n            console.error (error.toJSON ());\r\n            return Promise.reject<AxiosResponse> (error);\r\n        }   \r\n    }  \r\n    \r\n    public async deleteUser (userID: string): Promise<AxiosResponse> {\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.delete (\r\n                `/users/${userID}`\r\n            );\r\n            this.typeGuardian = new TypeGuard ();\r\n            if (this.typeGuardian.isAxiosResponse (this.serverResponse)){\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error (\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error){\r\n            console.error (error.toJSON ());\r\n            return Promise.reject<AxiosResponse> (error);\r\n        }\r\n    }\r\n\r\n    public async update (user: User, userID: number): Promise<AxiosResponse> {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet ();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance ();\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.put (\r\n                `/editInfo/${userID}`\r\n                , user\r\n            );\r\n            this.typeGuardian = new TypeGuard ();\r\n            if (this.typeGuardian.isAxiosResponse (this.serverResponse)){\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error (\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error){\r\n            console.error (error.toJSON ());\r\n            return Promise.reject<AxiosResponse> (error);\r\n        }   \r\n    }\r\n    \r\n    public async displayStudent (userID: number): Promise<AxiosResponse> {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet ();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance ();\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.get (\r\n                `/users`\r\n            );\r\n            this.typeGuardian = new TypeGuard ();\r\n            if (this.typeGuardian.isAxiosResponse (this.serverResponse)){\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error (\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error){\r\n            console.error (error.toJSON ());\r\n            return Promise.reject<AxiosResponse> (error);\r\n        }   \r\n    }\r\n    \r\n    public updateStudents (\r\n            user: User, userID: number\r\n    ): Promise<AxiosResponse<unknown>> {\r\n        try {\r\n            return axios.put(`http://localhost:8080/editInfo/${userID}`, user);}\r\n        catch (error){\r\n            console.error (error.toJSON ());\r\n            return Promise.reject<AxiosResponse> (error);\r\n        }\r\n    }\r\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\NewUser.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx",[],["168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184"],{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","replacedBy":"216"},{"ruleId":"217","replacedBy":"218"},{"ruleId":"219","severity":1,"message":"220","line":17,"column":16,"nodeType":"221","messageId":"222","endLine":17,"endColumn":19,"suggestions":"223"},{"ruleId":"224","severity":1,"message":"225","line":18,"column":10,"nodeType":"226","messageId":"227","endLine":18,"endColumn":17},{"ruleId":"224","severity":1,"message":"228","line":18,"column":19,"nodeType":"226","messageId":"227","endLine":18,"endColumn":29},{"ruleId":"224","severity":1,"message":"229","line":3,"column":5,"nodeType":"226","messageId":"227","endLine":3,"endColumn":16},{"ruleId":"224","severity":1,"message":"230","line":4,"column":7,"nodeType":"226","messageId":"227","endLine":4,"endColumn":15},{"ruleId":"224","severity":1,"message":"231","line":4,"column":17,"nodeType":"226","messageId":"227","endLine":4,"endColumn":26},{"ruleId":"224","severity":1,"message":"232","line":6,"column":7,"nodeType":"226","messageId":"227","endLine":6,"endColumn":21},{"ruleId":"224","severity":1,"message":"233","line":6,"column":23,"nodeType":"226","messageId":"227","endLine":6,"endColumn":31},{"ruleId":"224","severity":1,"message":"234","line":9,"column":5,"nodeType":"226","messageId":"227","endLine":9,"endColumn":11},{"ruleId":"224","severity":1,"message":"235","line":9,"column":30,"nodeType":"226","messageId":"227","endLine":9,"endColumn":34},{"ruleId":"224","severity":1,"message":"236","line":12,"column":10,"nodeType":"226","messageId":"227","endLine":12,"endColumn":19},{"ruleId":"224","severity":1,"message":"237","line":14,"column":10,"nodeType":"226","messageId":"227","endLine":14,"endColumn":17},{"ruleId":"224","severity":1,"message":"238","line":15,"column":10,"nodeType":"226","messageId":"227","endLine":15,"endColumn":22},{"ruleId":"224","severity":1,"message":"239","line":16,"column":10,"nodeType":"226","messageId":"227","endLine":16,"endColumn":18},{"ruleId":"224","severity":1,"message":"240","line":16,"column":20,"nodeType":"226","messageId":"227","endLine":16,"endColumn":27},{"ruleId":"224","severity":1,"message":"241","line":17,"column":10,"nodeType":"226","messageId":"227","endLine":17,"endColumn":20},{"ruleId":"224","severity":1,"message":"242","line":17,"column":22,"nodeType":"226","messageId":"227","endLine":17,"endColumn":33},{"ruleId":"224","severity":1,"message":"243","line":18,"column":10,"nodeType":"226","messageId":"227","endLine":18,"endColumn":23},{"ruleId":"224","severity":1,"message":"234","line":6,"column":5,"nodeType":"226","messageId":"227","endLine":6,"endColumn":11},{"ruleId":"224","severity":1,"message":"235","line":6,"column":29,"nodeType":"226","messageId":"227","endLine":6,"endColumn":33},{"ruleId":"224","severity":1,"message":"244","line":6,"column":35,"nodeType":"226","messageId":"227","endLine":6,"endColumn":46},{"ruleId":"224","severity":1,"message":"245","line":6,"column":48,"nodeType":"226","messageId":"227","endLine":6,"endColumn":51},{"ruleId":"224","severity":1,"message":"246","line":6,"column":53,"nodeType":"226","messageId":"227","endLine":6,"endColumn":59},{"ruleId":"224","severity":1,"message":"247","line":9,"column":10,"nodeType":"226","messageId":"227","endLine":9,"endColumn":14},{"ruleId":"224","severity":1,"message":"248","line":9,"column":27,"nodeType":"226","messageId":"227","endLine":9,"endColumn":40},{"ruleId":"224","severity":1,"message":"249","line":10,"column":16,"nodeType":"226","messageId":"227","endLine":10,"endColumn":34},{"ruleId":"224","severity":1,"message":"250","line":61,"column":9,"nodeType":"226","messageId":"227","endLine":61,"endColumn":26},{"ruleId":"224","severity":1,"message":"251","line":104,"column":22,"nodeType":"226","messageId":"227","endLine":104,"endColumn":35},{"ruleId":"224","severity":1,"message":"252","line":105,"column":20,"nodeType":"226","messageId":"227","endLine":105,"endColumn":31},{"ruleId":"224","severity":1,"message":"229","line":4,"column":5,"nodeType":"226","messageId":"227","endLine":4,"endColumn":16},{"ruleId":"224","severity":1,"message":"253","line":21,"column":10,"nodeType":"226","messageId":"227","endLine":21,"endColumn":20},{"ruleId":"224","severity":1,"message":"254","line":22,"column":10,"nodeType":"226","messageId":"227","endLine":22,"endColumn":17},{"ruleId":"224","severity":1,"message":"255","line":25,"column":10,"nodeType":"226","messageId":"227","endLine":25,"endColumn":17},{"ruleId":"224","severity":1,"message":"256","line":26,"column":10,"nodeType":"226","messageId":"227","endLine":26,"endColumn":14},{"ruleId":"224","severity":1,"message":"251","line":105,"column":22,"nodeType":"226","messageId":"227","endLine":105,"endColumn":35},{"ruleId":"224","severity":1,"message":"252","line":106,"column":20,"nodeType":"226","messageId":"227","endLine":106,"endColumn":31},{"ruleId":"224","severity":1,"message":"257","line":225,"column":34,"nodeType":"226","messageId":"227","endLine":225,"endColumn":48},{"ruleId":"185","replacedBy":"258"},{"ruleId":"187","replacedBy":"259"},{"ruleId":"189","replacedBy":"260"},{"ruleId":"191","replacedBy":"261"},{"ruleId":"193","replacedBy":"262"},{"ruleId":"195","replacedBy":"263"},{"ruleId":"197","replacedBy":"264"},{"ruleId":"199","replacedBy":"265"},{"ruleId":"201","replacedBy":"266"},{"ruleId":"203","replacedBy":"267"},{"ruleId":"205","replacedBy":"268"},{"ruleId":"207","replacedBy":"269"},{"ruleId":"209","replacedBy":"270"},{"ruleId":"211","replacedBy":"271"},{"ruleId":"213","replacedBy":"272"},{"ruleId":"215","replacedBy":"273"},{"ruleId":"217","replacedBy":"274"},"callback-return",[],"global-require",[],"handle-callback-err",[],"id-blacklist",["275"],"lines-around-directive",["276"],"no-buffer-constructor",[],"no-catch-shadow",["277"],"no-mixed-requires",[],"no-native-reassign",["278"],"no-negated-in-lhs",["279"],"no-new-require",[],"no-path-concat",[],"no-process-env",[],"no-process-exit",[],"no-restricted-modules",[],"no-sync",[],"prefer-reflect",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["280","281"],"@typescript-eslint/no-unused-vars","'student' is assigned a value but never used.","Identifier","unusedVar","'setStudent' is assigned a value but never used.","'ChangeEvent' is defined but never used.","'Dispatch' is defined but never used.","'FormEvent' is defined but never used.","'SetStateAction' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'TypeGuard' is defined but never used.","'UserAPI' is defined but never used.","'LoggedInUser' is defined but never used.","'Location' is defined but never used.","'History' is defined but never used.","'useHistory' is defined but never used.","'useLocation' is defined but never used.","'LocationState' is defined but never used.","'FormControl' is defined but never used.","'Nav' is defined but never used.","'Navbar' is defined but never used.","'Link' is defined but never used.","'useRouteMatch' is defined but never used.","'UserIndexSignature' is defined but never used.","'studentID' is defined but never used.","'setPageNumber' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","'NewUserAPI' is defined but never used.","'RoleAPI' is defined but never used.","'NewUser' is defined but never used.","'Role' is defined but never used.","'userID' is defined but never used.",[],[],[],["275"],["276"],[],["277"],[],["278"],["279"],[],[],[],[],[],[],[],"id-denylist","padding-line-between-statements","no-shadow","no-global-assign","no-unsafe-negation",{"messageId":"282","fix":"283","desc":"284"},{"messageId":"285","fix":"286","desc":"287"},"suggestUnknown",{"range":"288","text":"289"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"288","text":"290"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[638,641],"unknown","never"]
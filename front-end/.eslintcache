[{"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\index.tsx":"1","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\reportWebVitals.ts":"2","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\App.tsx":"3","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx":"4","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\HomePage.tsx":"5","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\LogInPage.tsx":"6","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx":"7","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx":"8","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx":"9","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx":"10","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx":"11","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx":"12","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx":"13","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx":"14","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx":"15","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx":"16","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx":"17","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx":"18","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\User.tsx":"19","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx":"20","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\NewUser.tsx":"21","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\NewUserAPI.tsx":"22","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx":"23","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx":"24","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx":"25"},{"size":664,"mtime":1612709685653,"results":"26","hashOfConfig":"27"},{"size":446,"mtime":1614348837756,"results":"28","hashOfConfig":"27"},{"size":6169,"mtime":1614611099887,"results":"29","hashOfConfig":"27"},{"size":12981,"mtime":1614611400216,"results":"30","hashOfConfig":"27"},{"size":3794,"mtime":1614348837675,"results":"31","hashOfConfig":"27"},{"size":8454,"mtime":1614348837683,"results":"32","hashOfConfig":"27"},{"size":2565,"mtime":1614348837710,"results":"33","hashOfConfig":"27"},{"size":12783,"mtime":1614348837841,"results":"34","hashOfConfig":"27"},{"size":543,"mtime":1614348837653,"results":"35","hashOfConfig":"27"},{"size":5028,"mtime":1614429670860,"results":"36","hashOfConfig":"27"},{"size":18779,"mtime":1614348837748,"results":"37","hashOfConfig":"27"},{"size":13087,"mtime":1614348837750,"results":"38","hashOfConfig":"27"},{"size":1414,"mtime":1614348837630,"results":"39","hashOfConfig":"27"},{"size":3306,"mtime":1614348837631,"results":"40","hashOfConfig":"27"},{"size":5163,"mtime":1614348837634,"results":"41","hashOfConfig":"27"},{"size":3786,"mtime":1614348837632,"results":"42","hashOfConfig":"27"},{"size":3162,"mtime":1614348837643,"results":"43","hashOfConfig":"27"},{"size":1269,"mtime":1614348837639,"results":"44","hashOfConfig":"27"},{"size":1961,"mtime":1614610483081,"results":"45","hashOfConfig":"27"},{"size":9200,"mtime":1614429670859,"results":"46","hashOfConfig":"27"},{"size":1073,"mtime":1614348837671,"results":"47","hashOfConfig":"27"},{"size":4536,"mtime":1614348837640,"results":"48","hashOfConfig":"27"},{"size":1589,"mtime":1614348837641,"results":"49","hashOfConfig":"27"},{"size":553,"mtime":1614348837637,"results":"50","hashOfConfig":"27"},{"size":1944,"mtime":1614348837638,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1kjsuhq",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\index.tsx",[],["108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124"],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\reportWebVitals.ts",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\App.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx",["125","126","127"],"import React, {\r\n    ChangeEvent, FormEvent, ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, Row\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { useParams } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\n\r\nexport function EditStudentInfo (): ReactElement {\r\n    let [user, setUser] = useState<User>(new User());\r\n    let updatedUser: User | undefined;\r\n    let inputField:\r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let param: any = useParams();\r\n    let [student, setStudent] = useState<User>(new User());\r\n    \r\n    useEffect (() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.displayStudent(param.studentID).then(\r\n            (res) => {\r\n                setUser(res.data);\r\n                // console.log(student.userName);\r\n            }\r\n    );\r\n    }, []);\r\n\r\n    \r\n    function handleUserChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ){\r\n        updatedUser = new User(user);\r\n        inputField = event.target;\r\n        updatedUser[\r\n            inputField.name as keyof UserIndexSignature\r\n        ] = inputField.value;\r\n        setUser(updatedUser);\r\n    }\r\n\r\n    function updateStudent (event: FormEvent<HTMLFormElement>, userID: number) {\r\n        event.preventDefault();\r\n        userAPI = new UserAPI();\r\n        userAPI.update(user, userID);\r\n        console.log(userID);\r\n    }\r\n \r\n    console.log(param.studentID);\r\n    // console.log(student.userName);\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <h1>{param.studentID}</h1>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form\r\n                                noValidate={false}\r\n                                onSubmit={(event) => {\r\n                                    updateStudent(event, param.studentID);\r\n                                }}\r\n                            >\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        User Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"userName\"\r\n                                        id=\"userName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        First Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"firstName\"\r\n                                        id=\"firstName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        value={user.firstName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Middle Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"middleName\"\r\n                                        id=\"middleName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        value={user.middleName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Last Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"lastName\"\r\n                                        id=\"lastName\"\r\n                                        pattern=\"^[a-z0-9_-]{1,15}$\"\r\n                                        value={user.lastName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Email:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"email\"\r\n                                        id=\"email\"\r\n                                        value={user.email}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        DOB:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"dob\"\r\n                                        id=\"dob\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Phone:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"phoneNumber\"\r\n                                        id=\"phoneNumber\"\r\n                                        value={user.phoneNumber}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Gender\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"gender\"\r\n                                        id=\"gender\"\r\n                                        value={user.gender}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Job:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"job\"\r\n                                        id=\"job\"\r\n                                        value={user.job}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Password:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        autoComplete=\"off\"\r\n                                        autoFocus={false}\r\n                                        name=\"password\"\r\n                                        id=\"password\"\r\n                                        placeholder=\"Your new password\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Account Status\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"accountStatus\"\r\n                                        id=\"accountStatus\"\r\n                                        value={user.accountStatus}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button\r\n                                    variant=\"success\"\r\n                                    type=\"submit\"\r\n                                    block = {true}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\HomePage.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\LogInPage.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx",["128","129","130","131","132","133","134","135","136","137","138","139","140","141","142"],"// Import package members section:\r\nimport React, { \r\n    ChangeEvent\r\n    , Dispatch, FormEvent\r\n    , ReactElement\r\n    , SetStateAction, useState \r\n} from 'react';\r\nimport { \r\n    Button, Card, Container, Form, ListGroup, Row \r\n} from 'react-bootstrap';\r\nimport './SelectRolePage.css';\r\nimport { TypeGuard } from '../common/service/TypeGuard';\r\nimport { DialogControl } from '../common/component/ModalDialog';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { LoggedInUser } from '../model/LoggedInUser';\r\nimport { Location, History } from \"../../node_modules/@types/history\";\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { LocationState } from '../common/component/ProtectedRoute';\r\n\r\ninterface SelectRolePageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function SelectRolePage (props: SelectRolePageProps): ReactElement {\r\n\r\n    // Variables declaration:\r\n    \r\n    return (\r\n        <Container \r\n            fluid = {true} \r\n            id = \"SelectRolePageContentContainer\" \r\n            className = \"vh-100\"\r\n        >   \r\n            {props.modalDialog}\r\n            <header>\r\n            </header>\r\n            <nav>\r\n            </nav>\r\n            <main className = \"h-100\">\r\n                <Container \r\n                    fluid = {true} \r\n                    className = \"h-100\"\r\n                >\r\n                    <Row className = {\r\n                        `h-100 \r\n                        justify-content-center \r\n                        align-items-center`\r\n                    }>\r\n                        <Card id = \"SelectRoleCard\">\r\n                            <Card.Header className = \"text-center\">\r\n                                Choose a role\r\n                            </Card.Header>\r\n                            <ListGroup variant = \"flush\">\r\n                                <ListGroup.Item>\r\n                                    Cras justo odio\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    Dapibus ac facilisis in\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    Vestibulum at eros\r\n                                </ListGroup.Item>\r\n                            </ListGroup>\r\n                        </Card>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx",["143","144"],"// Import package members section:\r\nimport React, { \r\n    ChangeEvent\r\n    , MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { \r\n    Breadcrumb\r\n    , Button\r\n    , Col\r\n    , Container\r\n    , Form\r\n    , Row\r\n    , Table \r\n} from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { NewUserAPI } from \"../../common/service/NewUserAPI\";\r\nimport { RoleAPI } from \"../../common/service/RoleAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { NewUser } from \"../../model/NewUser\";\r\nimport { Role } from \"../../model/Role\";\r\n\r\nfunction renderRoleDropdownList (role: Role): ReactElement {\r\n    return (\r\n        <option key = {role.roleID}>\r\n            {role.roleName}\r\n        </option>\r\n    );\r\n}\r\n\r\nfunction renderRoleListSection (role: Role): ReactElement {\r\n    return (\r\n        <span key = {role.roleID}>\r\n            {role.roleName},&nbsp;\r\n        </span>\r\n    );\r\n}\r\n\r\nfunction renderNewUserTable (\r\n        newUser: NewUser\r\n        , index: number\r\n        , handleAcceptRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void> \r\n        , handleRejectRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n): ReactElement {\r\n    return (\r\n        <tr key = {newUser.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {`${newUser.firstName} ${newUser.lastName}`}\r\n            </td>\r\n            <td>\r\n                {newUser.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {newUser.email}\r\n            </td>\r\n            <td>\r\n                {newUser.userName}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {newUser.userID}\r\n                    onClick = {handleAcceptRequest}\r\n                >\r\n                    Accept\r\n                </Button>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {newUser.userID}\r\n                    onClick = {handleRejectRequest}\r\n                >\r\n                    Reject\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface CreateAccountPageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function CreateAccountPage (\r\n    props: CreateAccountPageProps\r\n): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [newUserHolder, setNewUserHolder] = useState<NewUser[]> ([]);\r\n    let newUserAPI: NewUserAPI;\r\n    let typeGuardian: TypeGuard;\r\n    let [pageNumber, setPageNumber] = useState<number> (0);\r\n    let [pageSize, setPageSize] = useState<number> (10);\r\n    let [roleHolder, setRoleHolder] = useState<Role[]> ([]);\r\n    let roleAPI: RoleAPI;\r\n    let [selectedRoleName, setSelectedRoleName] = useState<string> (\"\");\r\n    let [newAccountRoleList, setNewAccountRoleList] = useState<Role[]> ([]);\r\n    let i: number | undefined; \r\n    let role: Role | undefined;\r\n    let selectedRoleArray: Role[] | undefined;\r\n    let selectedRole: Role | undefined;\r\n    let updatedNewAccountRoleList: Role[] | undefined;\r\n    let updatedRoleHolder: Role[] | undefined;\r\n    let defaultRoleSelection: Role | undefined;\r\n    let button: HTMLButtonElement | undefined;\r\n    let [userID, setUserID] = useState<number> (0);\r\n\r\n    newUserAPI = new NewUserAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    roleAPI = new RoleAPI ();\r\n    \r\n    async function handleAcceptRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        if (newAccountRoleList.length > 0){\r\n            button = event.target as HTMLButtonElement;\r\n            try {\r\n                await newUserAPI.acceptCreateAccountRequest (\r\n                        Number (button.value)\r\n                        , newAccountRoleList\r\n                );\r\n                loadNewUserTable ();\r\n            }\r\n            catch (apiError: unknown){\r\n                if (typeGuardian.isAxiosError (apiError)){\r\n                    if (typeof apiError.code === \"string\"){\r\n                        props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                        );\r\n                    }\r\n                    else {\r\n                        props.dialogController.setDialogTitle (apiError.name);\r\n                    }\r\n                    props.dialogController.setDialogBody (apiError.message);\r\n                    props.dialogController.setDialogType (\"error\");\r\n                    props.dialogController.setShowDialog (true);\r\n                }\r\n                else {\r\n                    throw new Error (\"This api error is not valid !\");\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            props.dialogController.setDialogTitle (\"Error !\");\r\n            props.dialogController.setDialogBody (\r\n                    \"Please add at least one role.\"\r\n            );\r\n            props.dialogController.setDialogType (\"error\");\r\n            props.dialogController.setShowDialog (true);\r\n        }\r\n    }\r\n\r\n    function handleRejectRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setUserID (Number (button.value));\r\n        props.dialogController.setDialogTitle (\"Confirm Rejection\");\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to reject this create account request ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function executeRequestRejection (): Promise<void> {\r\n        try {\r\n            await newUserAPI.rejectCreateAccountRequest (\r\n                    userID\r\n            );\r\n            loadNewUserTable ();\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleAddRole (){\r\n        for (i = 0; i < roleHolder.length; i++){\r\n            role = roleHolder[i];\r\n            if (role.roleName === selectedRoleName){\r\n                updatedRoleHolder = roleHolder.slice ();\r\n                selectedRoleArray = updatedRoleHolder.splice (i, 1);\r\n                setRoleHolder (updatedRoleHolder);\r\n                if (updatedRoleHolder.length > 0){\r\n                    defaultRoleSelection = updatedRoleHolder[0];\r\n                    setSelectedRoleName (defaultRoleSelection.roleName);\r\n                }\r\n                selectedRole = selectedRoleArray[0];\r\n                updatedNewAccountRoleList = newAccountRoleList.slice ();\r\n                updatedNewAccountRoleList.push (selectedRole);\r\n                setNewAccountRoleList (updatedNewAccountRoleList);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleReset (){\r\n        loadRoleDropdownList ();\r\n        updatedNewAccountRoleList = new Array<Role> ();\r\n        setNewAccountRoleList (updatedNewAccountRoleList);\r\n    }\r\n\r\n    function handleSelectedRoleChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ): void {\r\n        setSelectedRoleName (event.target.value);\r\n    }\r\n\r\n    async function loadRoleDropdownList (): Promise<void> {\r\n        try {\r\n            updatedRoleHolder = await roleAPI.getAllRole (); \r\n            setRoleHolder (updatedRoleHolder);\r\n            defaultRoleSelection = updatedRoleHolder[0];\r\n            setSelectedRoleName (defaultRoleSelection.roleName);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    async function loadNewUserTable (): Promise<void> {\r\n        try {\r\n            setNewUserHolder (await newUserAPI.getAllCreateAccountRequest (\r\n                pageNumber\r\n                , pageSize\r\n            ));\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect (\r\n        (): void => {\r\n            loadRoleDropdownList ();\r\n            loadNewUserTable ();\r\n        }\r\n        , []\r\n    );\r\n\r\n    useEffect (\r\n        (): void => {\r\n            if (props.dialogController.dialogIsConfirmed === true){\r\n                executeRequestRejection ();\r\n                props.dialogController.setDialogIsConfirmed (false); \r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/\"}}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/admin-console\"}}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Create Account Requests\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1>\r\n                                Create Account Requests\r\n                            </h1>\r\n                            <hr/>\r\n                            <Form>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\"~\"} Add role \r\n                                                for the new account:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        <Col xs = \"auto\" className = \"mr-2\">\r\n                                            <Form.Control \r\n                                                as = \"select\" \r\n                                                value = {selectedRoleName}\r\n                                                onChange = {\r\n                                                    (event) => {\r\n// eslint-disable-next-line max-len\r\n                                                        handleSelectedRoleChange (\r\n                                                            event\r\n                                                        );\r\n                                                    } \r\n                                                }\r\n                                            >\r\n                                                {roleHolder.map (\r\n                                                    (\r\n                                                            role\r\n// eslint-disable-next-line max-len\r\n                                                    ) => renderRoleDropdownList (\r\n                                                            role\r\n                                                    )  \r\n                                                )}\r\n                                            </Form.Control>\r\n                                        </Col>\r\n                                        <Button \r\n                                            variant = \"success\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleAddRole ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Add role\r\n                                        </Button>\r\n                                        <Button \r\n                                            variant = \"primary\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleReset ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Reset\r\n                                        </Button>\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\">\"} The accepted account \r\n                                                will have roles:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        {newAccountRoleList.map (\r\n                                            (\r\n                                                    role\r\n                                            ) => renderRoleListSection (\r\n                                                    role\r\n                                            )\r\n                                        )}\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Table responsive = \"md\" hover = {true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                Full Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Phone Number\r\n                                            </th>\r\n                                            <th>\r\n                                                Email\r\n                                            </th>\r\n                                            <th>\r\n                                                User Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Actions\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {newUserHolder.map (\r\n                                            (\r\n                                                    newUser\r\n                                                    , index\r\n                                            ) => renderNewUserTable (\r\n                                                    newUser\r\n                                                    , index\r\n                                                    , handleAcceptRequest\r\n                                                    , handleRejectRequest\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx",["145","146","147","148","149","150","151"],"/* eslint-disable max-len */\r\n// Import package members section:\r\nimport React, { \r\n    ChangeEvent\r\n    , MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { \r\n    Breadcrumb\r\n    , Button\r\n    , Col\r\n    , Container\r\n    , Form\r\n    , Row\r\n    , Table \r\n} from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { NewUserAPI } from \"../../common/service/NewUserAPI\";\r\nimport { RoleAPI } from \"../../common/service/RoleAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { UserAPI } from \"../../common/service/UserAPI\";\r\nimport { NewUser } from \"../../model/NewUser\";\r\nimport { Role } from \"../../model/Role\";\r\nimport { User } from \"../../model/User\";\r\n\r\nfunction renderUserTable (\r\n        user: User\r\n        , index: number\r\n        , handleDisableUser: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n        , handleEnableUser: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void>\r\n        , handleDeleteUser: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n): ReactElement {\r\n    return (\r\n        <tr key = {user.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {`${user.firstName} ${user.lastName}`}\r\n            </td>\r\n            <td>\r\n                {user.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {user.email}\r\n            </td>\r\n            <td>\r\n                {user.userName}\r\n            </td>\r\n            <td>\r\n                {user.accountStatus}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"warning\"\r\n                    type = \"button\"\r\n                    value = {user.userID}\r\n                    onClick = {handleDisableUser}\r\n                >\r\n                    Disable\r\n                </Button>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {user.userID}\r\n                    onClick = {handleEnableUser}\r\n                >\r\n                    Enable\r\n                </Button>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {user.userID}\r\n                    onClick = {handleDeleteUser}\r\n                >\r\n                    Delete\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface DisableOrDeleteAccountPageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function DisableOrDeleteAccountPage (\r\n    props: DisableOrDeleteAccountPageProps\r\n): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [userHolder, setUserHolder] = useState<User[]> ([]);\r\n    let userAPI: UserAPI;\r\n    let typeGuardian: TypeGuard;\r\n    let [pageNumber, setPageNumber] = useState<number> (0);\r\n    let [pageSize, setPageSize] = useState<number> (10);\r\n    let button: HTMLButtonElement | undefined;\r\n    let [userID, setUserID] = useState<number> (0);\r\n    let [pendingAction, setPendingAction] = useState<string> (\"\");\r\n\r\n    userAPI = new UserAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    \r\n    function handleDisableUser (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setUserID (Number (button.value));\r\n        setPendingAction (\"Disable user\");\r\n        props.dialogController.setDialogTitle (\"Confirm Disable User\");\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to disabe this user ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function handleEnableUser (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        button = event.target as HTMLButtonElement;\r\n        try {\r\n            await userAPI.enableUser (Number (button.value));\r\n            loadUserTable ();\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    async function executeUserDisablement (): Promise<void> {\r\n        try {\r\n            await userAPI.disableAnotherUser (\r\n                    userID\r\n            );\r\n            loadUserTable ();\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleDeleteUser (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setUserID (Number (button.value));\r\n        setPendingAction (\"Delete user\");\r\n        props.dialogController.setDialogTitle (\"Confirm Delete User\");\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to delete this user ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function executeUserDeletion (): Promise<void> {\r\n        try {\r\n            await userAPI.deleteAnotherUser (\r\n                    userID\r\n            );\r\n            loadUserTable ();\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    async function loadUserTable (): Promise<void> {\r\n        try {\r\n            setUserHolder (\r\n                await userAPI.getAllUserExcludingCurrentLoggedInUser (\r\n                    pageNumber\r\n                    , pageSize\r\n                )\r\n            );\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect (\r\n        (): void => {\r\n            loadUserTable ();\r\n        }\r\n        , []\r\n    );\r\n\r\n    useEffect (\r\n        (): void => {\r\n            if (props.dialogController.dialogIsConfirmed === true){\r\n                if (pendingAction === \"Disable user\"){\r\n                    executeUserDisablement ();\r\n                }\r\n                else if (pendingAction === \"Delete user\"){\r\n                    executeUserDeletion ();\r\n                }\r\n                props.dialogController.setDialogIsConfirmed (false); \r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/\"}}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/admin-console\"}}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Disable Or Delete Account\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1>\r\n                                Disable Or Delete Account\r\n                            </h1>\r\n                            <Form>\r\n                                <Form.Group>\r\n                                    \r\n                                </Form.Group>\r\n                                <Table responsive = \"md\" hover = {true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                Full Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Phone Number\r\n                                            </th>\r\n                                            <th>\r\n                                                Email\r\n                                            </th>\r\n                                            <th>\r\n                                                User Name\r\n                                            </th>\r\n                                            <th>\r\n                                                AccountStatus\r\n                                            </th>\r\n                                            <th>\r\n                                                Actions\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {userHolder.map (\r\n                                            (\r\n                                                    user\r\n                                                    , index\r\n                                            ) => renderUserTable (\r\n                                                    user\r\n                                                    , index\r\n                                                    , handleDisableUser\r\n                                                    , handleEnableUser\r\n                                                    , handleDeleteUser\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\User.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\NewUser.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\NewUserAPI.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx",[],["152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168"],{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":17,"column":16,"nodeType":"205","messageId":"206","endLine":17,"endColumn":19,"suggestions":"207"},{"ruleId":"208","severity":1,"message":"209","line":18,"column":10,"nodeType":"210","messageId":"211","endLine":18,"endColumn":17},{"ruleId":"208","severity":1,"message":"212","line":18,"column":19,"nodeType":"210","messageId":"211","endLine":18,"endColumn":29},{"ruleId":"208","severity":1,"message":"213","line":3,"column":5,"nodeType":"210","messageId":"211","endLine":3,"endColumn":16},{"ruleId":"208","severity":1,"message":"214","line":4,"column":7,"nodeType":"210","messageId":"211","endLine":4,"endColumn":15},{"ruleId":"208","severity":1,"message":"215","line":4,"column":17,"nodeType":"210","messageId":"211","endLine":4,"endColumn":26},{"ruleId":"208","severity":1,"message":"216","line":6,"column":7,"nodeType":"210","messageId":"211","endLine":6,"endColumn":21},{"ruleId":"208","severity":1,"message":"217","line":6,"column":23,"nodeType":"210","messageId":"211","endLine":6,"endColumn":31},{"ruleId":"208","severity":1,"message":"218","line":9,"column":5,"nodeType":"210","messageId":"211","endLine":9,"endColumn":11},{"ruleId":"208","severity":1,"message":"219","line":9,"column":30,"nodeType":"210","messageId":"211","endLine":9,"endColumn":34},{"ruleId":"208","severity":1,"message":"220","line":12,"column":10,"nodeType":"210","messageId":"211","endLine":12,"endColumn":19},{"ruleId":"208","severity":1,"message":"221","line":14,"column":10,"nodeType":"210","messageId":"211","endLine":14,"endColumn":17},{"ruleId":"208","severity":1,"message":"222","line":15,"column":10,"nodeType":"210","messageId":"211","endLine":15,"endColumn":22},{"ruleId":"208","severity":1,"message":"223","line":16,"column":10,"nodeType":"210","messageId":"211","endLine":16,"endColumn":18},{"ruleId":"208","severity":1,"message":"224","line":16,"column":20,"nodeType":"210","messageId":"211","endLine":16,"endColumn":27},{"ruleId":"208","severity":1,"message":"225","line":17,"column":10,"nodeType":"210","messageId":"211","endLine":17,"endColumn":20},{"ruleId":"208","severity":1,"message":"226","line":17,"column":22,"nodeType":"210","messageId":"211","endLine":17,"endColumn":33},{"ruleId":"208","severity":1,"message":"227","line":18,"column":10,"nodeType":"210","messageId":"211","endLine":18,"endColumn":23},{"ruleId":"208","severity":1,"message":"228","line":104,"column":22,"nodeType":"210","messageId":"211","endLine":104,"endColumn":35},{"ruleId":"208","severity":1,"message":"229","line":105,"column":20,"nodeType":"210","messageId":"211","endLine":105,"endColumn":31},{"ruleId":"208","severity":1,"message":"213","line":4,"column":5,"nodeType":"210","messageId":"211","endLine":4,"endColumn":16},{"ruleId":"208","severity":1,"message":"230","line":21,"column":10,"nodeType":"210","messageId":"211","endLine":21,"endColumn":20},{"ruleId":"208","severity":1,"message":"231","line":22,"column":10,"nodeType":"210","messageId":"211","endLine":22,"endColumn":17},{"ruleId":"208","severity":1,"message":"232","line":25,"column":10,"nodeType":"210","messageId":"211","endLine":25,"endColumn":17},{"ruleId":"208","severity":1,"message":"233","line":26,"column":10,"nodeType":"210","messageId":"211","endLine":26,"endColumn":14},{"ruleId":"208","severity":1,"message":"228","line":105,"column":22,"nodeType":"210","messageId":"211","endLine":105,"endColumn":35},{"ruleId":"208","severity":1,"message":"229","line":106,"column":20,"nodeType":"210","messageId":"211","endLine":106,"endColumn":31},{"ruleId":"169","replacedBy":"234"},{"ruleId":"171","replacedBy":"235"},{"ruleId":"173","replacedBy":"236"},{"ruleId":"175","replacedBy":"237"},{"ruleId":"177","replacedBy":"238"},{"ruleId":"179","replacedBy":"239"},{"ruleId":"181","replacedBy":"240"},{"ruleId":"183","replacedBy":"241"},{"ruleId":"185","replacedBy":"242"},{"ruleId":"187","replacedBy":"243"},{"ruleId":"189","replacedBy":"244"},{"ruleId":"191","replacedBy":"245"},{"ruleId":"193","replacedBy":"246"},{"ruleId":"195","replacedBy":"247"},{"ruleId":"197","replacedBy":"248"},{"ruleId":"199","replacedBy":"249"},{"ruleId":"201","replacedBy":"250"},"callback-return",[],"global-require",[],"handle-callback-err",[],"id-blacklist",["251"],"lines-around-directive",["252"],"no-buffer-constructor",[],"no-catch-shadow",["253"],"no-mixed-requires",[],"no-native-reassign",["254"],"no-negated-in-lhs",["255"],"no-new-require",[],"no-path-concat",[],"no-process-env",[],"no-process-exit",[],"no-restricted-modules",[],"no-sync",[],"prefer-reflect",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["256","257"],"@typescript-eslint/no-unused-vars","'student' is assigned a value but never used.","Identifier","unusedVar","'setStudent' is assigned a value but never used.","'ChangeEvent' is defined but never used.","'Dispatch' is defined but never used.","'FormEvent' is defined but never used.","'SetStateAction' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'TypeGuard' is defined but never used.","'UserAPI' is defined but never used.","'LoggedInUser' is defined but never used.","'Location' is defined but never used.","'History' is defined but never used.","'useHistory' is defined but never used.","'useLocation' is defined but never used.","'LocationState' is defined but never used.","'setPageNumber' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","'NewUserAPI' is defined but never used.","'RoleAPI' is defined but never used.","'NewUser' is defined but never used.","'Role' is defined but never used.",[],[],[],["251"],["252"],[],["253"],[],["254"],["255"],[],[],[],[],[],[],[],"id-denylist","padding-line-between-statements","no-shadow","no-global-assign","no-unsafe-negation",{"messageId":"258","fix":"259","desc":"260"},{"messageId":"261","fix":"262","desc":"263"},"suggestUnknown",{"range":"264","text":"265"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"264","text":"266"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[638,641],"unknown","never"]
[{"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\index.tsx":"1","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\reportWebVitals.ts":"2","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\App.tsx":"3","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx":"4","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\HomePage.tsx":"5","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx":"6","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\LogInPage.tsx":"7","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx":"8","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx":"9","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx":"10","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx":"11","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\ManageCoursePage.tsx":"12","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx":"13","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx":"14","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx":"15","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx":"16","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx":"17","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx":"18","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\User.tsx":"19","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\RegisterForm.tsx":"20","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\RegisterFormAPI.tsx":"21","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx":"22","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\CourseAPI.tsx":"23","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\CourseTypeAPI.tsx":"24","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\CourseLevelAPI.tsx":"25","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\Course.tsx":"26","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx":"27","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx":"28","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\CourseType.tsx":"29","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\CourseLevel.tsx":"30","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\EditTeacherInfo.tsx":"31","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx":"32","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\ManageTeacherPage.tsx":"33","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\DetailPage.tsx":"34","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\select_role_page\\SelectRolePage.tsx":"35","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\teacher\\TeacherDashboardPage.tsx":"36","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\ManageStudentInCoursePage.tsx":"37","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\home_page_header\\HomePageHeader.tsx":"38","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\teacher_sidebar\\TeacherSidebar.tsx":"39"},{"size":641,"mtime":1615338438000,"results":"40","hashOfConfig":"41"},{"size":431,"mtime":1615338438000,"results":"42","hashOfConfig":"41"},{"size":9661,"mtime":1616261587799,"results":"43","hashOfConfig":"41"},{"size":519,"mtime":1615338438000,"results":"44","hashOfConfig":"41"},{"size":3721,"mtime":1615338438000,"results":"45","hashOfConfig":"41"},{"size":11715,"mtime":1615338438000,"results":"46","hashOfConfig":"41"},{"size":9052,"mtime":1616259856753,"results":"47","hashOfConfig":"41"},{"size":16309,"mtime":1616259322916,"results":"48","hashOfConfig":"41"},{"size":5508,"mtime":1616259856750,"results":"49","hashOfConfig":"41"},{"size":20741,"mtime":1616259322917,"results":"50","hashOfConfig":"41"},{"size":14103,"mtime":1616261398378,"results":"51","hashOfConfig":"41"},{"size":47181,"mtime":1616261455658,"results":"52","hashOfConfig":"41"},{"size":1714,"mtime":1616259856675,"results":"53","hashOfConfig":"41"},{"size":5256,"mtime":1616259856676,"results":"54","hashOfConfig":"41"},{"size":3949,"mtime":1616259322887,"results":"55","hashOfConfig":"41"},{"size":1278,"mtime":1616259322909,"results":"56","hashOfConfig":"41"},{"size":6371,"mtime":1616259322910,"results":"57","hashOfConfig":"41"},{"size":14820,"mtime":1616261371347,"results":"58","hashOfConfig":"41"},{"size":2054,"mtime":1616259322914,"results":"59","hashOfConfig":"41"},{"size":989,"mtime":1615338438000,"results":"60","hashOfConfig":"41"},{"size":4663,"mtime":1616259322909,"results":"61","hashOfConfig":"41"},{"size":1853,"mtime":1616259322910,"results":"62","hashOfConfig":"41"},{"size":6263,"mtime":1616261323339,"results":"63","hashOfConfig":"41"},{"size":1937,"mtime":1616259322908,"results":"64","hashOfConfig":"41"},{"size":2035,"mtime":1616259322908,"results":"65","hashOfConfig":"41"},{"size":1403,"mtime":1616259322913,"results":"66","hashOfConfig":"41"},{"size":538,"mtime":1615338438000,"results":"67","hashOfConfig":"41"},{"size":1882,"mtime":1616259322908,"results":"68","hashOfConfig":"41"},{"size":211,"mtime":1616259322914,"results":"69","hashOfConfig":"41"},{"size":381,"mtime":1616259322913,"results":"70","hashOfConfig":"41"},{"size":11771,"mtime":1616259825967,"results":"71","hashOfConfig":"41"},{"size":5805,"mtime":1616259825976,"results":"72","hashOfConfig":"41"},{"size":11395,"mtime":1615936612122,"results":"73","hashOfConfig":"74"},{"size":6725,"mtime":1616259825966,"results":"75","hashOfConfig":"41"},{"size":2608,"mtime":1616259856734,"results":"76","hashOfConfig":"41"},{"size":837,"mtime":1616259856695,"results":"77","hashOfConfig":"41"},{"size":17926,"mtime":1616259856691,"results":"78","hashOfConfig":"41"},{"size":3794,"mtime":1616259856686,"results":"79","hashOfConfig":"41"},{"size":1679,"mtime":1616259856690,"results":"80","hashOfConfig":"41"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"1xt27ae",{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"83"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"83"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"83"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"83"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"83"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"83"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"83"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},"u9os0h",{"filePath":"157","messages":"158","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"83"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"83"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"83"},"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\index.tsx",[],["172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188"],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\reportWebVitals.ts",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\App.tsx",["189"],"/* eslint-disable @typescript-eslint/no-array-constructor */\r\n// Import package members section:\r\nimport React, { ReactElement, useState } from 'react';\r\nimport { Route, Switch, useHistory } from 'react-router-dom';\r\nimport './App.css';\r\nimport { PageHeader } from './common/component/PageHeader';\r\nimport { \r\n  ModalDialog\r\n  , DialogControl\r\n} from './common/component/ModalDialog';\r\nimport { \r\n  HomePageHeader \r\n} from './common/component/home_page_header/HomePageHeader';\r\nimport { \r\n  ProtectedRoute\r\n  , SecurityContext\r\n} from './common/component/ProtectedRoute';\r\nimport { LogOutAPI } from './common/service/LogOutAPI';\r\nimport { TypeGuard } from './common/service/TypeGuard';\r\nimport { LoggedInUser } from './model/LoggedInUser';\r\nimport { AdminConsolePage } from './page/admin/AdminConsolePage';\r\nimport { CreateAccountPage } from './page/admin/CreateAccountPage';\r\nimport { HomePage } from './page/HomePage';\r\nimport { EditStudentInfo } from './page/EditStudentInfo';\r\nimport { LogInPage } from './page/LogInPage';\r\nimport { SelectRolePage } from './page/select_role_page/SelectRolePage';\r\nimport { SignUpPage } from './page/SignUpPage';\r\nimport { History } from '../node_modules/@types/history';\r\nimport {\r\n  DisableOrDeleteAccountPage\r\n} from './page/admin/DisableOrDeleteAccountPage';\r\nimport { ManageCoursePage } from './page/admin/ManageCoursePage';\r\nimport { \r\n  ManageStudentInCoursePage \r\n} from './page/admin/ManageStudentInCoursePage';\r\nimport { TeacherDashboardPage } from './page/teacher/TeacherDashboardPage';\r\nimport { EditTeacherInfo } from './page/EditTeacherInfo';\r\nimport { ViewProfilePage } from './page/ViewProfilePage';\r\nimport { ManageTeacherPage } from './page/admin/ManageTeacherPage';\r\nimport { DetailPage } from './page/DetailPage';\r\n\r\nexport interface DataPage<T> {\r\n  totalRowCount: number;\r\n  pageDataHolder: T[];\r\n}\r\n\r\nexport function App(): ReactElement {\r\n\r\n  // Variables declaration:\r\n  let [showDialog, setShowDialog] = useState<boolean>(false);\r\n  let [dialogTitle, setDialogTitle] = useState<string>(\"\");\r\n  let [dialogBody, setDialogBody] = useState<string>(\"\");\r\n  let [dialogType, setDialogType] = useState<string>(\"\");\r\n  let modalDialog: ReactElement | undefined;\r\n  let [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n  let [loggedInUser, setLoggedInUser] = useState<LoggedInUser>(\r\n    new LoggedInUser()\r\n  );\r\n  let dialogController: DialogControl | undefined;\r\n  let acceptableRoleNameHolder: string[] | undefined;\r\n  let adminPageSecurity: SecurityContext | undefined;\r\n  let selectRolePageSecurity: SecurityContext | undefined;  \r\n  let logOutAPI: LogOutAPI;\r\n  let typeGuardian: TypeGuard;\r\n  let history: History<unknown>;\r\n  let [dialogIsConfirmed, setDialogIsConfirmed] = useState<boolean>(false);\r\n\r\n  logOutAPI = new LogOutAPI();\r\n  typeGuardian = new TypeGuard();\r\n  history = useHistory();\r\n\r\n  function handleCloseDialog(): void {\r\n    setShowDialog(false);\r\n  }\r\n\r\n  function handleConfirmDialog(): void {\r\n    setDialogIsConfirmed(true);\r\n    setShowDialog(false);\r\n  }\r\n\r\n  modalDialog =\r\n    <ModalDialog\r\n      showDialog={showDialog}\r\n      dialogTitle={dialogTitle}\r\n      dialogBody={dialogBody}\r\n      dialogType={dialogType}\r\n      handleCloseDialog={handleCloseDialog}\r\n      handleConfirmDialog={handleConfirmDialog}\r\n    />;\r\n  dialogController = new DialogControl(\r\n    setShowDialog\r\n    , setDialogTitle\r\n    , setDialogBody\r\n    , setDialogType\r\n    , setDialogIsConfirmed\r\n    , dialogIsConfirmed\r\n  );\r\n  acceptableRoleNameHolder = new Array (\"ROLE_ADMIN\");\r\n  adminPageSecurity = new SecurityContext (\r\n    isAuthenticated\r\n    , loggedInUser\r\n    , acceptableRoleNameHolder\r\n  );\r\n  acceptableRoleNameHolder = new Array(\r\n    \"ROLE_ADMIN\"\r\n    , \"ROLE_TEACHER\"\r\n    , \"ROLE_STUDENT\"\r\n  );\r\n  selectRolePageSecurity = new SecurityContext(\r\n    isAuthenticated\r\n    , loggedInUser\r\n    , acceptableRoleNameHolder\r\n  );\r\n\r\n  async function logOut(): Promise<void> {\r\n    try {\r\n      await logOutAPI.logOut();\r\n      history.push(\"/\");\r\n      setIsAuthenticated(false);\r\n      setLoggedInUser(new LoggedInUser());\r\n    }\r\n    catch (apiError: unknown) {\r\n      if (typeGuardian.isAxiosError(apiError)) {\r\n        if (typeof apiError.code === \"string\") {\r\n          setDialogTitle(\r\n            `${apiError.code}: ${apiError.name}`\r\n          );\r\n        }\r\n        else {\r\n          setDialogTitle(apiError.name);\r\n        }\r\n        setDialogBody(apiError.message);\r\n        setDialogType(\"error\");\r\n        setShowDialog(true);\r\n      }\r\n      else {\r\n        throw new Error(\"This api error is not valid !\");\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/editStudentInfo/:studentID\">\r\n        <EditStudentInfo />\r\n      </Route>\r\n      <Route exact = {true} path=\"/\">\r\n        <HomePageHeader />\r\n        <HomePage modalDialog = {modalDialog}/>\r\n      </Route>\r\n\r\n      <Route path=\"/sign-up-page\">\r\n        <SignUpPage\r\n          dialogController={dialogController}\r\n          modalDialog={modalDialog}\r\n        />\r\n      </Route>\r\n\r\n      <Route path=\"/log-in-page\">\r\n        <LogInPage\r\n          dialogController={dialogController}\r\n          modalDialog={modalDialog}\r\n          setIsAuthenticated={setIsAuthenticated}\r\n          setLoggedInUser={setLoggedInUser}\r\n        />\r\n      </Route>\r\n\r\n      <ProtectedRoute\r\n        path=\"/admin-console/create-account-request-page\"\r\n        securityContext={adminPageSecurity}\r\n        dialogController={dialogController}\r\n      >\r\n        <PageHeader logOut={logOut} />\r\n        <CreateAccountPage\r\n          dialogController={dialogController}\r\n          modalDialog={modalDialog}\r\n        />\r\n      </ProtectedRoute>\r\n\r\n      <ProtectedRoute\r\n        path=\"/admin-console/disable-or-delete-account-page\"\r\n        securityContext={adminPageSecurity}\r\n        dialogController={dialogController}\r\n      >\r\n        <PageHeader logOut={logOut} />\r\n        <DisableOrDeleteAccountPage\r\n          dialogController={dialogController}\r\n          modalDialog={modalDialog}\r\n        />\r\n      </ProtectedRoute>\r\n\r\n      <ProtectedRoute\r\n        path=\"/admin-console/managa-teacher-page\"\r\n        securityContext={adminPageSecurity}\r\n        dialogController={dialogController}\r\n      >\r\n        <PageHeader logOut={logOut} />\r\n        <DisableOrDeleteAccountPage\r\n          dialogController={dialogController}\r\n          modalDialog={modalDialog}\r\n        />\r\n      </ProtectedRoute>\r\n\r\n      <ProtectedRoute\r\n        path=\"/admin-console/manage-course-page\"\r\n        securityContext={adminPageSecurity}\r\n        dialogController={dialogController}\r\n      >\r\n        <PageHeader logOut={logOut} />\r\n        <ManageCoursePage\r\n          dialogController={dialogController}\r\n          modalDialog={modalDialog}\r\n        />\r\n      </ProtectedRoute>\r\n\r\n      <Route path=\"/admin-console\">\r\n        <PageHeader logOut={logOut} />\r\n        <AdminConsolePage modalDialog={modalDialog} />\r\n      </Route>\r\n\r\n      <Route exact path=\"/editTeacherInfo/:teacherID\">\r\n        <EditTeacherInfo />\r\n      </Route>\r\n\r\n      <Route path=\"/user_view\">\r\n        <ViewProfilePage />\r\n      </Route>\r\n\r\n      <Route path=\"/user_detail/:studentID\">\r\n        <DetailPage />\r\n      </Route>\r\n      <ProtectedRoute \r\n        path = \"/admin-console/create-account-request-page\"\r\n        securityContext = {adminPageSecurity}\r\n        dialogController = {dialogController} \r\n      >\r\n        <PageHeader logOut = {logOut}/>\r\n        <CreateAccountPage \r\n          dialogController = {dialogController}\r\n          modalDialog = {modalDialog} \r\n        />\r\n      </ProtectedRoute>\r\n\r\n      <ProtectedRoute \r\n        path = \"/admin-console/disable-or-delete-account-page\"\r\n        securityContext = {adminPageSecurity}\r\n        dialogController = {dialogController} \r\n      >\r\n        <PageHeader logOut = {logOut}/>\r\n        <DisableOrDeleteAccountPage \r\n          dialogController = {dialogController}\r\n          modalDialog = {modalDialog} \r\n        />\r\n      </ProtectedRoute>\r\n\r\n      <ProtectedRoute \r\n        path = {\r\n          \"/admin-console/manage-course-page\"\r\n          + \"/courses/:courseID/students\"\r\n        }\r\n        securityContext = {adminPageSecurity}\r\n        dialogController = {dialogController} \r\n      >\r\n        <PageHeader logOut = {logOut}/>\r\n        <ManageStudentInCoursePage \r\n          dialogController = {dialogController}\r\n          modalDialog = {modalDialog} \r\n        />\r\n      </ProtectedRoute>\r\n      \r\n      <ProtectedRoute \r\n        path = \"/admin-console/manage-course-page\"\r\n        securityContext = {adminPageSecurity}\r\n        dialogController = {dialogController} \r\n      >\r\n        <PageHeader logOut = {logOut}/>\r\n        <ManageCoursePage \r\n          dialogController = {dialogController}\r\n          modalDialog = {modalDialog} \r\n        />\r\n      </ProtectedRoute>\r\n      \r\n      <ProtectedRoute \r\n        path = \"/admin-console\"\r\n        securityContext = {adminPageSecurity}\r\n        dialogController = {dialogController} \r\n      >\r\n        <PageHeader logOut = {logOut}/>\r\n        <AdminConsolePage modalDialog = {modalDialog}/>\r\n      </ProtectedRoute>\r\n\r\n      <ProtectedRoute\r\n        path=\"/select-role-page\"\r\n        securityContext={selectRolePageSecurity}\r\n        dialogController={dialogController}\r\n      >\r\n        <SelectRolePage\r\n          dialogController={dialogController}\r\n          modalDialog={modalDialog}\r\n        />\r\n      </ProtectedRoute>\r\n\r\n      <Route path = \"/teacher-dashboard\">\r\n        <PageHeader logOut = {logOut}/>\r\n        <TeacherDashboardPage modalDialog = {modalDialog}/>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\n","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\HomePage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx",["190","191","192"],"import React, {\n    ChangeEvent, FormEvent, ReactElement, useEffect, useState\n} from 'react';\nimport {\n    Button, Col, Container, Form, Row\n} from 'react-bootstrap';\nimport { UserAPI } from '../common/service/UserAPI';\nimport { useParams } from 'react-router-dom';\nimport { User, UserIndexSignature } from '../model/User';\n\nexport function EditStudentInfo (): ReactElement {\n    let [user, setUser] = useState<User>(new User());\n    let updatedUser: User | undefined;\n    let inputField:\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\n    let userAPI: UserAPI | undefined;\n    let param: any = useParams();\n    let [student, setStudent] = useState<User>(new User());\n    \n    useEffect (() => {\n        userAPI = new UserAPI();\n        userAPI.displayStudent(param.studentID).then(\n            (res) => {\n                setUser(res.data);\n                // console.log(student.userName);\n            }\n    );\n    }, []);\n\n    \n    function handleUserChange (\n        event: ChangeEvent<\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\n        >\n    ){\n        updatedUser = new User(user);\n        inputField = event.target;\n        updatedUser[\n            inputField.name as keyof UserIndexSignature\n        ] = inputField.value;\n        setUser(updatedUser);\n    }\n\n    function updateStudent (event: FormEvent<HTMLFormElement>, userID: number) {\n        event.preventDefault();\n        userAPI = new UserAPI();\n        userAPI.update(user, userID);\n        console.log(userID);\n    }\n \n    console.log(param.studentID);\n    // console.log(student.userName);\n    return (\n        <Container fluid={true} id=\"PageContentContainer\">\n            <Container fluid={true} id=\"PageHeaderContainer\">\n                <header>\n                </header>\n                <nav>\n                </nav>\n            </Container>\n            <main>\n                <Container id=\"PageBodyContainer\">\n                    <h1>{param.studentID}</h1>\n                    <Row>\n                        <Col>\n                            <Form\n                                noValidate={false}\n                                onSubmit={(event) => {\n                                    updateStudent(event, param.studentID);\n                                }}\n                            >\n                                <Form.Group>\n                                    <Form.Label>\n                                        User Name:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"userName\"\n                                        id=\"userName\"\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\n                                        required={true}\n                                        spellCheck={false}\n                                        value = {user.userName}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        First Name:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"firstName\"\n                                        id=\"firstName\"\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\n                                        value={user.firstName}\n                                        required={true}\n                                        spellCheck={false}\n                                        // value = {user.userName}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Last Name:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"lastName\"\n                                        id=\"lastName\"\n                                        pattern=\"^[a-z0-9_-]{1,15}$\"\n                                        value={user.lastName}\n                                        required={true}\n                                        spellCheck={false}\n                                        // value = {user.userName}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Email:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"email\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"email\"\n                                        id=\"email\"\n                                        value={user.email}\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        DOB:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"date\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"dob\"\n                                        id=\"dob\"\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Phone:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"phoneNumber\"\n                                        id=\"phoneNumber\"\n                                        value={user.phoneNumber}\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Gender\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"gender\"\n                                        id=\"gender\"\n                                        value={user.gender}\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Job:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={false}\n                                        name=\"job\"\n                                        id=\"job\"\n                                        value={user.job}\n                                        required={true}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Password:\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"password\"\n                                        autoComplete=\"off\"\n                                        autoFocus={false}\n                                        name=\"password\"\n                                        id=\"password\"\n                                        placeholder=\"Your new password\"\n                                        required={false}\n                                        spellCheck={false}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>\n                                        Account Status\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        autoComplete=\"on\"\n                                        autoFocus={true}\n                                        name=\"accountStatus\"\n                                        id=\"accountStatus\"\n                                        value={user.accountStatus}\n                                        required={false}\n                                        spellCheck={false}\n                                        // value = {user.userName}\n                                        onChange={handleUserChange}\n                                    />\n                                </Form.Group>\n                                <Button\n                                    variant=\"success\"\n                                    type=\"submit\"\n                                    block = {true}\n                                >\n                                    Save\n                                </Button>\n                            </Form>\n                        </Col>\n                    </Row>\n                </Container>\n            </main>\n            <footer>\n            </footer>\n        </Container>\n    );\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\LogInPage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx",["193","194"],"// Import package members section:\r\nimport React, { \r\n    ChangeEvent\r\n    , MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { \r\n    Breadcrumb\r\n    , Button\r\n    , Col\r\n    , Container\r\n    , Form\r\n    , Row\r\n    , Table \r\n} from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { RegisterFormAPI } from \"../../common/service/RegisterFormAPI\";\r\nimport { RoleAPI } from \"../../common/service/RoleAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { RegisterForm } from \"../../model/RegisterForm\";\r\nimport { Role } from \"../../model/Role\";\r\n\r\nfunction renderRoleDropdownList (role: Role): ReactElement {\r\n    let roleNameWithoutPrefix: string | undefined;\r\n\r\n    roleNameWithoutPrefix = role.roleName.slice (5);\r\n    return (\r\n        <option key = {role.roleID}>\r\n            {roleNameWithoutPrefix}\r\n        </option>\r\n    );\r\n}\r\n\r\nfunction renderRoleListSection (role: Role): ReactElement {\r\n    let roleNameWithoutPrefix: string | undefined;\r\n    \r\n    roleNameWithoutPrefix = role.roleName.slice (5);\r\n    return (\r\n        <span key = {role.roleID}>\r\n            {roleNameWithoutPrefix},&nbsp;\r\n        </span>\r\n    );\r\n}\r\n\r\nfunction renderRegisterFormTable (\r\n        registerForm: RegisterForm\r\n        , index: number\r\n        , handleAcceptRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void> \r\n        , handleRejectRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n): ReactElement {\r\n    return (\r\n        <tr key = {registerForm.formID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {`${\r\n                    registerForm.firstName\r\n                } ${\r\n                    registerForm.middleName\r\n                } ${\r\n                    registerForm.lastName\r\n                }`}\r\n            </td>\r\n            <td>\r\n                {registerForm.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {registerForm.email}\r\n            </td>\r\n            <td>\r\n                {registerForm.userName}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {registerForm.formID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            handleAcceptRequest (event).catch (\r\n                                    (error: unknown) => {\r\n                                        console.error (error);\r\n                                    }\r\n                            );\r\n                        }\r\n                    }\r\n                >\r\n                    Accept\r\n                </Button>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {registerForm.formID}\r\n                    onClick = {handleRejectRequest}\r\n                >\r\n                    Reject\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface CreateAccountPageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function CreateAccountPage (\r\n    props: CreateAccountPageProps\r\n): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [registerFormHolder, setRegisterFormHolder] \r\n        = useState<RegisterForm[]> ([]);\r\n    let registerFormAPI: RegisterFormAPI;\r\n    let typeGuardian: TypeGuard;\r\n    let [pageNumber, setPageNumber] = useState<number> (0);\r\n    let [pageSize, setPageSize] = useState<number> (10);\r\n    let [roleHolder, setRoleHolder] = useState<Role[]> ([]);\r\n    let roleAPI: RoleAPI;\r\n    let [selectedRoleName, setSelectedRoleName] = useState<string> (\"\");\r\n    let [newAccountRoleList, setNewAccountRoleList] = useState<Role[]> ([]);\r\n    let i: number | undefined; \r\n    let role: Role | undefined;\r\n    let selectedRoleArray: Role[] | undefined;\r\n    let selectedRole: Role | undefined;\r\n    let updatedNewAccountRoleList: Role[] | undefined;\r\n    let updatedRoleHolder: Role[] | undefined;\r\n    let defaultRoleSelection: Role | undefined;\r\n    let button: HTMLButtonElement | undefined;\r\n    let [userID, setUserID] = useState<number> (0);\r\n    let roleNameWithoutPrefix: string | undefined;\r\n\r\n    registerFormAPI = new RegisterFormAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    roleAPI = new RoleAPI ();\r\n    \r\n    async function handleAcceptRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        if (newAccountRoleList.length > 0){\r\n            button = event.target as HTMLButtonElement;\r\n            try {\r\n                await registerFormAPI.acceptCreateAccountRequest (\r\n                        Number (button.value)\r\n                        , newAccountRoleList\r\n                );\r\n                loadRegisterFormTable ();\r\n                return Promise.resolve<undefined> (undefined);\r\n            }\r\n            catch (apiError: unknown){\r\n                if (typeGuardian.isAxiosError (apiError)){\r\n                    if (typeof apiError.code === \"string\"){\r\n                        props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                        );\r\n                    }\r\n                    else {\r\n                        props.dialogController.setDialogTitle (apiError.name);\r\n                    }\r\n                    props.dialogController.setDialogBody (apiError.message);\r\n                    props.dialogController.setDialogType (\"error\");\r\n                    props.dialogController.setShowDialog (true);\r\n                }\r\n                return Promise.reject (apiError);\r\n            }\r\n        }\r\n        else {\r\n            props.dialogController.setDialogTitle (\"Error !\");\r\n            props.dialogController.setDialogBody (\r\n                    \"Please add at least one role.\"\r\n            );\r\n            props.dialogController.setDialogType (\"error\");\r\n            props.dialogController.setShowDialog (true);\r\n            return Promise.reject (\r\n                    new Error (\"Please add at least one role !\")\r\n            );\r\n        }\r\n    }\r\n\r\n    function handleRejectRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setUserID (Number (button.value));\r\n        props.dialogController.setDialogTitle (\"Confirm Rejection\");\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to reject this create account request ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function executeRequestRejection (): Promise<void> {\r\n        try {\r\n            await registerFormAPI.rejectCreateAccountRequest (\r\n                    userID\r\n            );\r\n            loadRegisterFormTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    function handleAddRole (){\r\n        for (i = 0; i < roleHolder.length; i++){\r\n            role = roleHolder[i];\r\n            if (role.roleName === `ROLE_${selectedRoleName}`){\r\n                updatedRoleHolder = roleHolder.slice ();\r\n                selectedRoleArray = updatedRoleHolder.splice (i, 1);\r\n                setRoleHolder (updatedRoleHolder);\r\n                if (updatedRoleHolder.length > 0){\r\n                    defaultRoleSelection = updatedRoleHolder[0];\r\n                    roleNameWithoutPrefix \r\n                        = defaultRoleSelection.roleName.slice (5); \r\n                    setSelectedRoleName (roleNameWithoutPrefix);\r\n                }\r\n                selectedRole = selectedRoleArray[0];\r\n                updatedNewAccountRoleList = newAccountRoleList.slice ();\r\n                updatedNewAccountRoleList.push (selectedRole);\r\n                setNewAccountRoleList (updatedNewAccountRoleList);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleReset (){\r\n        loadRoleDropdownList ().catch (\r\n                (error: unknown) => {\r\n                    console.error (error);\r\n                }\r\n        );\r\n        updatedNewAccountRoleList = new Array<Role> ();\r\n        setNewAccountRoleList (updatedNewAccountRoleList);\r\n    }\r\n\r\n    function handleSelectedRoleChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ): void {\r\n        setSelectedRoleName (event.target.value);\r\n    }\r\n\r\n    async function loadRoleDropdownList (): Promise<void> {\r\n        try {\r\n            updatedRoleHolder = await roleAPI.getAllRole (); \r\n            setRoleHolder (updatedRoleHolder);\r\n            defaultRoleSelection = updatedRoleHolder[0];\r\n            roleNameWithoutPrefix = defaultRoleSelection.roleName.slice (5);\r\n            setSelectedRoleName (roleNameWithoutPrefix);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadRegisterFormTable (): Promise<void> {\r\n        try {\r\n            setRegisterFormHolder (\r\n                    await registerFormAPI.getAllCreateAccountRequest (\r\n                            pageNumber\r\n                            , pageSize\r\n                    )\r\n            );\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    useEffect (\r\n        (): void => {\r\n            loadRoleDropdownList ().catch (\r\n                    (error: unknown) => {\r\n                        console.error (error);\r\n                    }\r\n            );\r\n            loadRegisterFormTable ().catch (\r\n                    (error: unknown) => {\r\n                        console.error (error);\r\n                    }\r\n            );\r\n        }\r\n        , []\r\n    );\r\n\r\n    useEffect (\r\n        (): void => {\r\n            if (props.dialogController.dialogIsConfirmed === true){\r\n                executeRequestRejection ().catch (\r\n                        (error: unknown) => {\r\n                            console.error (error);\r\n                        }\r\n                );\r\n                props.dialogController.setDialogIsConfirmed (false); \r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/\"}}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/admin-console\"}}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Create Account Requests\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1>\r\n                                Create Account Requests\r\n                            </h1>\r\n                            <hr/>\r\n                            <Form>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\"~\"} Add role \r\n                                                for the new account:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        <Col xs = \"auto\" className = \"mr-2\">\r\n                                            <Form.Control \r\n                                                as = \"select\" \r\n                                                value = {selectedRoleName}\r\n                                                onChange = {\r\n                                                    (event) => {\r\n                                            // eslint-disable-next-line max-len\r\n                                                        handleSelectedRoleChange (\r\n                                                            event\r\n                                                        );\r\n                                                    } \r\n                                                }\r\n                                            >\r\n                                                {roleHolder.map (\r\n                                                    (\r\n                                                            role\r\n                                            // eslint-disable-next-line max-len\r\n                                                    ) => renderRoleDropdownList (\r\n                                                            role\r\n                                                    )  \r\n                                                )}\r\n                                            </Form.Control>\r\n                                        </Col>\r\n                                        <Button \r\n                                            variant = \"success\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleAddRole ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Add role\r\n                                        </Button>\r\n                                        <Button \r\n                                            variant = \"primary\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleReset ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Reset\r\n                                        </Button>\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\">\"} The accepted account \r\n                                                will have roles:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        {newAccountRoleList.map (\r\n                                            (\r\n                                                    role\r\n                                            ) => renderRoleListSection (\r\n                                                    role\r\n                                            )\r\n                                        )}\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Table responsive = \"md\" hover = {true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                Full Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Phone Number\r\n                                            </th>\r\n                                            <th>\r\n                                                Email\r\n                                            </th>\r\n                                            <th>\r\n                                                User Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Actions\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {registerFormHolder.map (\r\n                                            (\r\n                                                    registerForm\r\n                                                    , index\r\n                                            ) => renderRegisterFormTable (\r\n                                                    registerForm\r\n                                                    , index\r\n                                                    , handleAcceptRequest\r\n                                                    , handleRejectRequest\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\ManageCoursePage.tsx",["195"],"/* eslint-disable no-await-in-loop */\r\n// Import package members section:\r\nimport React, { \r\n    ChangeEvent,\r\n    FormEvent,\r\n    MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { \r\n    Breadcrumb\r\n    , Button\r\n    , Col\r\n    , Container\r\n    , Form\r\n    , Modal, Row\r\n    , Table \r\n} from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DataPage } from \"../../App\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { CourseAPI } from \"../../common/service/CourseAPI\";\r\nimport { CourseLevelAPI } from \"../../common/service/CourseLevelAPI\";\r\nimport { CourseTypeAPI } from \"../../common/service/CourseTypeAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { Course } from \"../../model/Course\";\r\nimport { CourseLevel } from \"../../model/CourseLevel\";\r\nimport { CourseType } from \"../../model/CourseType\";\r\n\r\nfunction renderCourseTypeDropdownList (courseType: CourseType): ReactElement {\r\n    return (\r\n        <option \r\n            key = {courseType.typeID} \r\n            value = {courseType.typeID}\r\n        >\r\n            {courseType.typeName}\r\n        </option>\r\n    );\r\n}\r\n\r\nfunction renderCourseLevelDropdownList (\r\n        courseLevel: CourseLevel\r\n): ReactElement {\r\n    return (\r\n        <option \r\n            key = {courseLevel.levelID} \r\n            value = {courseLevel.levelID}\r\n        >\r\n            {courseLevel.levelName}\r\n        </option>\r\n    );\r\n}\r\n\r\nfunction renderCourseTable (\r\n        course: Course\r\n        , index: number \r\n        , openViewDetailsDialog: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n        , openEditCourseForm: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void>\r\n        , handleDeleteCourse: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n): ReactElement {\r\n    return (\r\n        <tr key = {course.courseID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {course.courseName}\r\n            </td>\r\n            <td>\r\n                {course.courseType.typeName}\r\n            </td>\r\n            <td>\r\n                {course.courseLevel.levelName}\r\n            </td>\r\n            <td>\r\n                {course.tuitionFee}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"primary\"\r\n                    type = \"button\"\r\n                    value = {course.courseID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            openViewDetailsDialog (event);\r\n                        }\r\n                    }\r\n                >\r\n                    Details\r\n                </Button>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {course.courseID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            openEditCourseForm (event).catch (\r\n                                    (error: unknown) => {\r\n                                        console.error (error);\r\n                                    }\r\n                            );\r\n                        }\r\n                    }\r\n                >\r\n                    Edit\r\n                </Button>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {course.courseID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            handleDeleteCourse (event);\r\n                        }\r\n                    }\r\n                >\r\n                    Delete\r\n                </Button>\r\n                <Button \r\n                    variant = \"success\"\r\n                    as = {Link}\r\n                    to = {\r\n                        \"/admin-console/manage-course-page\"\r\n                        + `/courses/${course.courseID}/students`\r\n                    }\r\n                >\r\n                    Manage Student\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface ManageCoursePageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function ManageCoursePage (props: ManageCoursePageProps): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [selectedCourseTypeID, setSelectedCourseTypeID] \r\n        = useState<number> (0); \r\n    let [courseTypeHolder, setCourseTypeHolder] = useState<CourseType[]> ([]);\r\n    let updatedCourseTypeHolder: CourseType[] | undefined;\r\n    let courseTypeAPI: CourseTypeAPI;\r\n    let defaultSelectedID: number | undefined;\r\n    let typeGuardian: TypeGuard;\r\n    let updatedCourseLevelHolder: CourseLevel[] | undefined;\r\n    let courseLevelAPI: CourseLevelAPI;\r\n    let [showCreateCourseForm, setShowCreateCourseForm] \r\n        = useState<boolean> (false);\r\n    let [courseLevelHolder, setCourseLevelHolder] \r\n        = useState<CourseLevel[]> ([]);\r\n    let [selectedCourseLevelID, setSelectedCourseLevelID] \r\n        = useState<number> (0);\r\n    let htmlElement: \r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let [course, setCourse] = useState<Course> (new Course ());\r\n    let updatedCourse: Course | undefined;\r\n    let courseAPI: CourseAPI;\r\n    let courseType: CourseType | undefined;\r\n    let selectedCourseType: CourseType;\r\n    let courseLevel: CourseLevel | undefined;\r\n    let selectedCourseLevel: CourseLevel; \r\n    let i: number | undefined;\r\n    let [pageIndex] = useState<number> (0);\r\n    let [pageSize] = useState<number> (10);\r\n    let [totalRowCount, setTotalRowCount] = useState<number> (0);\r\n    let courseDataPage: DataPage<Course> | undefined;\r\n    let [courseHolder, setCourseHolder] = useState<Course[]> ([]);\r\n    let [showViewDetailDialog, setShowViewDetailDialog] \r\n        = useState<boolean> (false);\r\n    let button: HTMLButtonElement | undefined;\r\n    let courseID: number | undefined;\r\n    let courseSample: Course | undefined;\r\n    let [formattedLastModified, setFormattedLastModified] \r\n        = useState<string> (\"\");\r\n    let rawDate: Date | undefined;\r\n    let [formattedDateCreated, setFormattedDateCreated] \r\n        = useState<string> (\"\");\r\n    let [pendingCourseID, setPendingCourseID] = useState<number> (0);\r\n    let [showEditCourseForm, setShowEditCourseForm] \r\n        = useState<boolean> (false);\r\n    \r\n    courseTypeAPI = new CourseTypeAPI ();\r\n    courseLevelAPI = new CourseLevelAPI ();\r\n    courseAPI = new CourseAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    \r\n    function handleDeleteCourse (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setPendingCourseID (Number (button.value));\r\n        props.dialogController.setDialogTitle (\"Confirm Delete Course\");\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to delete this course ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function executeCourseDeletion (): Promise<void> {\r\n        try {\r\n            await courseAPI.deleteCourse (pendingCourseID);\r\n            loadCourseTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    function openViewDetailDialog (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        courseID = Number (button.value);\r\n        for (i = 0; i < courseHolder.length; i++){\r\n            courseSample = courseHolder[i];\r\n            if (courseSample.courseID === courseID){\r\n                setCourse (courseSample);\r\n                rawDate = new Date (courseSample.lastModified); \r\n                if (rawDate.toString () === new Date (0).toString ()){\r\n                    setFormattedLastModified (\"Has not been modified yet !\");\r\n                }\r\n                else {\r\n                    setFormattedLastModified (rawDate.toLocaleString ());\r\n                }\r\n                rawDate = new Date (courseSample.dateCreated);\r\n                setFormattedDateCreated (rawDate.toLocaleString ());\r\n                break;\r\n            }\r\n        }\r\n        setShowViewDetailDialog (true);\r\n    }\r\n\r\n    function closeViewDetailDialog (): void {\r\n        setShowViewDetailDialog (false);\r\n    }\r\n    \r\n    function openCreateCourseForm (): void {\r\n        setCourse (new Course ());\r\n        loadCourseTypeDropdownList ().catch (\r\n                (error: unknown) => {\r\n                    console.error (error);\r\n                }\r\n        );\r\n        setShowCreateCourseForm (true);\r\n    }\r\n\r\n    function closeCreateCourseForm (): void {\r\n        setShowCreateCourseForm (false);\r\n    }\r\n    \r\n    async function openEditCourseForm (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        button = event.target as HTMLButtonElement;\r\n        courseID = Number (button.value);\r\n        try {\r\n            for (i = 0; i < courseHolder.length; i++){\r\n                courseSample = courseHolder[i];\r\n                if (courseSample.courseID === courseID){\r\n                    setCourse (courseSample);\r\n                    await loadCourseTypeDropdownList ();\r\n                    setSelectedCourseTypeID (courseSample.courseType.typeID);\r\n                    break;\r\n                }\r\n            }\r\n            setShowEditCourseForm (true);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (error: unknown){\r\n            return Promise.reject (error);\r\n        }\r\n    }\r\n\r\n    function closeEditCourseForm (): void {\r\n        setShowEditCourseForm (false);\r\n    }\r\n\r\n    function handleChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ): void {\r\n        updatedCourse = new Course (course);\r\n        htmlElement = event.target;\r\n        switch (htmlElement.name){\r\n            default:\r\n                throw new Error (\"Unknown html element !\");\r\n\r\n            case \"courseNameField\":\r\n                updatedCourse.courseName = htmlElement.value;\r\n                break;\r\n\r\n            case \"descriptionTextarea\":\r\n                updatedCourse.description = htmlElement.value;\r\n                break;\r\n\r\n            case \"courseTypeDropdownList\":\r\n                setSelectedCourseTypeID (Number (htmlElement.value));\r\n                break;\r\n\r\n            case \"courseLevelDropdownList\":\r\n                setSelectedCourseLevelID (Number (htmlElement.value));\r\n                break;\r\n\r\n            case \"tuitionFeeField\":\r\n                updatedCourse.tuitionFee = parseFloat (htmlElement.value);\r\n                break;\r\n        }\r\n        setCourse (updatedCourse);\r\n    }\r\n\r\n    async function loadCourseTypeDropdownList (): Promise<void> {\r\n        try {\r\n            updatedCourseTypeHolder \r\n                = await courseTypeAPI.getAllCourseTypeInTheSystem (); \r\n            setCourseTypeHolder (updatedCourseTypeHolder);\r\n            defaultSelectedID = updatedCourseTypeHolder[0].typeID;\r\n            setSelectedCourseTypeID (defaultSelectedID);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadCourseLevelDropdownList (): Promise<void> {\r\n        try {\r\n            updatedCourseLevelHolder\r\n                = await courseLevelAPI.getAllCourseLevelByTypeID (\r\n                        selectedCourseTypeID\r\n                ); \r\n            setCourseLevelHolder (updatedCourseLevelHolder);\r\n            defaultSelectedID = updatedCourseLevelHolder[0].levelID;\r\n            setSelectedCourseLevelID (defaultSelectedID);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (\r\n                            apiError.name\r\n                    );\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }  \r\n    }\r\n\r\n    async function createCourse (\r\n            event: FormEvent<HTMLFormElement>\r\n    ): Promise<void> {\r\n        event.preventDefault ();\r\n        for (i = 0; i < courseTypeHolder.length; i++){\r\n            courseType = courseTypeHolder[i];\r\n            if (courseType.typeID === selectedCourseTypeID){\r\n                selectedCourseType = courseType;\r\n                break;\r\n            }\r\n        }\r\n        for (i = 0; i < courseLevelHolder.length; i++){\r\n            courseLevel = courseLevelHolder[i];\r\n            if (courseLevel.levelID === selectedCourseLevelID){\r\n                selectedCourseLevel = courseLevel;\r\n                break;\r\n            }\r\n        }\r\n        course.courseType = selectedCourseType;\r\n        course.courseLevel = selectedCourseLevel; \r\n        try {\r\n            await courseAPI.createNewCourse (course);\r\n            closeCreateCourseForm ();\r\n            props.dialogController.setDialogTitle (\"Course Created !\");\r\n            props.dialogController.setDialogBody (\r\n                `The course [${course.courseName}] \r\n                has been created successfully.`\r\n            );\r\n            props.dialogController.setDialogType (\"inform\");\r\n            props.dialogController.setShowDialog (true);\r\n            loadCourseTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function editCourse (\r\n            event: FormEvent<HTMLFormElement>\r\n    ): Promise<void> {\r\n        event.preventDefault ();\r\n        for (i = 0; i < courseTypeHolder.length; i++){\r\n            courseType = courseTypeHolder[i];\r\n            if (courseType.typeID === selectedCourseTypeID){\r\n                selectedCourseType = courseType;\r\n                break;\r\n            }\r\n        }\r\n        for (i = 0; i < courseLevelHolder.length; i++){\r\n            courseLevel = courseLevelHolder[i];\r\n            if (courseLevel.levelID === selectedCourseLevelID){\r\n                selectedCourseLevel = courseLevel;\r\n                break;\r\n            }\r\n        }\r\n        course.courseType = selectedCourseType;\r\n        course.courseLevel = selectedCourseLevel; \r\n        try {\r\n            await courseAPI.updateCourse (course);\r\n            closeEditCourseForm ();\r\n            props.dialogController.setDialogTitle (\"Course Saved !\");\r\n            props.dialogController.setDialogBody (\r\n                `The course [${course.courseName}] \r\n                has been saved successfully.`\r\n            );\r\n            props.dialogController.setDialogType (\"inform\");\r\n            props.dialogController.setShowDialog (true);\r\n            loadCourseTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadCourseTable (): Promise<void> {\r\n        try {\r\n            courseDataPage = await courseAPI.getAllCourse (\r\n                    pageIndex\r\n                    , pageSize\r\n            ); \r\n            setTotalRowCount (courseDataPage.totalRowCount);\r\n            setCourseHolder (courseDataPage.pageDataHolder);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    useEffect (\r\n        () => {\r\n            loadCourseTable ().catch (\r\n                    (error: unknown) => {\r\n                        console.error (error);\r\n                    }\r\n            );\r\n        }\r\n        , []\r\n    );\r\n\r\n    useEffect (\r\n        () => {\r\n            if (selectedCourseTypeID !== 0){\r\n                loadCourseLevelDropdownList ().catch (\r\n                        (error: unknown) => {\r\n                            console.error (error);\r\n                        }\r\n                );\r\n            }\r\n        }\r\n        , [selectedCourseTypeID]\r\n    );\r\n    \r\n    useEffect (\r\n        () => {\r\n            if (props.dialogController.dialogIsConfirmed === true){\r\n                executeCourseDeletion ().catch (\r\n                        (error: unknown) => {\r\n                            console.error (error);\r\n                        }\r\n                );\r\n                props.dialogController.setDialogIsConfirmed (false); \r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <Modal\r\n                show = {showCreateCourseForm}\r\n                backdrop = \"static\"\r\n                keyboard = {false}\r\n                size = \"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>New Course Information</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form \r\n                        id = \"CreateCourseForm\"\r\n                        className = \"pt-2 pr-5 pl-5 pb-0\"\r\n                        onSubmit = {\r\n                            (event) => {\r\n                                createCourse (event).catch (\r\n                                        (error: unknown) => {\r\n                                            console.error (error);\r\n                                        }\r\n                                );\r\n                            }\r\n                        }\r\n                    >\r\n                        <Form.Group controlId = \"CourseNameField\">\r\n                            <Form.Label>\r\n                                Course Name:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type = \"text\"\r\n                                autoComplete = \"on\"\r\n                                autoFocus = {true}\r\n                                name = \"courseNameField\"\r\n                                pattern = \"^[\\p{L} .'-]+$\"\r\n                                placeholder = \"Name for the new course ?\"\r\n                                required = {true}\r\n                                spellCheck = {false}\r\n                                value = {course.courseName}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className = \"text-muted\">\r\n                                format: characters only !  \r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"DescriptionTextarea\">\r\n                            <Form.Label>\r\n                                Description:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                as = \"textarea\"\r\n                                autoComplete = \"off\"\r\n                                autoFocus = {false}\r\n                                name = \"descriptionTextarea\"\r\n                                placeholder = \"Description for the new course ?\"\r\n                                required = {false}\r\n                                spellCheck = {true}\r\n                                rows = {5}\r\n                                value = {course.description}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"CourseTypeDropdownList\">\r\n                            <Form.Label>\r\n                                Course Type:\r\n                            </Form.Label>\r\n                            <Form.Control \r\n                                as = \"select\" \r\n                                name = \"courseTypeDropdownList\"\r\n                                autoFocus = {false}\r\n                                required = {true}\r\n                                value = {selectedCourseTypeID}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (\r\n                                            event\r\n                                        );\r\n                                    } \r\n                                }\r\n                            >\r\n                                {courseTypeHolder.map (\r\n                                    (\r\n                                            courseType\r\n                                    ) => renderCourseTypeDropdownList (\r\n                                            courseType\r\n                                    )  \r\n                                )}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"CourseLevelDropdownList\">\r\n                            <Form.Label>\r\n                                Course Level:\r\n                            </Form.Label>\r\n                            <Form.Control \r\n                                as = \"select\" \r\n                                name = \"courseLevelDropdownList\"\r\n                                autoFocus = {false}\r\n                                required = {true}\r\n                                value = {selectedCourseLevelID}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (\r\n                                            event\r\n                                        );\r\n                                    } \r\n                                }\r\n                            >\r\n                                {courseLevelHolder.map (\r\n                                    (\r\n                                            courseLevel\r\n                                    ) => renderCourseLevelDropdownList (\r\n                                            courseLevel\r\n                                    )  \r\n                                )}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"TuitionFeeField\">\r\n                            <Form.Label>\r\n                                Tuition Fee (VND):\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type = \"number\"\r\n                                autoComplete = \"on\"\r\n                                autoFocus = {false}\r\n                                name = \"tuitionFeeField\"\r\n                                placeholder = \"Price of the new course ?\"\r\n                                required = {true}\r\n                                spellCheck = {false}\r\n                                min = {0}\r\n                                step = {500}\r\n                                value = {course.tuitionFee}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className = \"text-muted\">\r\n                                format: numbers only !  \r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button \r\n                        variant = \"success\" \r\n                        type = \"submit\"\r\n                        form = \"CreateCourseForm\" \r\n                    >\r\n                        Create Course\r\n                    </Button>\r\n                    <Button \r\n                        variant = \"outline-secondary\" \r\n                        onClick = {closeCreateCourseForm}\r\n                    >\r\n                        Cancel\r\n                    </Button>   \r\n                </Modal.Footer>\r\n            </Modal>\r\n            <Modal\r\n                show = {showViewDetailDialog}\r\n                backdrop = \"static\"\r\n                keyboard = {false}\r\n                size = \"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>Course Details</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form\r\n                        className = \"pt-2 pr-5 pl-5 pb-0\"\r\n                    >\r\n                        <Form.Row>\r\n                            <Form.Group as = {Row} controlId = \"CourseIDInfo\">\r\n                                <Form.Label \r\n                                    column = {true}\r\n                                    md = {5}\r\n                                >\r\n                                    + Course ID:\r\n                                </Form.Label>\r\n                                <Col md = {7}>\r\n                                    <Form.Control \r\n                                        plaintext = {true} \r\n                                        readOnly = {true} \r\n                                        value = {course.courseID}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as = {Row} controlId = \"CourseNameInfo\">\r\n                                <Form.Label \r\n                                    column = {true}\r\n                                    md = {5}\r\n                                >\r\n                                    + Course Name:\r\n                                </Form.Label>\r\n                                <Col md = {7}>\r\n                                    <Form.Control \r\n                                        plaintext = {true} \r\n                                        readOnly = {true} \r\n                                        value = {course.courseName}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        \r\n                        <Form.Group controlId = \"DescriptionInfo\">\r\n                            <Form.Label>\r\n                                + Description:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                as = \"textarea\"\r\n                                readOnly = {true}\r\n                                rows = {5}\r\n                                value = {course.description}\r\n                            />\r\n                        </Form.Group>\r\n                        \r\n                        <Form.Row>\r\n                            <Form.Group as = {Row} controlId = \"CourseTypeInfo\">\r\n                                <Form.Label \r\n                                    column = {true}\r\n                                    md = {5}\r\n                                >\r\n                                    + Course Type:\r\n                                </Form.Label>\r\n                                <Col md = {7}>\r\n                                    <Form.Control \r\n                                        plaintext = {true} \r\n                                        readOnly = {true} \r\n                                        value = {course.courseType.typeName}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group \r\n                                as = {Row} \r\n                                controlId = \"CourseLevelInfo\"\r\n                            >\r\n                                <Form.Label \r\n                                    column = {true}\r\n                                    md = {5}\r\n                                >\r\n                                    + Course Level:\r\n                                </Form.Label>\r\n                                <Col md = {7}>\r\n                                    <Form.Control \r\n                                        plaintext = {true} \r\n                                        readOnly = {true} \r\n                                        value = {course.courseLevel.levelName}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n\r\n                        <Form.Group as = {Row} controlId = \"TuitionFeeInfo\">\r\n                            <Form.Label\r\n                                column = {true}\r\n                                md = {3}\r\n                            >\r\n                                + Tuition Fee (VND):\r\n                            </Form.Label>\r\n                            <Col md = {9}>\r\n                                <Form.Control\r\n                                    plaintext = {true} \r\n                                    readOnly = {true}\r\n                                    value = {\r\n                                        `${\r\n                                            course.tuitionFee.toLocaleString ()\r\n                                        } đ`\r\n                                    }\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as = {Row} controlId = \"LastModifiedInfo\">\r\n                            <Form.Label\r\n                                column = {true}\r\n                                md = {3}\r\n                            >\r\n                                + Last Modified:\r\n                            </Form.Label>\r\n                            <Col md = {9}>\r\n                                <Form.Control\r\n                                    plaintext = {true} \r\n                                    readOnly = {true}\r\n                                    value = {formattedLastModified}\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as = {Row} controlId = \"DateCreatedInfo\">\r\n                            <Form.Label\r\n                                column = {true}\r\n                                md = {3}\r\n                            >\r\n                                + Date Created:\r\n                            </Form.Label>\r\n                            <Col md = {9}>\r\n                                <Form.Control\r\n                                    plaintext = {true} \r\n                                    readOnly = {true}\r\n                                    value = {formattedDateCreated}\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button \r\n                        variant = \"info\" \r\n                        onClick = {closeViewDetailDialog}\r\n                    >\r\n                        Close\r\n                    </Button>   \r\n                </Modal.Footer>\r\n            </Modal>\r\n            <Modal\r\n                show = {showEditCourseForm}\r\n                backdrop = \"static\"\r\n                keyboard = {false}\r\n                size = \"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>Edit Course</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form \r\n                        id = \"EditCourseForm\"\r\n                        className = \"pt-2 pr-5 pl-5 pb-0\"\r\n                        onSubmit = {\r\n                            (event) => {\r\n                                editCourse (event).catch (\r\n                                        (error: unknown) => {\r\n                                            console.error (error);\r\n                                        }\r\n                                );\r\n                            }\r\n                        }\r\n                    >\r\n                        <Form.Group controlId = \"CourseNameField\">\r\n                            <Form.Label>\r\n                                Course Name:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type = \"text\"\r\n                                autoComplete = \"on\"\r\n                                autoFocus = {true}\r\n                                name = \"courseNameField\"\r\n                                pattern = \"^[\\p{L} .'-]+$\"\r\n                                placeholder = \"Name for the course ?\"\r\n                                required = {true}\r\n                                spellCheck = {false}\r\n                                value = {course.courseName}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className = \"text-muted\">\r\n                                format: characters only !  \r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"DescriptionTextarea\">\r\n                            <Form.Label>\r\n                                Description:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                as = \"textarea\"\r\n                                autoComplete = \"off\"\r\n                                autoFocus = {false}\r\n                                name = \"descriptionTextarea\"\r\n                                placeholder = \"Description for the course ?\"\r\n                                required = {false}\r\n                                spellCheck = {true}\r\n                                rows = {5}\r\n                                value = {course.description}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"CourseTypeDropdownList\">\r\n                            <Form.Label>\r\n                                Course Type:\r\n                            </Form.Label>\r\n                            <Form.Control \r\n                                as = \"select\" \r\n                                name = \"courseTypeDropdownList\"\r\n                                autoFocus = {false}\r\n                                required = {true}\r\n                                value = {selectedCourseTypeID}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (\r\n                                            event\r\n                                        );\r\n                                    } \r\n                                }\r\n                            >\r\n                                {courseTypeHolder.map (\r\n                                    (\r\n                                            courseType\r\n                                    ) => renderCourseTypeDropdownList (\r\n                                            courseType\r\n                                    )  \r\n                                )}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"CourseLevelDropdownList\">\r\n                            <Form.Label>\r\n                                Course Level:\r\n                            </Form.Label>\r\n                            <Form.Control \r\n                                as = \"select\" \r\n                                name = \"courseLevelDropdownList\"\r\n                                autoFocus = {false}\r\n                                required = {true}\r\n                                value = {selectedCourseLevelID}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (\r\n                                            event\r\n                                        );\r\n                                    } \r\n                                }\r\n                            >\r\n                                {courseLevelHolder.map (\r\n                                    (\r\n                                            courseLevel\r\n                                    ) => renderCourseLevelDropdownList (\r\n                                            courseLevel\r\n                                    )  \r\n                                )}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"TuitionFeeField\">\r\n                            <Form.Label>\r\n                                Tuition Fee (VND):\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type = \"number\"\r\n                                autoComplete = \"on\"\r\n                                autoFocus = {false}\r\n                                name = \"tuitionFeeField\"\r\n                                placeholder = \"Price of the course ?\"\r\n                                required = {true}\r\n                                spellCheck = {false}\r\n                                min = {0}\r\n                                step = {500}\r\n                                value = {course.tuitionFee}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className = \"text-muted\">\r\n                                format: numbers only !  \r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button \r\n                        variant = \"success\" \r\n                        type = \"submit\"\r\n                        form = \"EditCourseForm\" \r\n                    >\r\n                        Save\r\n                    </Button>\r\n                    <Button \r\n                        variant = \"outline-secondary\" \r\n                        onClick = {closeEditCourseForm}\r\n                    >\r\n                        Cancel\r\n                    </Button>   \r\n                </Modal.Footer>\r\n            </Modal>\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/\"}}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/admin-console\"}}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Manage Course Functions\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1 className = \"mb-3\">\r\n                                <span className = \"mr-3\">\r\n                                    Manage Course\r\n                                </span>\r\n                                <Button \r\n                                    variant = \"success\"\r\n                                    type = \"button\"\r\n                                    onClick = {openCreateCourseForm}\r\n                                >\r\n                                    Create New\r\n                                </Button>\r\n                            </h1>\r\n                            <Form>\r\n                                <Table responsive = \"md\" hover = {true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                Course Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Course Type\r\n                                            </th>\r\n                                            <th>\r\n                                                Course Level\r\n                                            </th>\r\n                                            <th>\r\n                                                Tuition Fee\r\n                                            </th>\r\n                                            <th>\r\n                                                Actions\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {courseHolder.map (\r\n                                            (\r\n                                                    course\r\n                                                    , index\r\n                                            ) => renderCourseTable (\r\n                                                    course\r\n                                                    , index\r\n                                                    , openViewDetailDialog\r\n                                                    , openEditCourseForm\r\n                                                    , handleDeleteCourse\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx",["196"],"// Import package members section:\r\nimport axios, { AxiosError, AxiosInstance, AxiosResponse } from \"axios\";\r\nimport { DataPage } from \"../../App\";\r\nimport { LoggedInUser } from \"../../model/LoggedInUser\";\r\nimport { User } from \"../../model/User\";\r\nimport { AxiosInstanceGet } from \"./AxiosInstanceGet\";\r\nimport { ErrorHandle } from \"./ErrorHandle\";\r\nimport { TypeGuard } from \"./TypeGuard\";\r\n\r\nexport class UserAPI {\r\n\r\n    // Variables declaration:\r\n    private serverResponse: AxiosResponse<unknown> | undefined;\r\n    private axiosInstance: AxiosInstance;\r\n    private axiosInstanceGetter: AxiosInstanceGet | undefined;\r\n    private typeGuardian: TypeGuard;\r\n    private loggedInUser: LoggedInUser | undefined;\r\n    private axiosError: AxiosError<unknown> | undefined;\r\n    private errorHandler: ErrorHandle;\r\n    private requestParameterHolder: URLSearchParams | undefined;\r\n    private userHolder: User[] | undefined;\r\n    private userDataPage: DataPage<User> | undefined;\r\n\r\n    public constructor() {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance();\r\n        this.errorHandler = new ErrorHandle();\r\n        this.typeGuardian = new TypeGuard();\r\n    }\r\n\r\n    public listUsers(): Promise<AxiosResponse> {\r\n        return axios.get(\"http://localhost:8080/users\");\r\n    }\r\n\r\n    public async getAllUserExcludingCurrentLoggedInUser(\r\n        pageNumber: number\r\n        , pageSize: number\r\n    ): Promise<User[]> {\r\n        this.requestParameterHolder = new URLSearchParams();\r\n        this.requestParameterHolder.set(\"pageNumber\", pageNumber.toString());\r\n        this.requestParameterHolder.set(\"pageSize\", pageSize.toString());\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.get<unknown>(\r\n                \"/users:excluding-logged-in-user\"\r\n                , { params: this.requestParameterHolder }\r\n            );\r\n            if (this.typeGuardian.isUserArray(this.serverResponse.data)) {\r\n                this.userHolder = this.serverResponse.data;\r\n                return Promise.resolve<User[]>(this.userHolder);\r\n            }\r\n            else {\r\n                throw new Error(\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (apiError: unknown) {\r\n            try {\r\n                this.axiosError\r\n                    = await this.errorHandler.handleApiError(apiError);\r\n                return Promise.reject(this.axiosError);\r\n            }\r\n            catch (apiError2: unknown){\r\n                return Promise.reject (apiError2);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async getAllStudentExcludingStudentInTheCourse (\r\n            courseID: number\r\n            , pageIndex: number\r\n            , pageSize: number\r\n    ): Promise<DataPage<User>> {\r\n        this.requestParameterHolder = new URLSearchParams ();\r\n        this.requestParameterHolder.set (\"courseID\", courseID.toString ());\r\n        this.requestParameterHolder.set (\"pageIndex\", pageIndex.toString ());\r\n        this.requestParameterHolder.set (\"pageSize\", pageSize.toString ());\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.get<unknown> (\r\n                    \"/students:excluding-student-in-the-course\"\r\n                    , {params: this.requestParameterHolder}\r\n            );\r\n            if (this.typeGuardian.isDataPage<User> (\r\n                    this.serverResponse.data\r\n            )){\r\n                this.userDataPage = this.serverResponse.data;\r\n                return Promise.resolve<DataPage<User>> (this.userDataPage);\r\n            } \r\n            else {\r\n                throw new Error (\"This server response is not valid !\");\r\n            }  \r\n        }\r\n        catch (apiError: unknown){\r\n            try {\r\n                this.axiosError \r\n                    = await this.errorHandler.handleApiError (apiError); \r\n                return Promise.reject (this.axiosError);\r\n            }\r\n            catch (apiError2: unknown){\r\n                return Promise.reject (apiError2);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async getAllStudentAreInTheCourse (\r\n            courseID: number\r\n            , pageIndex: number\r\n            , pageSize: number\r\n    ): Promise<DataPage<User>> {\r\n        this.requestParameterHolder = new URLSearchParams ();\r\n        this.requestParameterHolder.set (\"courseID\", courseID.toString ());\r\n        this.requestParameterHolder.set (\"pageIndex\", pageIndex.toString ());\r\n        this.requestParameterHolder.set (\"pageSize\", pageSize.toString ());\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.get<unknown> (\r\n                    \"/students:are-in-the-course\"\r\n                    , {params: this.requestParameterHolder}\r\n            );\r\n            if (this.typeGuardian.isDataPage<User> (\r\n                    this.serverResponse.data\r\n            )){\r\n                this.userDataPage = this.serverResponse.data;\r\n                return Promise.resolve<DataPage<User>> (this.userDataPage);\r\n            } \r\n            else {\r\n                throw new Error (\"This server response is not valid !\");\r\n            }  \r\n        }\r\n        catch (apiError: unknown){\r\n            try {\r\n                this.axiosError \r\n                    = await this.errorHandler.handleApiError (apiError); \r\n                return Promise.reject (this.axiosError);\r\n            }\r\n            catch (apiError2: unknown){\r\n                return Promise.reject (apiError2);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async disableAnotherUser(\r\n        userID: number\r\n    ): Promise<void> {\r\n        try {\r\n            await this.axiosInstance.patch<undefined>(\r\n                `/users/${userID}:disable`\r\n            );\r\n            return Promise.resolve<undefined>(undefined);\r\n        }\r\n        catch (apiError: unknown) {\r\n            try {\r\n                this.axiosError\r\n                    = await this.errorHandler.handleApiError(apiError);\r\n                return Promise.reject(this.axiosError);\r\n            }\r\n            catch (apiError2: unknown){\r\n                return Promise.reject (apiError2);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async enableUser(\r\n        userID: number\r\n    ): Promise<void> {\r\n        try {\r\n            await this.axiosInstance.patch<undefined>(\r\n                `/users/${userID}:enable`\r\n            );\r\n            return Promise.resolve<undefined>(undefined);\r\n        }\r\n        catch (apiError: unknown) {\r\n            try {\r\n                this.axiosError\r\n                    = await this.errorHandler.handleApiError(apiError);\r\n                return Promise.reject(this.axiosError);\r\n            }\r\n            catch (apiError2: unknown){\r\n                return Promise.reject (apiError2);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async deleteAnotherUser(\r\n        userID: number\r\n    ): Promise<void> {\r\n        try {\r\n            await this.axiosInstance.delete<undefined>(\r\n                `/users/${userID}`\r\n            );\r\n            return Promise.resolve<undefined>(undefined);\r\n        }\r\n        catch (apiError: unknown) {\r\n            try {\r\n                this.axiosError\r\n                    = await this.errorHandler.handleApiError(apiError);\r\n                return Promise.reject(this.axiosError);\r\n            }\r\n            catch (apiError2: unknown){\r\n                return Promise.reject (apiError2);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async getCurrentLoggedInUser(\r\n        userName: string\r\n        , password: string\r\n    ): Promise<LoggedInUser> {\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.get<unknown>(\r\n                \"/logged-in-user\"\r\n                , {\r\n                    auth: {\r\n                        username: userName\r\n                        , password: password\r\n                    }\r\n                }\r\n            );\r\n            if (this.typeGuardian.isLoggedInUser(this.serverResponse.data)) {\r\n                this.loggedInUser = this.serverResponse.data;\r\n                return Promise.resolve<LoggedInUser>(this.loggedInUser);\r\n            }\r\n            else {\r\n                throw new Error(\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (apiError: unknown) {\r\n            try {\r\n                this.axiosError\r\n                    = await this.errorHandler.handleApiError(apiError);\r\n                return Promise.reject(this.axiosError);\r\n            }\r\n            catch (apiError2: unknown){\r\n                return Promise.reject (apiError2);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async registerUser(user: User): Promise<AxiosResponse> {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance();\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.post(\r\n                \"/users\"\r\n                , user\r\n            );\r\n            this.typeGuardian = new TypeGuard();\r\n            if (this.typeGuardian.isAxiosResponse(this.serverResponse)) {\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error(\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(error.toJSON());\r\n            return Promise.reject<AxiosResponse>(error);\r\n        }\r\n    }\r\n\r\n    public async deleteUser(userID: string): Promise<AxiosResponse> {\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.delete(\r\n                `/users/${userID}`\r\n            );\r\n            this.typeGuardian = new TypeGuard();\r\n            if (this.typeGuardian.isAxiosResponse(this.serverResponse)) {\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error(\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(error.toJSON());\r\n            return Promise.reject<AxiosResponse>(error);\r\n        }\r\n    }\r\n\r\n    public async update(user: User, userID: number): Promise<AxiosResponse> {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance();\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.put(\r\n                `/editInfo/${userID}`\r\n                , user\r\n            );\r\n            this.typeGuardian = new TypeGuard();\r\n            if (this.typeGuardian.isAxiosResponse(this.serverResponse)) {\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error(\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(error.toJSON());\r\n            return Promise.reject<AxiosResponse>(error);\r\n        }\r\n    }\r\n\r\n    public async displayStudent(userID: number): Promise<AxiosResponse> {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance();\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.get(\r\n                `/getUsers/${userID}`\r\n            );\r\n            this.typeGuardian = new TypeGuard();\r\n            if (this.typeGuardian.isAxiosResponse(this.serverResponse)) {\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error(\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(error.toJSON());\r\n            return Promise.reject<AxiosResponse>(error);\r\n        }\r\n    }\r\n\r\n    public async displayStudentbyID(userID: number): Promise<AxiosResponse> {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance();\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.get(\r\n                `/getStudent/${userID}`\r\n            );\r\n            this.typeGuardian = new TypeGuard();\r\n            if (this.typeGuardian.isAxiosResponse(this.serverResponse)) {\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error(\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(error.toJSON());\r\n            return Promise.reject<AxiosResponse>(error);\r\n        }\r\n    }\r\n\r\n    public async viewStudent(userID: number): Promise<AxiosResponse> {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance();\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.get(\r\n                `/users`\r\n            );\r\n            this.typeGuardian = new TypeGuard();\r\n            if (this.typeGuardian.isAxiosResponse(this.serverResponse)) {\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error(\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(error.toJSON());\r\n            return Promise.reject<AxiosResponse>(error);\r\n        }\r\n    }\r\n\r\n    public updateStudents(\r\n        user: User, userID: number\r\n    ): Promise<AxiosResponse<unknown>> {\r\n        try {\r\n            return axios.put(`http://localhost:8080/editInfo/${userID}`, user);\r\n        }\r\n        catch (error) {\r\n            console.error(error.toJSON());\r\n            return Promise.reject<AxiosResponse>(error);\r\n        }\r\n    }\r\n\r\n    public async displayTeacher(userID: number): Promise<AxiosResponse> {\r\n        this.axiosInstanceGetter = new AxiosInstanceGet();\r\n        this.axiosInstance = this.axiosInstanceGetter.getNewInstance();\r\n        try {\r\n            this.serverResponse = await this.axiosInstance.get(\r\n                `/getUsers/${userID}`\r\n            );\r\n            this.typeGuardian = new TypeGuard();\r\n            if (this.typeGuardian.isAxiosResponse(this.serverResponse)) {\r\n                return this.serverResponse;\r\n            }\r\n            else {\r\n                throw new Error(\"This server response is not valid !\");\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(error.toJSON());\r\n            return Promise.reject<AxiosResponse>(error);\r\n        }\r\n    }\r\n\r\n    public updateTeacher(\r\n        user: User, userID: number\r\n    ): Promise<AxiosResponse<unknown>> {\r\n        try {\r\n            return axios.put(`http://localhost:8080/editInfo/${userID}`, user);\r\n        }\r\n        catch (error) {\r\n            console.error(error.toJSON());\r\n            return Promise.reject<AxiosResponse>(error);\r\n        }\r\n    }\r\n\r\n\r\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\User.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\RegisterForm.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\RegisterFormAPI.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\CourseAPI.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\CourseTypeAPI.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\CourseLevelAPI.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\Course.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\CourseType.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\model\\CourseLevel.tsx",[],["197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213"],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\EditTeacherInfo.tsx",["214","215","216"],"import React, {\r\n    ChangeEvent, FormEvent, ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, Row\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { useParams } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\n\r\nexport function EditTeacherInfo (): ReactElement {\r\n    let [user, setUser] = useState<User>(new User());\r\n    let updatedUser: User | undefined;\r\n    let inputField:\r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let param: any = useParams();\r\n    let [teacher, setTeacher] = useState<User>(new User());\r\n    \r\n    useEffect (() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.displayTeacher(param.teacherID).then(\r\n            (res) => {\r\n                setUser(res.data);\r\n            }\r\n    );\r\n    }, []);\r\n\r\n    \r\n    function handleUserChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ){\r\n        updatedUser = new User(user);\r\n        inputField = event.target;\r\n        updatedUser[\r\n            inputField.name as keyof UserIndexSignature\r\n        ] = inputField.value;\r\n        setUser(updatedUser);\r\n    }\r\n\r\n    function updateTeacher (event: FormEvent<HTMLFormElement>, userID: number) {\r\n        event.preventDefault();\r\n        userAPI = new UserAPI();\r\n        userAPI.update(user, userID);\r\n        console.log(userID);\r\n    }\r\n \r\n    console.log(param.teacherID);\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <h1>{param.teacherID}</h1>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form\r\n                                noValidate={false}\r\n                                onSubmit={(event) => {\r\n                                    updateTeacher(event, param.teacherID);\r\n                                }}\r\n                            >\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        User Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"userName\"\r\n                                        id=\"userName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        First Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"firstName\"\r\n                                        id=\"firstName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        value={user.firstName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Middle Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"middleName\"\r\n                                        id=\"middleName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        value={user.middleName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Last Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"lastName\"\r\n                                        id=\"lastName\"\r\n                                        pattern=\"^[a-z0-9_-]{1,15}$\"\r\n                                        value={user.lastName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Email:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"email\"\r\n                                        id=\"email\"\r\n                                        value={user.email}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        DOB:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"dob\"\r\n                                        id=\"dob\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Phone:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"phoneNumber\"\r\n                                        id=\"phoneNumber\"\r\n                                        value={user.phoneNumber}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Gender\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"gender\"\r\n                                        id=\"gender\"\r\n                                        value={user.gender}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Password:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        autoComplete=\"off\"\r\n                                        autoFocus={false}\r\n                                        name=\"password\"\r\n                                        id=\"password\"\r\n                                        placeholder=\"Your new password\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Account Status\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"accountStatus\"\r\n                                        id=\"accountStatus\"\r\n                                        value={user.accountStatus}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button\r\n                                    variant=\"success\"\r\n                                    type=\"submit\"\r\n                                    block = {true}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx",["217","218","219","220","221","222","223","224","225","226","227","228","229"],"/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, {\r\n    ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, FormControl, Nav, Navbar, Row, Table\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { Link, useParams, useRouteMatch } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\nimport './ViewProfilePage.css';\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction renderUserTable(\r\n    user: User\r\n    , index: number\r\n): ReactElement {\r\n    return (\r\n        <tr key={user.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {user.firstName}\r\n            </td>\r\n            <td>\r\n                {user.middleName}\r\n            </td>\r\n            <td>\r\n                {user.lastName}\r\n            </td>\r\n            <td>\r\n                {user.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {user.dob}\r\n            </td>\r\n            <td>\r\n                {user.email}\r\n            </td>\r\n            <td>\r\n                {user.gender}\r\n            </td>\r\n            <td>\r\n                {user.job}\r\n            </td>\r\n            <td>\r\n                {user.selfDescription}\r\n            </td>\r\n            <td>\r\n                {user.accountStatus}\r\n            </td>\r\n            <td>\r\n                {user.dateCreated}\r\n            </td>\r\n            <td>\r\n                {user.lastLogin}\r\n            </td>\r\n            <td>\r\n                {user.lastModified}\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\nexport function ViewProfilePage(): ReactElement {\r\n\r\n    let [user, getUser] = useState<User>(new User());\r\n    let userID: number;\r\n    let showUser: User | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let match = useRouteMatch();\r\n    let param: any = useParams();\r\n    let studentID: number;\r\n    let [student, setStudent] = useState<User[]>([]);\r\n\r\n    useEffect(() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.viewStudent(param.studentID).then(\r\n            (res) => {\r\n                setStudent(res.data);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    console.log(param.studentID);\r\n\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <Row className=\"bg-white\">\r\n                        <Col>\r\n                            <Table responsive=\"md\" hover={true}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            #\r\n                                            </th>\r\n                                        <th>\r\n                                            First Name\r\n                                            </th>\r\n                                        <th>\r\n                                            Middle Name\r\n                                            </th>\r\n                                        <th>\r\n                                            Last Name\r\n                                            </th>\r\n                                        <th>\r\n                                            Phone Number\r\n                                            </th>\r\n                                        <th>\r\n                                            Date of birth\r\n                                            </th>\r\n                                        <th>\r\n                                            Email\r\n                                            </th>\r\n                                        <th>\r\n                                            Gender\r\n                                            </th>\r\n                                        <th>\r\n                                            Job\r\n                                            </th>\r\n                                        <th>\r\n                                            Description\r\n                                            </th>\r\n                                        <th>\r\n                                            Status\r\n                                            </th>\r\n                                        <th>\r\n                                            Date Created\r\n                                            </th>\r\n                                        <th>\r\n                                            Last Login\r\n                                            </th>\r\n                                        <th>\r\n                                            Last Modifiled\r\n                                            </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {student.map(\r\n                                        (\r\n                                            user\r\n                                            , index\r\n                                        ) => renderUserTable(\r\n                                            user\r\n                                            , index\r\n                                        )\r\n                                    )}\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\ManageTeacherPage.tsx",[],["230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246"],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\DetailPage.tsx",["247","248","249","250","251","252","253","254","255","256","257","258","259","260"],"/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, {\r\n    ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, FormControl, Nav, Navbar, Row, Table\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { Link, useParams, useRouteMatch } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\nimport './ViewProfilePage.css';\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction renderUserTable(\r\n    user: User\r\n    // , index: number\r\n): ReactElement {\r\n    return (\r\n        <table key={user.userID} className=\"table table-bordered\">\r\n            <tr>\r\n                <th>First Name</th>\r\n                <td>{user.firstName + \" \" + user.middleName + \" \" + user.lastName}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Phone</th>\r\n                <td>{user.phoneNumber}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>DoB</th>\r\n                <td>{user.dob.toString()}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Email</th>\r\n                <td>{user.email}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Gender</th>\r\n                <td>{user.gender}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Job</th>\r\n                <td>{user.job}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Self Description</th>\r\n                <td>{user.selfDescription}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Account Status</th>\r\n                <td>{user.accountStatus}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Date Created</th>\r\n                <td>{user.dateCreated.toString()}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Last Login</th>\r\n                <td>{user.lastLogin.toString()}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Last Modified</th>\r\n                <td>{user.lastModified.toString()}</td>\r\n            </tr>\r\n        </table>\r\n    );\r\n}\r\nexport function DetailPage(): ReactElement {\r\n\r\n    let [user, getUser] = useState<User>(new User());\r\n    let userID: number;\r\n    let showUser: User | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let match = useRouteMatch();\r\n    let param: any = useParams();\r\n    let studentID: number;\r\n    let [student, setStudent] = useState<User>(new User());\r\n\r\n    useEffect(() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.displayStudentbyID(param.studentID).then(\r\n            (res) => {\r\n                console.log(res);\r\n                setStudent(res.data);\r\n                console.log(student);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    console.log(param.studentID);\r\n\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <Row className=\"bg-white\">\r\n                        <Col>\r\n                            <div className=\"student-profile py-4\">\r\n                                <div className=\"container\">\r\n                                    <div className=\"row\">\r\n                                        {/* <div className=\"col-lg-4\">\r\n                                            <div className=\"card shadow-sm\">\r\n                                                <div className=\"card-header bg-transparent text-center\">\r\n                                                    <img key={user.userID} className=\"profile_img\" src=\"{user.photoURI}\" alt=\"\" />\r\n                                                    <h3>{user.firstName + \" \" + user.middleName + \" \" + user.lastName}</h3>\r\n                                                </div>\r\n                                                <div className=\"card-body\">\r\n                                                    <p className=\"mb-0\"><strong className=\"pr-1\">Student ID:</strong>{user.userID + 1}</p>\r\n                                                    <p className=\"mb-0\"><strong className=\"pr-1\">Class:</strong>5</p>\r\n                                                    <p className=\"mb-0\"><strong className=\"pr-1\">Section:</strong>A</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div> */}\r\n                                        <div className=\"col-lg-12\">\r\n                                            <div className=\"card shadow-sm\">\r\n                                                <div className=\"card-header bg-transparent border-0\">\r\n                                                    <h3 className=\"mb-0\"><i className=\"far fa-clone pr-1\"></i>General Information</h3>\r\n                                                </div>\r\n                                                <div className=\"card-body pt-0\">\r\n                                                    <>\r\n                                                        {\r\n                                                            renderUserTable(student)\r\n                                                            // student.map((item, index) => (\r\n                                                            //     <li key={index}>{item}</li>\r\n                                                            // ))\r\n                                                        }\r\n                                                    </>\r\n                                                    {/* {student.map(\r\n                                                        (\r\n                                                            user\r\n                                                            , index\r\n                                                        ) => renderUserTable(\r\n                                                            user\r\n                                                            , index\r\n                                                        )\r\n                                                    )} */}\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\select_role_page\\SelectRolePage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\teacher\\TeacherDashboardPage.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\page\\admin\\ManageStudentInCoursePage.tsx",["261","262"],"// Import package members section:\r\nimport React, { \r\n    MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { \r\n    Breadcrumb\r\n    , Button\r\n    , Col\r\n    , Container\r\n    , Modal\r\n    , Row\r\n    , Table \r\n} from \"react-bootstrap\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { DataPage } from \"../../App\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { CourseAPI } from \"../../common/service/CourseAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { UserAPI } from \"../../common/service/UserAPI\";\r\nimport { User } from \"../../model/User\";\r\n\r\nfunction renderStudentTable (\r\n        user: User\r\n        , index: number\r\n        , addAStudentToCourse: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void>\r\n): ReactElement {\r\n    return (\r\n        <tr key = {user.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {user.userID}\r\n            </td>\r\n            <td>\r\n                {`${\r\n                    user.firstName\r\n                } ${\r\n                    user.middleName\r\n                } ${\r\n                    user.lastName\r\n                }`}\r\n            </td>\r\n            <td>\r\n                {user.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {user.email}\r\n            </td>\r\n            <td>\r\n                {user.userName}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {user.userID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            addAStudentToCourse (event).catch (\r\n                                    (error: unknown) => {\r\n                                        console.error (error);\r\n                                    }\r\n                            );\r\n                        }\r\n                    }\r\n                >\r\n                    Add\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nfunction renderStudentInTheCourseTable (\r\n    user: User\r\n    , index: number\r\n    , handleRemoveAStudentFromCourse: (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ) => void \r\n): ReactElement {\r\n    return (\r\n        <tr key = {user.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {user.userID}\r\n            </td>\r\n            <td>\r\n                {`${\r\n                    user.firstName\r\n                } ${\r\n                    user.middleName\r\n                } ${\r\n                    user.lastName\r\n                }`}\r\n            </td>\r\n            <td>\r\n                {user.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {user.email}\r\n            </td>\r\n            <td>\r\n                {user.userName}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {user.userID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            handleRemoveAStudentFromCourse (event);\r\n                        }\r\n                    }\r\n                >\r\n                    Remove\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface UrlParameter {\r\n    courseID: string;\r\n}\r\n\r\ninterface ManageStudentInCoursePageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function ManageStudentInCoursePage (\r\n        props: ManageStudentInCoursePageProps\r\n): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [showAddStudentDialog, setShowAddStudentDialog] \r\n        = useState<boolean> (false);\r\n    let studentDataPage: DataPage<User> | undefined;\r\n    let [studentHolder, setStudentHolder] = useState<User[]> ([]);\r\n    let userAPI: UserAPI;\r\n    let typeGuardian: TypeGuard;\r\n    let [pageIndex] = useState<number> (0);\r\n    let [pageSize] = useState<number> (10);\r\n    let [totalRowCount, setTotalRowCount] = useState<number> (0);\r\n    let courseID = useParams<UrlParameter> ().courseID;\r\n    let button: HTMLButtonElement | undefined;\r\n    let courseAPI: CourseAPI;\r\n    let [studentInTheCourseHolder, setStudentInTheCourseHolder] \r\n        = useState<User[]> ([]);\r\n    let [pageIndex2] = useState<number> (0);\r\n    let [pageSize2] = useState<number> (10);\r\n    let [totalRowCount2, setTotalRowCount2] = useState<number> (0);\r\n    let [pendingUserID, setPendingUserID] = useState<number> (0);\r\n\r\n    userAPI = new UserAPI ();\r\n    courseAPI = new CourseAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    \r\n    function openAddStudentDialog (): void {\r\n        loadStudentTable ().catch (\r\n                (error: unknown) => {\r\n                    console.error (error);\r\n                }\r\n        );\r\n        setShowAddStudentDialog (true);\r\n    }\r\n\r\n    function closeAddStudentDialog (): void {\r\n        setShowAddStudentDialog (false);\r\n    }\r\n\r\n    function handleRemoveAStudentFromCourse (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setPendingUserID (Number (button.value));\r\n        props.dialogController.setDialogTitle (\r\n                \"Confirm Remove Student From Course\"\r\n        );\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to remove this student from the course ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function executeAStudentFromCourseRemoval (): Promise<void> {\r\n        try {\r\n            await courseAPI.removeAStudentFromCourse (\r\n                    pendingUserID\r\n                    , Number (courseID)\r\n            );\r\n            loadStudentInTheCourseTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function addAStudentToCourse (\r\n        event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        button = event.target as HTMLButtonElement;\r\n        try {\r\n            await courseAPI.addAStudentToCourse (\r\n                    Number (button.value)\r\n                    , Number (courseID)\r\n            );\r\n            loadStudentTable ();\r\n            loadStudentInTheCourseTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadStudentTable (): Promise<void> {\r\n        try {\r\n            studentDataPage \r\n                = await userAPI.getAllStudentExcludingStudentInTheCourse (\r\n                    Number (courseID)\r\n                    , pageIndex\r\n                    , pageSize\r\n            );\r\n            setTotalRowCount (studentDataPage.totalRowCount);\r\n            setStudentHolder (studentDataPage.pageDataHolder);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadStudentInTheCourseTable (): Promise<void> {\r\n        try {\r\n            studentDataPage \r\n                = await userAPI.getAllStudentAreInTheCourse (\r\n                    Number (courseID)\r\n                    , pageIndex2\r\n                    , pageSize2\r\n            );\r\n            setTotalRowCount2 (studentDataPage.totalRowCount);\r\n            setStudentInTheCourseHolder (studentDataPage.pageDataHolder);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n    \r\n    useEffect (\r\n        () => {\r\n            loadStudentInTheCourseTable ().catch (\r\n                    (error: unknown) => {\r\n                        console.error (error);\r\n                    }\r\n            );\r\n        }\r\n        , []\r\n    );\r\n    \r\n    useEffect (\r\n        () => {\r\n            if (props.dialogController.dialogIsConfirmed === true){\r\n                executeAStudentFromCourseRemoval ().catch (\r\n                        (error) => {\r\n                            console.error (error);\r\n                        }\r\n                );\r\n                props.dialogController.setDialogIsConfirmed (false); \r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <Modal\r\n                show = {showAddStudentDialog}\r\n                backdrop = \"static\"\r\n                keyboard = {false}\r\n                size = \"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>Add A Student</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Table responsive = \"md\" hover = {true}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    #\r\n                                </th>\r\n                                <th>\r\n                                    Student ID\r\n                                </th>\r\n                                <th>\r\n                                    Full Name\r\n                                </th>\r\n                                <th>\r\n                                    Phone Number\r\n                                </th>\r\n                                <th>\r\n                                    Email\r\n                                </th>\r\n                                <th>\r\n                                    User Name\r\n                                </th>\r\n                                <th>\r\n                                    Actions\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {studentHolder.map (\r\n                                (\r\n                                        user\r\n                                        , index\r\n                                ) => renderStudentTable (\r\n                                        user\r\n                                        , index\r\n                                        , addAStudentToCourse\r\n                                )\r\n                            )}\r\n                        </tbody>\r\n                    </Table>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button \r\n                        variant = \"info\" \r\n                        onClick = {closeAddStudentDialog}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/\"}}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/admin-console\"}}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {\r\n                                        {\r\n                                            to: \"/admin-console\"\r\n                                            + \"/manage-course-page\"\r\n                                        }\r\n                                    }\r\n                                >\r\n                                    Manage Course Functions\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Manage Student In Course Functions\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1 className = \"mb-3\">\r\n                                <span className = \"mr-3\">\r\n                                    Manage Student In Course\r\n                                </span>\r\n                                <Button \r\n                                    variant = \"success\"\r\n                                    type = \"button\"\r\n                                    onClick = {openAddStudentDialog}\r\n                                >\r\n                                    Add Student\r\n                                </Button>\r\n                            </h1>\r\n                            <Table responsive = \"md\" hover = {true}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            #\r\n                                        </th>\r\n                                        <th>\r\n                                            Student ID\r\n                                        </th>\r\n                                        <th>\r\n                                            Full Name\r\n                                        </th>\r\n                                        <th>\r\n                                            Phone Number\r\n                                        </th>\r\n                                        <th>\r\n                                            Email\r\n                                        </th>\r\n                                        <th>\r\n                                            User Name\r\n                                        </th>\r\n                                        <th>\r\n                                            Actions\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {studentInTheCourseHolder.map (\r\n                                        (\r\n                                                user\r\n                                                , index\r\n                                        ) => renderStudentInTheCourseTable (\r\n                                                user\r\n                                                , index\r\n                                                , handleRemoveAStudentFromCourse\r\n                                        )\r\n                                    )}\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\home_page_header\\HomePageHeader.tsx",[],"C:\\Users\\DELL\\Desktop\\language-center-system\\front-end\\src\\common\\component\\teacher_sidebar\\TeacherSidebar.tsx",["263"],"// Import package members section:\r\nimport React, { ReactElement, useState } from \"react\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\nimport './TeacherSidebar.css';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport function TeacherSidebar (): ReactElement {\r\n    \r\n    // Variables declaration:\r\n    let [sideBarActivated, setSideBarActivated] \r\n        = useState<string> (\"\");\r\n\r\n    function toggleSideBar (): void {\r\n        if (sideBarActivated !== \"activated\"){\r\n            setSideBarActivated (\"activated\");\r\n        }\r\n        else {\r\n            setSideBarActivated (\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div \r\n                id = \"SideBarButton\" \r\n                className = {\r\n                    `Side_Bar_Button_Z_Index \r\n                    ${sideBarActivated}`\r\n                } \r\n                onClick = {toggleSideBar} \r\n            >\r\n                <div id = \"Top\"></div>\r\n                <div id = \"Middle\"></div>\r\n                <div id = \"Bottom\"></div>\r\n            </div>\r\n            <nav \r\n                id = \"SideBar\" \r\n                className = {`Side_Bar_Z_Index ${sideBarActivated}`}\r\n            >\r\n                <ListGroup variant = \"flush\">\r\n                    <ListGroup.Item variant = \"light\" action = {true}>\r\n                        Cras justo odio\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>Dapibus ac facilisis in</ListGroup.Item>\r\n                    <ListGroup.Item>Morbi leo risus</ListGroup.Item>\r\n                    <ListGroup.Item>Porta ac consectetur ac</ListGroup.Item>\r\n                </ListGroup> \r\n            </nav>\r\n        </div>\r\n    );\r\n}",{"ruleId":"264","replacedBy":"265"},{"ruleId":"266","replacedBy":"267"},{"ruleId":"268","replacedBy":"269"},{"ruleId":"270","replacedBy":"271"},{"ruleId":"272","replacedBy":"273"},{"ruleId":"274","replacedBy":"275"},{"ruleId":"276","replacedBy":"277"},{"ruleId":"278","replacedBy":"279"},{"ruleId":"280","replacedBy":"281"},{"ruleId":"282","replacedBy":"283"},{"ruleId":"284","replacedBy":"285"},{"ruleId":"286","replacedBy":"287"},{"ruleId":"288","replacedBy":"289"},{"ruleId":"290","replacedBy":"291"},{"ruleId":"292","replacedBy":"293"},{"ruleId":"294","replacedBy":"295"},{"ruleId":"296","replacedBy":"297"},{"ruleId":"298","severity":1,"message":"299","line":39,"column":10,"nodeType":"300","messageId":"301","endLine":39,"endColumn":27},{"ruleId":"302","severity":1,"message":"303","line":17,"column":16,"nodeType":"304","messageId":"305","endLine":17,"endColumn":19,"suggestions":"306"},{"ruleId":"298","severity":1,"message":"307","line":18,"column":10,"nodeType":"300","messageId":"301","endLine":18,"endColumn":17},{"ruleId":"298","severity":1,"message":"308","line":18,"column":19,"nodeType":"300","messageId":"301","endLine":18,"endColumn":29},{"ruleId":"298","severity":1,"message":"309","line":125,"column":22,"nodeType":"300","messageId":"301","endLine":125,"endColumn":35},{"ruleId":"298","severity":1,"message":"310","line":126,"column":20,"nodeType":"300","messageId":"301","endLine":126,"endColumn":31},{"ruleId":"298","severity":1,"message":"311","line":176,"column":10,"nodeType":"300","messageId":"301","endLine":176,"endColumn":23},{"ruleId":"298","severity":1,"message":"312","line":341,"column":30,"nodeType":"300","messageId":"301","endLine":341,"endColumn":44},{"ruleId":"264","replacedBy":"313"},{"ruleId":"266","replacedBy":"314"},{"ruleId":"268","replacedBy":"315"},{"ruleId":"270","replacedBy":"316"},{"ruleId":"272","replacedBy":"317"},{"ruleId":"274","replacedBy":"318"},{"ruleId":"276","replacedBy":"319"},{"ruleId":"278","replacedBy":"320"},{"ruleId":"280","replacedBy":"321"},{"ruleId":"282","replacedBy":"322"},{"ruleId":"284","replacedBy":"323"},{"ruleId":"286","replacedBy":"324"},{"ruleId":"288","replacedBy":"325"},{"ruleId":"290","replacedBy":"326"},{"ruleId":"292","replacedBy":"327"},{"ruleId":"294","replacedBy":"328"},{"ruleId":"296","replacedBy":"329"},{"ruleId":"302","severity":1,"message":"303","line":17,"column":16,"nodeType":"304","messageId":"305","endLine":17,"endColumn":19,"suggestions":"330"},{"ruleId":"298","severity":1,"message":"331","line":18,"column":10,"nodeType":"300","messageId":"301","endLine":18,"endColumn":17},{"ruleId":"298","severity":1,"message":"332","line":18,"column":19,"nodeType":"300","messageId":"301","endLine":18,"endColumn":29},{"ruleId":"298","severity":1,"message":"333","line":6,"column":5,"nodeType":"300","messageId":"301","endLine":6,"endColumn":11},{"ruleId":"298","severity":1,"message":"334","line":6,"column":29,"nodeType":"300","messageId":"301","endLine":6,"endColumn":33},{"ruleId":"298","severity":1,"message":"335","line":6,"column":35,"nodeType":"300","messageId":"301","endLine":6,"endColumn":46},{"ruleId":"298","severity":1,"message":"336","line":6,"column":48,"nodeType":"300","messageId":"301","endLine":6,"endColumn":51},{"ruleId":"298","severity":1,"message":"337","line":6,"column":53,"nodeType":"300","messageId":"301","endLine":6,"endColumn":59},{"ruleId":"298","severity":1,"message":"338","line":9,"column":10,"nodeType":"300","messageId":"301","endLine":9,"endColumn":14},{"ruleId":"298","severity":1,"message":"339","line":10,"column":16,"nodeType":"300","messageId":"301","endLine":10,"endColumn":34},{"ruleId":"298","severity":1,"message":"340","line":67,"column":10,"nodeType":"300","messageId":"301","endLine":67,"endColumn":14},{"ruleId":"298","severity":1,"message":"341","line":67,"column":16,"nodeType":"300","messageId":"301","endLine":67,"endColumn":23},{"ruleId":"298","severity":1,"message":"312","line":68,"column":9,"nodeType":"300","messageId":"301","endLine":68,"endColumn":23},{"ruleId":"298","severity":1,"message":"342","line":69,"column":9,"nodeType":"300","messageId":"301","endLine":69,"endColumn":35},{"ruleId":"298","severity":1,"message":"343","line":71,"column":9,"nodeType":"300","messageId":"301","endLine":71,"endColumn":14},{"ruleId":"298","severity":1,"message":"344","line":73,"column":9,"nodeType":"300","messageId":"301","endLine":73,"endColumn":26},{"ruleId":"264","replacedBy":"345"},{"ruleId":"266","replacedBy":"346"},{"ruleId":"268","replacedBy":"347"},{"ruleId":"270","replacedBy":"348"},{"ruleId":"272","replacedBy":"349"},{"ruleId":"274","replacedBy":"350"},{"ruleId":"276","replacedBy":"351"},{"ruleId":"278","replacedBy":"352"},{"ruleId":"280","replacedBy":"353"},{"ruleId":"282","replacedBy":"354"},{"ruleId":"284","replacedBy":"355"},{"ruleId":"286","replacedBy":"356"},{"ruleId":"288","replacedBy":"357"},{"ruleId":"290","replacedBy":"358"},{"ruleId":"292","replacedBy":"359"},{"ruleId":"294","replacedBy":"360"},{"ruleId":"296","replacedBy":"361"},{"ruleId":"298","severity":1,"message":"333","line":6,"column":5,"nodeType":"300","messageId":"301","endLine":6,"endColumn":11},{"ruleId":"298","severity":1,"message":"334","line":6,"column":29,"nodeType":"300","messageId":"301","endLine":6,"endColumn":33},{"ruleId":"298","severity":1,"message":"335","line":6,"column":35,"nodeType":"300","messageId":"301","endLine":6,"endColumn":46},{"ruleId":"298","severity":1,"message":"336","line":6,"column":48,"nodeType":"300","messageId":"301","endLine":6,"endColumn":51},{"ruleId":"298","severity":1,"message":"337","line":6,"column":53,"nodeType":"300","messageId":"301","endLine":6,"endColumn":59},{"ruleId":"298","severity":1,"message":"362","line":6,"column":66,"nodeType":"300","messageId":"301","endLine":6,"endColumn":71},{"ruleId":"298","severity":1,"message":"338","line":9,"column":10,"nodeType":"300","messageId":"301","endLine":9,"endColumn":14},{"ruleId":"298","severity":1,"message":"339","line":10,"column":16,"nodeType":"300","messageId":"301","endLine":10,"endColumn":34},{"ruleId":"298","severity":1,"message":"340","line":69,"column":10,"nodeType":"300","messageId":"301","endLine":69,"endColumn":14},{"ruleId":"298","severity":1,"message":"341","line":69,"column":16,"nodeType":"300","messageId":"301","endLine":69,"endColumn":23},{"ruleId":"298","severity":1,"message":"312","line":70,"column":9,"nodeType":"300","messageId":"301","endLine":70,"endColumn":23},{"ruleId":"298","severity":1,"message":"342","line":71,"column":9,"nodeType":"300","messageId":"301","endLine":71,"endColumn":35},{"ruleId":"298","severity":1,"message":"343","line":73,"column":9,"nodeType":"300","messageId":"301","endLine":73,"endColumn":14},{"ruleId":"298","severity":1,"message":"344","line":75,"column":9,"nodeType":"300","messageId":"301","endLine":75,"endColumn":26},{"ruleId":"298","severity":1,"message":"311","line":153,"column":10,"nodeType":"300","messageId":"301","endLine":153,"endColumn":23},{"ruleId":"298","severity":1,"message":"363","line":161,"column":10,"nodeType":"300","messageId":"301","endLine":161,"endColumn":24},{"ruleId":"298","severity":1,"message":"338","line":5,"column":10,"nodeType":"300","messageId":"301","endLine":5,"endColumn":14},"callback-return",[],"global-require",[],"handle-callback-err",[],"id-blacklist",["364"],"lines-around-directive",["365"],"no-buffer-constructor",[],"no-catch-shadow",["366"],"no-mixed-requires",[],"no-native-reassign",["367"],"no-negated-in-lhs",["368"],"no-new-require",[],"no-path-concat",[],"no-process-env",[],"no-process-exit",[],"no-restricted-modules",[],"no-sync",[],"prefer-reflect",[],"@typescript-eslint/no-unused-vars","'ManageTeacherPage' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["369","370"],"'student' is assigned a value but never used.","'setStudent' is assigned a value but never used.","'setPageNumber' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","'totalRowCount' is assigned a value but never used.","'userID' is defined but never used.",[],[],[],["364"],["365"],[],["366"],[],["367"],["368"],[],[],[],[],[],[],[],["371","372"],"'teacher' is assigned a value but never used.","'setTeacher' is assigned a value but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'Nav' is defined but never used.","'Navbar' is defined but never used.","'Link' is defined but never used.","'UserIndexSignature' is defined but never used.","'user' is assigned a value but never used.","'getUser' is assigned a value but never used.","'showUser' is defined but never used.","'match' is assigned a value but never used.","'studentID' is defined but never used.",[],[],[],["364"],["365"],[],["366"],[],["367"],["368"],[],[],[],[],[],[],[],"'Table' is defined but never used.","'totalRowCount2' is assigned a value but never used.","id-denylist","padding-line-between-statements","no-shadow","no-global-assign","no-unsafe-negation",{"messageId":"373","fix":"374","desc":"375"},{"messageId":"376","fix":"377","desc":"378"},{"messageId":"373","fix":"379","desc":"375"},{"messageId":"376","fix":"380","desc":"378"},"suggestUnknown",{"range":"381","text":"382"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"381","text":"383"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"384","text":"382"},{"range":"384","text":"383"},[622,625],"unknown","never",[638,641]]
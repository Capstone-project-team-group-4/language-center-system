[{"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\index.tsx":"1","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\reportWebVitals.ts":"2","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\App.tsx":"3","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx":"4","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\HomePage.tsx":"5","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx":"6","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx":"7","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx":"8","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx":"9","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx":"10","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx":"11","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\LogInPage.tsx":"12","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\EditTeacherInfo.tsx":"13","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx":"14","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\DetailPage.tsx":"15","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx":"16","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\admin\\ManageCoursePage.tsx":"17","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx":"18","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\select_role_page\\SelectRolePage.tsx":"19","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\admin\\ManageStudentInCoursePage.tsx":"20","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\teacher\\TeacherDashboardPage.tsx":"21","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx":"22","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\home_page_header\\HomePageHeader.tsx":"23","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx":"24","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\RegisterFormAPI.tsx":"25","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\User.tsx":"26","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\RegisterForm.tsx":"27","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx":"28","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx":"29","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx":"30","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx":"31","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\CourseLevelAPI.tsx":"32","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\Course.tsx":"33","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\CourseTypeAPI.tsx":"34","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\CourseAPI.tsx":"35","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\teacher_sidebar\\TeacherSidebar.tsx":"36","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\CourseType.tsx":"37","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\CourseLevel.tsx":"38","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\student\\StudentDashboardPage.tsx":"39","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\student_sidebar\\StudentSidebar.tsx":"40","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\student\\CourseDetailPage.tsx":"41"},{"size":664,"mtime":1612709685653,"results":"42","hashOfConfig":"43"},{"size":446,"mtime":1614348837756,"results":"44","hashOfConfig":"43"},{"size":10164,"mtime":1616913706819,"results":"45","hashOfConfig":"43"},{"size":543,"mtime":1614348837653,"results":"46","hashOfConfig":"43"},{"size":3794,"mtime":1614348837675,"results":"47","hashOfConfig":"43"},{"size":14612,"mtime":1616860725215,"results":"48","hashOfConfig":"43"},{"size":16309,"mtime":1615390456082,"results":"49","hashOfConfig":"43"},{"size":20741,"mtime":1615390456096,"results":"50","hashOfConfig":"43"},{"size":3949,"mtime":1615390456032,"results":"51","hashOfConfig":"43"},{"size":1278,"mtime":1615390456055,"results":"52","hashOfConfig":"43"},{"size":6371,"mtime":1615390456063,"results":"53","hashOfConfig":"43"},{"size":9052,"mtime":1616512655275,"results":"54","hashOfConfig":"43"},{"size":11771,"mtime":1616512655271,"results":"55","hashOfConfig":"43"},{"size":5805,"mtime":1616512656096,"results":"56","hashOfConfig":"43"},{"size":6725,"mtime":1616512655270,"results":"57","hashOfConfig":"43"},{"size":5715,"mtime":1616512659040,"results":"58","hashOfConfig":"43"},{"size":47181,"mtime":1616512656100,"results":"59","hashOfConfig":"43"},{"size":14103,"mtime":1616512656098,"results":"60","hashOfConfig":"43"},{"size":2608,"mtime":1616512658141,"results":"61","hashOfConfig":"43"},{"size":17926,"mtime":1616512656288,"results":"62","hashOfConfig":"43"},{"size":837,"mtime":1616512657991,"results":"63","hashOfConfig":"43"},{"size":1722,"mtime":1616917887596,"results":"64","hashOfConfig":"43"},{"size":3794,"mtime":1616512654954,"results":"65","hashOfConfig":"43"},{"size":5256,"mtime":1616512654793,"results":"66","hashOfConfig":"43"},{"size":4663,"mtime":1615390456057,"results":"67","hashOfConfig":"43"},{"size":2071,"mtime":1616512626384,"results":"68","hashOfConfig":"43"},{"size":1028,"mtime":1614864051120,"results":"69","hashOfConfig":"43"},{"size":1853,"mtime":1615390456059,"results":"70","hashOfConfig":"43"},{"size":553,"mtime":1614348837637,"results":"71","hashOfConfig":"43"},{"size":1882,"mtime":1615390456054,"results":"72","hashOfConfig":"43"},{"size":14822,"mtime":1616857713939,"results":"73","hashOfConfig":"43"},{"size":2035,"mtime":1615390456051,"results":"74","hashOfConfig":"43"},{"size":1403,"mtime":1615390456064,"results":"75","hashOfConfig":"43"},{"size":1937,"mtime":1615390456053,"results":"76","hashOfConfig":"43"},{"size":7061,"mtime":1616860827953,"results":"77","hashOfConfig":"43"},{"size":1679,"mtime":1616512655237,"results":"78","hashOfConfig":"43"},{"size":211,"mtime":1615390456070,"results":"79","hashOfConfig":"43"},{"size":381,"mtime":1615390456066,"results":"80","hashOfConfig":"43"},{"size":3810,"mtime":1616949492677,"results":"81","hashOfConfig":"43"},{"size":1873,"mtime":1616914096084,"results":"82","hashOfConfig":"43"},{"size":1356,"mtime":1616917428814,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"1c5uct4",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"86"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"86"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"86"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"86"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"86"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"86"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"86"},"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\index.tsx",[],["180","181"],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\reportWebVitals.ts",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\App.tsx",["182"],"/* eslint-disable @typescript-eslint/no-array-constructor */\r\n// Import package members section:\r\nimport React, { ReactElement, useState } from 'react';\r\nimport { Route, Switch, useHistory } from 'react-router-dom';\r\nimport './App.css';\r\nimport { PageHeader } from './common/component/PageHeader';\r\nimport { \r\n  ModalDialog\r\n  , DialogControl\r\n} from './common/component/ModalDialog';\r\nimport { \r\n  HomePageHeader \r\n} from './common/component/home_page_header/HomePageHeader';\r\nimport { \r\n  ProtectedRoute\r\n  , SecurityContext\r\n} from './common/component/ProtectedRoute';\r\nimport { LogOutAPI } from './common/service/LogOutAPI';\r\nimport { TypeGuard } from './common/service/TypeGuard';\r\nimport { LoggedInUser } from './model/LoggedInUser';\r\nimport { AdminConsolePage } from './page/admin/AdminConsolePage';\r\nimport { CreateAccountPage } from './page/admin/CreateAccountPage';\r\nimport { HomePage } from './page/HomePage';\r\nimport { EditStudentInfo } from './page/EditStudentInfo';\r\nimport { LogInPage } from './page/LogInPage';\r\nimport { SelectRolePage } from './page/select_role_page/SelectRolePage';\r\nimport { SignUpPage } from './page/SignUpPage';\r\nimport { History } from '../node_modules/@types/history';\r\nimport {\r\n  DisableOrDeleteAccountPage\r\n} from './page/admin/DisableOrDeleteAccountPage';\r\nimport { ManageCoursePage } from './page/admin/ManageCoursePage';\r\nimport { \r\n  ManageStudentInCoursePage \r\n} from './page/admin/ManageStudentInCoursePage';\r\nimport { TeacherDashboardPage } from './page/teacher/TeacherDashboardPage';\r\nimport { StudentDashboardPage } from './page/student/StudentDashboardPage';\r\nimport { EditTeacherInfo } from './page/EditTeacherInfo';\r\nimport { ViewProfilePage } from './page/ViewProfilePage';\r\nimport { ManageTeacherPage } from './page/admin/ManageTeacherPage';\r\nimport { DetailPage } from './page/DetailPage';\r\nimport { CourseDetailPage } from './page/student/CourseDetailPage';\r\n\r\nexport interface DataPage<T> {\r\n  totalRowCount: number;\r\n  pageDataHolder: T[];\r\n}\r\n\r\nexport function App(): ReactElement {\r\n\r\n  // Variables declaration:\r\n  let [showDialog, setShowDialog] = useState<boolean>(false);\r\n  let [dialogTitle, setDialogTitle] = useState<string>(\"\");\r\n  let [dialogBody, setDialogBody] = useState<string>(\"\");\r\n  let [dialogType, setDialogType] = useState<string>(\"\");\r\n  let modalDialog: ReactElement | undefined;\r\n  let [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n  let [loggedInUser, setLoggedInUser] = useState<LoggedInUser>(\r\n    new LoggedInUser()\r\n  );\r\n  let dialogController: DialogControl | undefined;\r\n  let acceptableRoleNameHolder: string[] | undefined;\r\n  let adminPageSecurity: SecurityContext | undefined;\r\n  let selectRolePageSecurity: SecurityContext | undefined;  \r\n  let logOutAPI: LogOutAPI;\r\n  let typeGuardian: TypeGuard;\r\n  let history: History<unknown>;\r\n  let [dialogIsConfirmed, setDialogIsConfirmed] = useState<boolean>(false);\r\n\r\n  logOutAPI = new LogOutAPI();\r\n  typeGuardian = new TypeGuard();\r\n  history = useHistory();\r\n\r\n  function handleCloseDialog(): void {\r\n    setShowDialog(false);\r\n  }\r\n\r\n  function handleConfirmDialog(): void {\r\n    setDialogIsConfirmed(true);\r\n    setShowDialog(false);\r\n  }\r\n\r\n  modalDialog =\r\n    <ModalDialog\r\n      showDialog={showDialog}\r\n      dialogTitle={dialogTitle}\r\n      dialogBody={dialogBody}\r\n      dialogType={dialogType}\r\n      handleCloseDialog={handleCloseDialog}\r\n      handleConfirmDialog={handleConfirmDialog}\r\n    />;\r\n  dialogController = new DialogControl(\r\n    setShowDialog\r\n    , setDialogTitle\r\n    , setDialogBody\r\n    , setDialogType\r\n    , setDialogIsConfirmed\r\n    , dialogIsConfirmed\r\n  );\r\n  acceptableRoleNameHolder = new Array (\"ROLE_ADMIN\");\r\n  adminPageSecurity = new SecurityContext (\r\n    isAuthenticated\r\n    , loggedInUser\r\n    , acceptableRoleNameHolder\r\n  );\r\n  acceptableRoleNameHolder = new Array(\r\n    \"ROLE_ADMIN\"\r\n    , \"ROLE_TEACHER\"\r\n    , \"ROLE_STUDENT\"\r\n  );\r\n  selectRolePageSecurity = new SecurityContext(\r\n    isAuthenticated\r\n    , loggedInUser\r\n    , acceptableRoleNameHolder\r\n  );\r\n\r\n  async function logOut(): Promise<void> {\r\n    try {\r\n      await logOutAPI.logOut();\r\n      history.push(\"/\");\r\n      setIsAuthenticated(false);\r\n      setLoggedInUser(new LoggedInUser());\r\n    }\r\n    catch (apiError: unknown) {\r\n      if (typeGuardian.isAxiosError(apiError)) {\r\n        if (typeof apiError.code === \"string\") {\r\n          setDialogTitle(\r\n            `${apiError.code}: ${apiError.name}`\r\n          );\r\n        }\r\n        else {\r\n          setDialogTitle(apiError.name);\r\n        }\r\n        setDialogBody(apiError.message);\r\n        setDialogType(\"error\");\r\n        setShowDialog(true);\r\n      }\r\n      else {\r\n        throw new Error(\"This api error is not valid !\");\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/admin-console/editStudentInfo/:studentID\">\r\n        <EditStudentInfo />\r\n      </Route>\r\n      <Route exact = {true} path=\"/\">\r\n        <HomePageHeader />\r\n        <HomePage modalDialog = {modalDialog}/>\r\n      </Route>\r\n\r\n      <Route path=\"/sign-up-page\">\r\n        <SignUpPage\r\n          dialogController={dialogController}\r\n          modalDialog={modalDialog}\r\n        />\r\n      </Route>\r\n\r\n      <Route path=\"/log-in-page\">\r\n        <LogInPage\r\n          dialogController={dialogController}\r\n          modalDialog={modalDialog}\r\n          setIsAuthenticated={setIsAuthenticated}\r\n          setLoggedInUser={setLoggedInUser}\r\n        />\r\n      </Route>\r\n\r\n      <ProtectedRoute\r\n        path=\"/admin-console/create-account-request-page\"\r\n        securityContext={adminPageSecurity}\r\n        dialogController={dialogController}\r\n      >\r\n        <PageHeader logOut={logOut} />\r\n        <CreateAccountPage\r\n          dialogController={dialogController}\r\n          modalDialog={modalDialog}\r\n        />\r\n      </ProtectedRoute>\r\n\r\n      <ProtectedRoute\r\n        path=\"/admin-console/disable-or-delete-account-page\"\r\n        securityContext={adminPageSecurity}\r\n        dialogController={dialogController}\r\n      >\r\n        <PageHeader logOut={logOut} />\r\n        <DisableOrDeleteAccountPage\r\n          dialogController={dialogController}\r\n          modalDialog={modalDialog}\r\n        />\r\n      </ProtectedRoute>\r\n\r\n      <ProtectedRoute\r\n        path=\"/admin-console/managa-teacher-page\"\r\n        securityContext={adminPageSecurity}\r\n        dialogController={dialogController}\r\n      >\r\n        <PageHeader logOut={logOut} />\r\n        <DisableOrDeleteAccountPage\r\n          dialogController={dialogController}\r\n          modalDialog={modalDialog}\r\n        />\r\n      </ProtectedRoute>\r\n\r\n      <ProtectedRoute\r\n        path=\"/admin-console/manage-course-page\"\r\n        securityContext={adminPageSecurity}\r\n        dialogController={dialogController}\r\n      >\r\n        <PageHeader logOut={logOut} />\r\n        <ManageCoursePage\r\n          dialogController={dialogController}\r\n          modalDialog={modalDialog}\r\n        />\r\n      </ProtectedRoute>\r\n\r\n      <Route path=\"/admin-console\">\r\n        <PageHeader logOut={logOut} />\r\n        <AdminConsolePage modalDialog={modalDialog} />\r\n      </Route>\r\n\r\n      <Route exact path=\"/editTeacherInfo/:teacherID\">\r\n        <EditTeacherInfo />\r\n      </Route>\r\n\r\n      <Route path=\"/user_view\">\r\n        <ViewProfilePage />\r\n      </Route>\r\n\r\n      <Route path=\"/user_detail/:studentID\">\r\n        <DetailPage />\r\n      </Route>\r\n      <ProtectedRoute \r\n        path = \"/admin-console/create-account-request-page\"\r\n        securityContext = {adminPageSecurity}\r\n        dialogController = {dialogController} \r\n      >\r\n        <PageHeader logOut = {logOut}/>\r\n        <CreateAccountPage \r\n          dialogController = {dialogController}\r\n          modalDialog = {modalDialog} \r\n        />\r\n      </ProtectedRoute>\r\n\r\n      <ProtectedRoute \r\n        path = \"/admin-console/disable-or-delete-account-page\"\r\n        securityContext = {adminPageSecurity}\r\n        dialogController = {dialogController} \r\n      >\r\n        <PageHeader logOut = {logOut}/>\r\n        <DisableOrDeleteAccountPage \r\n          dialogController = {dialogController}\r\n          modalDialog = {modalDialog} \r\n        />\r\n      </ProtectedRoute>\r\n\r\n      <ProtectedRoute \r\n        path = {\r\n          \"/admin-console/manage-course-page\"\r\n          + \"/courses/:courseID/students\"\r\n        }\r\n        securityContext = {adminPageSecurity}\r\n        dialogController = {dialogController} \r\n      >\r\n        <PageHeader logOut = {logOut}/>\r\n        <ManageStudentInCoursePage \r\n          dialogController = {dialogController}\r\n          modalDialog = {modalDialog} \r\n        />\r\n      </ProtectedRoute>\r\n      \r\n      <ProtectedRoute \r\n        path = \"/admin-console/manage-course-page\"\r\n        securityContext = {adminPageSecurity}\r\n        dialogController = {dialogController} \r\n      >\r\n        <PageHeader logOut = {logOut}/>\r\n        <ManageCoursePage \r\n          dialogController = {dialogController}\r\n          modalDialog = {modalDialog} \r\n        />\r\n      </ProtectedRoute>\r\n      \r\n      <ProtectedRoute \r\n        path = \"/admin-console\"\r\n        securityContext = {adminPageSecurity}\r\n        dialogController = {dialogController} \r\n      >\r\n        <PageHeader logOut = {logOut}/>\r\n        <AdminConsolePage modalDialog = {modalDialog}/>\r\n      </ProtectedRoute>\r\n\r\n      <ProtectedRoute\r\n        path=\"/select-role-page\"\r\n        securityContext={selectRolePageSecurity}\r\n        dialogController={dialogController}\r\n      >\r\n        <SelectRolePage\r\n          dialogController={dialogController}\r\n          modalDialog={modalDialog}\r\n        />\r\n      </ProtectedRoute>\r\n\r\n      <Route path = \"/teacher-dashboard\">\r\n        <PageHeader logOut = {logOut}/>\r\n        <TeacherDashboardPage modalDialog = {modalDialog}/>\r\n      </Route>\r\n      \r\n      <Route path = \"/student-dashboard\">\r\n        <PageHeader logOut = {logOut}/>\r\n        <StudentDashboardPage modalDialog = {modalDialog}/>\r\n      </Route>\r\n      <Route path = \"/student-dashboard-course/:courseID\">\r\n        <PageHeader logOut = {logOut}/>\r\n        <CourseDetailPage modalDialog = {modalDialog}/>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\n","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\HomePage.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx",["183","184","185"],"import React, {\r\n    ChangeEvent, FormEvent, ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, Modal, Row\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { useParams } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\n\r\nexport function EditStudentInfo(): ReactElement {\r\n    let [user, setUser] = useState<User>(new User());\r\n    let updatedUser: User | undefined;\r\n    let inputField:\r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let param: any = useParams();\r\n    let [student, setStudent] = useState<User>(new User());\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    useEffect(() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.displayStudent(param.studentID).then(\r\n            (res) => {\r\n                setUser(res.data);\r\n                // console.log(student.userName);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n\r\n    function handleUserChange(\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ) {\r\n        updatedUser = new User(user);\r\n        inputField = event.target;\r\n        updatedUser[\r\n            inputField.name as keyof UserIndexSignature\r\n        ] = inputField.value;\r\n        setUser(updatedUser);\r\n    }\r\n\r\n    function updateStudent(event: FormEvent<HTMLFormElement>, userID: number) {\r\n        event.preventDefault();\r\n        userAPI = new UserAPI();\r\n        userAPI.update(user, userID);\r\n    }\r\n    // console.log(student.userName);\r\n    return (\r\n        <>\r\n            <Button variant=\"primary\" onClick={handleShow}>\r\n                Launch demo modal\r\n            </Button>\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Container fluid={true} id=\"PageContentContainer\">\r\n                    <Container fluid={true} id=\"PageHeaderContainer\">\r\n                    </Container>\r\n                    <main>\r\n                        <Container id=\"PageBodyContainer\">\r\n                            <Modal.Header closeButton>\r\n                                <h1>Edit</h1>\r\n                            </Modal.Header>\r\n                            <Row>\r\n                                <Col>\r\n\r\n                                    <Form\r\n                                        noValidate={false}\r\n                                        onSubmit={(event) => {\r\n\r\n                                            console.log(\"ds\", event.target);\r\n                                            updateStudent(event, param.studentID);\r\n                                        }}\r\n                                        className=\"wrapper\"\r\n                                    >\r\n                                        <Modal.Body>\r\n                                            <Form.Group>\r\n                                                <Form.Label>\r\n                                                    User Name:\r\n                                    </Form.Label>\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    autoComplete=\"on\"\r\n                                                    autoFocus={true}\r\n                                                    name=\"userName\"\r\n                                                    id=\"userName\"\r\n                                                    pattern=\"^[\\p{L} .'-]+$\"\r\n                                                    placeholder={user.userName}\r\n                                                    required={true}\r\n                                                    spellCheck={false}\r\n                                                    // value = {student.userName}\r\n                                                    onChange={handleUserChange}\r\n                                                />\r\n                                            </Form.Group>\r\n                                            <Form.Row>\r\n                                                <Form.Group as={Col}>\r\n                                                    <Form.Label>\r\n                                                        First Name:\r\n                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"text\"\r\n                                                        autoComplete=\"on\"\r\n                                                        autoFocus={true}\r\n                                                        name=\"firstName\"\r\n                                                        id=\"firstName\"\r\n                                                        pattern=\"^[\\p{L} .'-]+$\"\r\n                                                        placeholder={user.firstName}\r\n                                                        required={true}\r\n                                                        spellCheck={false}\r\n                                                        // value = {user.userName}\r\n                                                        onChange={handleUserChange}\r\n                                                    />\r\n                                                </Form.Group>\r\n                                                <Form.Group as={Col}>\r\n                                                    <Form.Label>\r\n                                                        Middle Name:\r\n                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"text\"\r\n                                                        autoComplete=\"on\"\r\n                                                        autoFocus={true}\r\n                                                        name=\"middleName\"\r\n                                                        id=\"middleName\"\r\n                                                        pattern=\"^[\\p{L} .'-]+$\"\r\n                                                        placeholder={user.middleName}\r\n                                                        required={true}\r\n                                                        spellCheck={false}\r\n                                                        // value = {user.userName}\r\n                                                        onChange={handleUserChange}\r\n                                                    />\r\n                                                </Form.Group>\r\n                                                <Form.Group as={Col}>\r\n                                                    <Form.Label>\r\n                                                        Last Name:\r\n                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"text\"\r\n                                                        autoComplete=\"on\"\r\n                                                        autoFocus={true}\r\n                                                        name=\"lastName\"\r\n                                                        id=\"lastName\"\r\n                                                        pattern=\"^[\\p{L} .'-]+$\"\r\n                                                        placeholder={user.lastName}\r\n                                                        required={true}\r\n                                                        spellCheck={false}\r\n                                                        // value = {user.userName}\r\n                                                        onChange={handleUserChange}\r\n                                                    />\r\n                                                </Form.Group>\r\n                                            </Form.Row>\r\n                                            <Form.Group>\r\n                                                <Form.Label>\r\n                                                    Email:\r\n                                    </Form.Label>\r\n                                                <Form.Control\r\n                                                    type=\"email\"\r\n                                                    autoComplete=\"on\"\r\n                                                    autoFocus={false}\r\n                                                    name=\"email\"\r\n                                                    id=\"email\"\r\n                                                    placeholder={user.email}\r\n                                                    required={false}\r\n                                                    spellCheck={false}\r\n                                                    onChange={handleUserChange}\r\n                                                />\r\n                                            </Form.Group>\r\n                                            <Form.Group>\r\n                                                <Form.Label>\r\n                                                    DOB:\r\n                                            </Form.Label>\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    autoComplete=\"on\"\r\n                                                    autoFocus={false}\r\n                                                    name=\"dob\"\r\n                                                    id=\"dob\"\r\n                                                    placeholder={user.dob.toString()}\r\n                                                    required={false}\r\n                                                    spellCheck={false}\r\n                                                    onChange={handleUserChange}\r\n                                                />\r\n                                            </Form.Group>\r\n                                            <Form.Group>\r\n                                                <Form.Label>\r\n                                                    Phone:\r\n                                    </Form.Label>\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    autoComplete=\"on\"\r\n                                                    autoFocus={false}\r\n                                                    name=\"phoneNumber\"\r\n                                                    id=\"phoneNumber\"\r\n                                                    pattern=\"^(?:[0-9] ?){6,14}[0-9]$\"\r\n                                                    placeholder={user.phoneNumber}\r\n                                                    required={false}\r\n                                                    spellCheck={false}\r\n                                                    onChange={handleUserChange}\r\n                                                />\r\n                                            </Form.Group>\r\n                                            <Form.Group>\r\n                                                <Form.Label>\r\n                                                    Gender\r\n                                                </Form.Label>\r\n                                                <Form.Control as=\"select\" id=\"gender\" name=\"gender\" onChange={handleUserChange}>\r\n                                                    <option value=\"male\">male</option>\r\n                                                    <option value=\"female\">female</option>\r\n                                                    <option value=\"bisexual\">bisexual</option>\r\n                                                </Form.Control>\r\n                                            </Form.Group>\r\n                                            <Form.Group>\r\n                                                <Form.Label>\r\n                                                    Job:\r\n                                                </Form.Label>\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    autoComplete=\"on\"\r\n                                                    autoFocus={false}\r\n                                                    name=\"job\"\r\n                                                    id=\"job\"\r\n                                                    pattern=\"^[\\p{L} .'-]+$\"\r\n                                                    placeholder={user.job}\r\n                                                    required={true}\r\n                                                    spellCheck={false}\r\n                                                    onChange={handleUserChange}\r\n                                                />\r\n                                            </Form.Group>\r\n                                        </Modal.Body>\r\n                                        <Modal.Footer>\r\n                                            <Button\r\n                                                variant=\"primary\"\r\n                                                type=\"submit\"\r\n                                                block={true}\r\n                                            >\r\n                                                Save\r\n                                            </Button>\r\n                                            <Button variant=\"secondary\"\r\n                                                onClick={handleClose}\r\n                                                block={true}\r\n                                            >\r\n                                                Close\r\n                                            </Button>\r\n                                        </Modal.Footer>\r\n                                        <br />\r\n                                    </Form>\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </main>\r\n                    <footer>\r\n                    </footer>\r\n                </Container>\r\n            </Modal>\r\n        </>\r\n    );\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx",["186","187","188","189"],"// Import package members section:\r\nimport React, { \r\n    ChangeEvent\r\n    , MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { \r\n    Breadcrumb\r\n    , Button\r\n    , Col\r\n    , Container\r\n    , Form\r\n    , Row\r\n    , Table \r\n} from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { RegisterFormAPI } from \"../../common/service/RegisterFormAPI\";\r\nimport { RoleAPI } from \"../../common/service/RoleAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { RegisterForm } from \"../../model/RegisterForm\";\r\nimport { Role } from \"../../model/Role\";\r\n\r\nfunction renderRoleDropdownList (role: Role): ReactElement {\r\n    let roleNameWithoutPrefix: string | undefined;\r\n\r\n    roleNameWithoutPrefix = role.roleName.slice (5);\r\n    return (\r\n        <option key = {role.roleID}>\r\n            {roleNameWithoutPrefix}\r\n        </option>\r\n    );\r\n}\r\n\r\nfunction renderRoleListSection (role: Role): ReactElement {\r\n    let roleNameWithoutPrefix: string | undefined;\r\n    \r\n    roleNameWithoutPrefix = role.roleName.slice (5);\r\n    return (\r\n        <span key = {role.roleID}>\r\n            {roleNameWithoutPrefix},&nbsp;\r\n        </span>\r\n    );\r\n}\r\n\r\nfunction renderRegisterFormTable (\r\n        registerForm: RegisterForm\r\n        , index: number\r\n        , handleAcceptRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void> \r\n        , handleRejectRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n): ReactElement {\r\n    return (\r\n        <tr key = {registerForm.formID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {`${\r\n                    registerForm.firstName\r\n                } ${\r\n                    registerForm.middleName\r\n                } ${\r\n                    registerForm.lastName\r\n                }`}\r\n            </td>\r\n            <td>\r\n                {registerForm.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {registerForm.email}\r\n            </td>\r\n            <td>\r\n                {registerForm.userName}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {registerForm.formID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            handleAcceptRequest (event).catch (\r\n                                    (error: unknown) => {\r\n                                        console.error (error);\r\n                                    }\r\n                            );\r\n                        }\r\n                    }\r\n                >\r\n                    Accept\r\n                </Button>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {registerForm.formID}\r\n                    onClick = {handleRejectRequest}\r\n                >\r\n                    Reject\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface CreateAccountPageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function CreateAccountPage (\r\n    props: CreateAccountPageProps\r\n): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [registerFormHolder, setRegisterFormHolder] \r\n        = useState<RegisterForm[]> ([]);\r\n    let registerFormAPI: RegisterFormAPI;\r\n    let typeGuardian: TypeGuard;\r\n    let [pageNumber, setPageNumber] = useState<number> (0);\r\n    let [pageSize, setPageSize] = useState<number> (10);\r\n    let [roleHolder, setRoleHolder] = useState<Role[]> ([]);\r\n    let roleAPI: RoleAPI;\r\n    let [selectedRoleName, setSelectedRoleName] = useState<string> (\"\");\r\n    let [newAccountRoleList, setNewAccountRoleList] = useState<Role[]> ([]);\r\n    let i: number | undefined; \r\n    let role: Role | undefined;\r\n    let selectedRoleArray: Role[] | undefined;\r\n    let selectedRole: Role | undefined;\r\n    let updatedNewAccountRoleList: Role[] | undefined;\r\n    let updatedRoleHolder: Role[] | undefined;\r\n    let defaultRoleSelection: Role | undefined;\r\n    let button: HTMLButtonElement | undefined;\r\n    let [userID, setUserID] = useState<number> (0);\r\n    let roleNameWithoutPrefix: string | undefined;\r\n\r\n    registerFormAPI = new RegisterFormAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    roleAPI = new RoleAPI ();\r\n    \r\n    async function handleAcceptRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        if (newAccountRoleList.length > 0){\r\n            button = event.target as HTMLButtonElement;\r\n            try {\r\n                await registerFormAPI.acceptCreateAccountRequest (\r\n                        Number (button.value)\r\n                        , newAccountRoleList\r\n                );\r\n                loadRegisterFormTable ();\r\n                return Promise.resolve<undefined> (undefined);\r\n            }\r\n            catch (apiError: unknown){\r\n                if (typeGuardian.isAxiosError (apiError)){\r\n                    if (typeof apiError.code === \"string\"){\r\n                        props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                        );\r\n                    }\r\n                    else {\r\n                        props.dialogController.setDialogTitle (apiError.name);\r\n                    }\r\n                    props.dialogController.setDialogBody (apiError.message);\r\n                    props.dialogController.setDialogType (\"error\");\r\n                    props.dialogController.setShowDialog (true);\r\n                }\r\n                return Promise.reject (apiError);\r\n            }\r\n        }\r\n        else {\r\n            props.dialogController.setDialogTitle (\"Error !\");\r\n            props.dialogController.setDialogBody (\r\n                    \"Please add at least one role.\"\r\n            );\r\n            props.dialogController.setDialogType (\"error\");\r\n            props.dialogController.setShowDialog (true);\r\n            return Promise.reject (\r\n                    new Error (\"Please add at least one role !\")\r\n            );\r\n        }\r\n    }\r\n\r\n    function handleRejectRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setUserID (Number (button.value));\r\n        props.dialogController.setDialogTitle (\"Confirm Rejection\");\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to reject this create account request ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function executeRequestRejection (): Promise<void> {\r\n        try {\r\n            await registerFormAPI.rejectCreateAccountRequest (\r\n                    userID\r\n            );\r\n            loadRegisterFormTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    function handleAddRole (){\r\n        for (i = 0; i < roleHolder.length; i++){\r\n            role = roleHolder[i];\r\n            if (role.roleName === `ROLE_${selectedRoleName}`){\r\n                updatedRoleHolder = roleHolder.slice ();\r\n                selectedRoleArray = updatedRoleHolder.splice (i, 1);\r\n                setRoleHolder (updatedRoleHolder);\r\n                if (updatedRoleHolder.length > 0){\r\n                    defaultRoleSelection = updatedRoleHolder[0];\r\n                    roleNameWithoutPrefix \r\n                        = defaultRoleSelection.roleName.slice (5); \r\n                    setSelectedRoleName (roleNameWithoutPrefix);\r\n                }\r\n                selectedRole = selectedRoleArray[0];\r\n                updatedNewAccountRoleList = newAccountRoleList.slice ();\r\n                updatedNewAccountRoleList.push (selectedRole);\r\n                setNewAccountRoleList (updatedNewAccountRoleList);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleReset (){\r\n        loadRoleDropdownList ().catch (\r\n                (error: unknown) => {\r\n                    console.error (error);\r\n                }\r\n        );\r\n        updatedNewAccountRoleList = new Array<Role> ();\r\n        setNewAccountRoleList (updatedNewAccountRoleList);\r\n    }\r\n\r\n    function handleSelectedRoleChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ): void {\r\n        setSelectedRoleName (event.target.value);\r\n    }\r\n\r\n    async function loadRoleDropdownList (): Promise<void> {\r\n        try {\r\n            updatedRoleHolder = await roleAPI.getAllRole (); \r\n            setRoleHolder (updatedRoleHolder);\r\n            defaultRoleSelection = updatedRoleHolder[0];\r\n            roleNameWithoutPrefix = defaultRoleSelection.roleName.slice (5);\r\n            setSelectedRoleName (roleNameWithoutPrefix);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadRegisterFormTable (): Promise<void> {\r\n        try {\r\n            setRegisterFormHolder (\r\n                    await registerFormAPI.getAllCreateAccountRequest (\r\n                            pageNumber\r\n                            , pageSize\r\n                    )\r\n            );\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    useEffect (\r\n        (): void => {\r\n            loadRoleDropdownList ().catch (\r\n                    (error: unknown) => {\r\n                        console.error (error);\r\n                    }\r\n            );\r\n            loadRegisterFormTable ().catch (\r\n                    (error: unknown) => {\r\n                        console.error (error);\r\n                    }\r\n            );\r\n        }\r\n        , []\r\n    );\r\n\r\n    useEffect (\r\n        (): void => {\r\n            if (props.dialogController.dialogIsConfirmed === true){\r\n                executeRequestRejection ().catch (\r\n                        (error: unknown) => {\r\n                            console.error (error);\r\n                        }\r\n                );\r\n                props.dialogController.setDialogIsConfirmed (false); \r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/\"}}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/admin-console\"}}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Create Account Requests\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1>\r\n                                Create Account Requests\r\n                            </h1>\r\n                            <hr/>\r\n                            <Form>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\"~\"} Add role \r\n                                                for the new account:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        <Col xs = \"auto\" className = \"mr-2\">\r\n                                            <Form.Control \r\n                                                as = \"select\" \r\n                                                value = {selectedRoleName}\r\n                                                onChange = {\r\n                                                    (event) => {\r\n                                            // eslint-disable-next-line max-len\r\n                                                        handleSelectedRoleChange (\r\n                                                            event\r\n                                                        );\r\n                                                    } \r\n                                                }\r\n                                            >\r\n                                                {roleHolder.map (\r\n                                                    (\r\n                                                            role\r\n                                            // eslint-disable-next-line max-len\r\n                                                    ) => renderRoleDropdownList (\r\n                                                            role\r\n                                                    )  \r\n                                                )}\r\n                                            </Form.Control>\r\n                                        </Col>\r\n                                        <Button \r\n                                            variant = \"success\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleAddRole ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Add role\r\n                                        </Button>\r\n                                        <Button \r\n                                            variant = \"primary\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleReset ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Reset\r\n                                        </Button>\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\">\"} The accepted account \r\n                                                will have roles:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        {newAccountRoleList.map (\r\n                                            (\r\n                                                    role\r\n                                            ) => renderRoleListSection (\r\n                                                    role\r\n                                            )\r\n                                        )}\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Table responsive = \"md\" hover = {true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                Full Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Phone Number\r\n                                            </th>\r\n                                            <th>\r\n                                                Email\r\n                                            </th>\r\n                                            <th>\r\n                                                User Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Actions\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {registerFormHolder.map (\r\n                                            (\r\n                                                    registerForm\r\n                                                    , index\r\n                                            ) => renderRegisterFormTable (\r\n                                                    registerForm\r\n                                                    , index\r\n                                                    , handleAcceptRequest\r\n                                                    , handleRejectRequest\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx",["190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206"],"// Import package members section:\r\nimport { AxiosError, AxiosResponse } from \"axios\";\r\nimport { DataPage } from \"../../App\";\r\nimport { CourseLevel } from \"../../model/CourseLevel\";\r\nimport { CourseType } from \"../../model/CourseType\";\r\nimport { LoggedInUser } from \"../../model/LoggedInUser\";\r\nimport { RegisterForm } from \"../../model/RegisterForm\";\r\nimport { Role } from \"../../model/Role\";\r\nimport { User } from \"../../model/User\";\r\n\r\nexport class TypeGuard {\r\n\r\n    // Variables declaration:\r\n    private isValid: boolean | undefined;\r\n    private testSample: unknown;\r\n    \r\n    public isAxiosResponse (\r\n        serverResponse: unknown\r\n    ): serverResponse is AxiosResponse<unknown> {\r\n        this.isValid = false;\r\n        if (serverResponse != undefined){\r\n            if ((\r\n                    serverResponse as AxiosResponse<unknown>\r\n            ).status != undefined){\r\n                this.isValid = true; \r\n            }\r\n        }\r\n        return this.isValid;\r\n    }\r\n\r\n    public isAxiosError (error: unknown): error is AxiosError<unknown> {\r\n        this.isValid = false;\r\n        if (error != undefined){\r\n            if ((error as AxiosError<unknown>).isAxiosError === true){\r\n                this.isValid = true; \r\n            }\r\n        }\r\n        return this.isValid;\r\n    }\r\n\r\n    public isRegisterFormArray (\r\n            unknownObject: unknown\r\n    ): unknownObject is Array<RegisterForm> {\r\n        this.isValid = false;\r\n        if (Array.isArray (unknownObject)){\r\n            if (unknownObject.length > 0){\r\n                this.testSample = unknownObject[0]; \r\n                if (this.isRegisterForm (this.testSample)){\r\n                    this.isValid = true;\r\n                }\r\n            }\r\n            else {\r\n                this.isValid = true;\r\n            }  \r\n        }\r\n        return this.isValid;\r\n    }\r\n\r\n    public isLoggedInUser (\r\n            unknownObject: unknown\r\n    ): unknownObject is LoggedInUser {\r\n        this.isValid = false;\r\n        if (unknownObject != undefined){\r\n            if ((unknownObject as LoggedInUser).roleHolder != undefined){\r\n                this.isValid = true;\r\n            }\r\n        }\r\n        return this.isValid;\r\n    }\r\n\r\n    public isRegisterForm (\r\n            unknownObject: unknown\r\n    ): unknownObject is RegisterForm {\r\n        this.isValid = false;\r\n        if (unknownObject != undefined){\r\n            if ((unknownObject as RegisterForm).formID != undefined){\r\n                this.isValid = true;\r\n            }\r\n        }\r\n        return this.isValid;\r\n    } \r\n\r\n    public isUser (unknownObject: unknown): unknownObject is User {\r\n        this.isValid = false;\r\n        if (unknownObject != undefined){\r\n            if ((unknownObject as User).userID != undefined){\r\n                this.isValid = true;\r\n            }\r\n        }\r\n        return this.isValid;\r\n    }\r\n\r\n    public isUserArray (\r\n            unknownObject: unknown\r\n    ): unknownObject is Array<User> {\r\n        this.isValid = false;\r\n        if (Array.isArray (unknownObject)){\r\n            if (unknownObject.length > 0){\r\n                this.testSample = unknownObject[0]; \r\n                if (this.isUser (this.testSample)){\r\n                    this.isValid = true;\r\n                }\r\n            }\r\n            else {\r\n                this.isValid = true;\r\n            }  \r\n        }\r\n        return this.isValid;\r\n    }\r\n\r\n    public isRoleArray (\r\n            unknownObject: unknown\r\n    ): unknownObject is Array<Role> {\r\n        this.isValid = false;\r\n        if (Array.isArray (unknownObject)){\r\n            if (unknownObject.length > 0){\r\n                this.testSample = unknownObject[0]; \r\n                if (this.isRole (this.testSample)){\r\n                    this.isValid = true;\r\n                }\r\n            }\r\n            else {\r\n                this.isValid = true;\r\n            }  \r\n        }\r\n        return this.isValid;\r\n    }\r\n\r\n    public isRole (unknownObject: unknown): unknownObject is Role {\r\n        this.isValid = false;\r\n        if (unknownObject != undefined){\r\n            if ((unknownObject as Role).roleID != undefined){\r\n                this.isValid = true;\r\n            }\r\n        }\r\n        return this.isValid;\r\n    }\r\n\r\n    public isCourseTypeArray (\r\n            unknownObject: unknown\r\n    ): unknownObject is Array<CourseType> {\r\n        this.isValid = false;\r\n        if (Array.isArray (unknownObject)){\r\n            if (unknownObject.length > 0){\r\n                this.testSample = unknownObject[0]; \r\n                if (this.isCourseType (this.testSample)){\r\n                    this.isValid = true;\r\n                }\r\n            }\r\n            else {\r\n                this.isValid = true;\r\n            }  \r\n        }\r\n        return this.isValid;\r\n    }\r\n\r\n    public isCourseType (unknownObject: unknown): unknownObject is CourseType {\r\n        this.isValid = false;\r\n        if (unknownObject != undefined){\r\n            if ((unknownObject as CourseType).typeID != undefined){\r\n                this.isValid = true;\r\n            }\r\n        }\r\n        return this.isValid;\r\n    }\r\n\r\n    public isCourseLevelArray (\r\n            unknownObject: unknown\r\n    ): unknownObject is Array<CourseLevel> {\r\n        this.isValid = false;\r\n        if (Array.isArray (unknownObject)){\r\n            if (unknownObject.length > 0){\r\n                this.testSample = unknownObject[0]; \r\n                if (this.isCourseLevel (this.testSample)){\r\n                    this.isValid = true;\r\n                }\r\n            }\r\n            else {\r\n                this.isValid = true;\r\n            }  \r\n        }\r\n        return this.isValid;\r\n    }\r\n\r\n    public isCourseLevel (\r\n            unknownObject: unknown\r\n    ): unknownObject is CourseLevel {\r\n        this.isValid = false;\r\n        if (unknownObject != undefined){\r\n            if ((unknownObject as CourseLevel).levelID != undefined){\r\n                this.isValid = true;\r\n            }\r\n        }\r\n        return this.isValid;\r\n    }\r\n\r\n    public isDataPage<T> (\r\n            unknownObject: unknown\r\n    ): unknownObject is DataPage<T> {\r\n        this.isValid = false;\r\n        if (unknownObject != undefined){\r\n            if ((unknownObject as DataPage<T>).pageDataHolder != undefined){\r\n                this.isValid = true;\r\n            }\r\n        }\r\n        return this.isValid;\r\n    }\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\LogInPage.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\EditTeacherInfo.tsx",["207","208","209"],"import React, {\r\n    ChangeEvent, FormEvent, ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, Row\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { useParams } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\n\r\nexport function EditTeacherInfo (): ReactElement {\r\n    let [user, setUser] = useState<User>(new User());\r\n    let updatedUser: User | undefined;\r\n    let inputField:\r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let param: any = useParams();\r\n    let [teacher, setTeacher] = useState<User>(new User());\r\n    \r\n    useEffect (() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.displayTeacher(param.teacherID).then(\r\n            (res) => {\r\n                setUser(res.data);\r\n            }\r\n    );\r\n    }, []);\r\n\r\n    \r\n    function handleUserChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ){\r\n        updatedUser = new User(user);\r\n        inputField = event.target;\r\n        updatedUser[\r\n            inputField.name as keyof UserIndexSignature\r\n        ] = inputField.value;\r\n        setUser(updatedUser);\r\n    }\r\n\r\n    function updateTeacher (event: FormEvent<HTMLFormElement>, userID: number) {\r\n        event.preventDefault();\r\n        userAPI = new UserAPI();\r\n        userAPI.update(user, userID);\r\n        console.log(userID);\r\n    }\r\n \r\n    console.log(param.teacherID);\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <h1>{param.teacherID}</h1>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form\r\n                                noValidate={false}\r\n                                onSubmit={(event) => {\r\n                                    updateTeacher(event, param.teacherID);\r\n                                }}\r\n                            >\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        User Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"userName\"\r\n                                        id=\"userName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        First Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"firstName\"\r\n                                        id=\"firstName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        value={user.firstName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Middle Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"middleName\"\r\n                                        id=\"middleName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        value={user.middleName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Last Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"lastName\"\r\n                                        id=\"lastName\"\r\n                                        pattern=\"^[a-z0-9_-]{1,15}$\"\r\n                                        value={user.lastName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Email:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"email\"\r\n                                        id=\"email\"\r\n                                        value={user.email}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        DOB:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"dob\"\r\n                                        id=\"dob\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Phone:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"phoneNumber\"\r\n                                        id=\"phoneNumber\"\r\n                                        value={user.phoneNumber}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Gender\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"gender\"\r\n                                        id=\"gender\"\r\n                                        value={user.gender}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Password:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        autoComplete=\"off\"\r\n                                        autoFocus={false}\r\n                                        name=\"password\"\r\n                                        id=\"password\"\r\n                                        placeholder=\"Your new password\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Account Status\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"accountStatus\"\r\n                                        id=\"accountStatus\"\r\n                                        value={user.accountStatus}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button\r\n                                    variant=\"success\"\r\n                                    type=\"submit\"\r\n                                    block = {true}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx",["210","211","212","213","214","215","216","217","218","219","220","221","222","223"],"/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, {\r\n    ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, FormControl, Nav, Navbar, Row, Table\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { Link, useParams, useRouteMatch } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\nimport './ViewProfilePage.css';\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction renderUserTable(\r\n    user: User\r\n    , index: number\r\n): ReactElement {\r\n    return (\r\n        <tr key={user.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {user.firstName}\r\n            </td>\r\n            <td>\r\n                {user.middleName}\r\n            </td>\r\n            <td>\r\n                {user.lastName}\r\n            </td>\r\n            <td>\r\n                {user.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {user.dob}\r\n            </td>\r\n            <td>\r\n                {user.email}\r\n            </td>\r\n            <td>\r\n                {user.gender}\r\n            </td>\r\n            <td>\r\n                {user.job}\r\n            </td>\r\n            <td>\r\n                {user.selfDescription}\r\n            </td>\r\n            <td>\r\n                {user.accountStatus}\r\n            </td>\r\n            <td>\r\n                {user.dateCreated}\r\n            </td>\r\n            <td>\r\n                {user.lastLogin}\r\n            </td>\r\n            <td>\r\n                {user.lastModified}\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\nexport function ViewProfilePage(): ReactElement {\r\n\r\n    let [user, getUser] = useState<User>(new User());\r\n    let userID: number;\r\n    let showUser: User | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let match = useRouteMatch();\r\n    let param: any = useParams();\r\n    let studentID: number;\r\n    let [student, setStudent] = useState<User[]>([]);\r\n\r\n    useEffect(() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.viewStudent(param.studentID).then(\r\n            (res) => {\r\n                setStudent(res.data);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    console.log(param.studentID);\r\n\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <Row className=\"bg-white\">\r\n                        <Col>\r\n                            <Table responsive=\"md\" hover={true}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            #\r\n                                            </th>\r\n                                        <th>\r\n                                            First Name\r\n                                            </th>\r\n                                        <th>\r\n                                            Middle Name\r\n                                            </th>\r\n                                        <th>\r\n                                            Last Name\r\n                                            </th>\r\n                                        <th>\r\n                                            Phone Number\r\n                                            </th>\r\n                                        <th>\r\n                                            Date of birth\r\n                                            </th>\r\n                                        <th>\r\n                                            Email\r\n                                            </th>\r\n                                        <th>\r\n                                            Gender\r\n                                            </th>\r\n                                        <th>\r\n                                            Job\r\n                                            </th>\r\n                                        <th>\r\n                                            Description\r\n                                            </th>\r\n                                        <th>\r\n                                            Status\r\n                                            </th>\r\n                                        <th>\r\n                                            Date Created\r\n                                            </th>\r\n                                        <th>\r\n                                            Last Login\r\n                                            </th>\r\n                                        <th>\r\n                                            Last Modifiled\r\n                                            </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {student.map(\r\n                                        (\r\n                                            user\r\n                                            , index\r\n                                        ) => renderUserTable(\r\n                                            user\r\n                                            , index\r\n                                        )\r\n                                    )}\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\DetailPage.tsx",["224","225","226","227","228","229","230","231","232","233","234","235","236","237","238"],"/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, {\r\n    ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, FormControl, Nav, Navbar, Row, Table\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { Link, useParams, useRouteMatch } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\nimport './ViewProfilePage.css';\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction renderUserTable(\r\n    user: User\r\n    // , index: number\r\n): ReactElement {\r\n    return (\r\n        <table key={user.userID} className=\"table table-bordered\">\r\n            <tr>\r\n                <th>First Name</th>\r\n                <td>{user.firstName + \" \" + user.middleName + \" \" + user.lastName}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Phone</th>\r\n                <td>{user.phoneNumber}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>DoB</th>\r\n                <td>{user.dob.toString()}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Email</th>\r\n                <td>{user.email}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Gender</th>\r\n                <td>{user.gender}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Job</th>\r\n                <td>{user.job}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Self Description</th>\r\n                <td>{user.selfDescription}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Account Status</th>\r\n                <td>{user.accountStatus}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Date Created</th>\r\n                <td>{user.dateCreated.toString()}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Last Login</th>\r\n                <td>{user.lastLogin.toString()}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Last Modified</th>\r\n                <td>{user.lastModified.toString()}</td>\r\n            </tr>\r\n        </table>\r\n    );\r\n}\r\nexport function DetailPage(): ReactElement {\r\n\r\n    let [user, getUser] = useState<User>(new User());\r\n    let userID: number;\r\n    let showUser: User | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let match = useRouteMatch();\r\n    let param: any = useParams();\r\n    let studentID: number;\r\n    let [student, setStudent] = useState<User>(new User());\r\n\r\n    useEffect(() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.displayStudentbyID(param.studentID).then(\r\n            (res) => {\r\n                console.log(res);\r\n                setStudent(res.data);\r\n                console.log(student);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    console.log(param.studentID);\r\n\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <Row className=\"bg-white\">\r\n                        <Col>\r\n                            <div className=\"student-profile py-4\">\r\n                                <div className=\"container\">\r\n                                    <div className=\"row\">\r\n                                        {/* <div className=\"col-lg-4\">\r\n                                            <div className=\"card shadow-sm\">\r\n                                                <div className=\"card-header bg-transparent text-center\">\r\n                                                    <img key={user.userID} className=\"profile_img\" src=\"{user.photoURI}\" alt=\"\" />\r\n                                                    <h3>{user.firstName + \" \" + user.middleName + \" \" + user.lastName}</h3>\r\n                                                </div>\r\n                                                <div className=\"card-body\">\r\n                                                    <p className=\"mb-0\"><strong className=\"pr-1\">Student ID:</strong>{user.userID + 1}</p>\r\n                                                    <p className=\"mb-0\"><strong className=\"pr-1\">Class:</strong>5</p>\r\n                                                    <p className=\"mb-0\"><strong className=\"pr-1\">Section:</strong>A</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div> */}\r\n                                        <div className=\"col-lg-12\">\r\n                                            <div className=\"card shadow-sm\">\r\n                                                <div className=\"card-header bg-transparent border-0\">\r\n                                                    <h3 className=\"mb-0\"><i className=\"far fa-clone pr-1\"></i>General Information</h3>\r\n                                                </div>\r\n                                                <div className=\"card-body pt-0\">\r\n                                                    <>\r\n                                                        {\r\n                                                            renderUserTable(student)\r\n                                                            // student.map((item, index) => (\r\n                                                            //     <li key={index}>{item}</li>\r\n                                                            // ))\r\n                                                        }\r\n                                                    </>\r\n                                                    {/* {student.map(\r\n                                                        (\r\n                                                            user\r\n                                                            , index\r\n                                                        ) => renderUserTable(\r\n                                                            user\r\n                                                            , index\r\n                                                        )\r\n                                                    )} */}\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\admin\\ManageCoursePage.tsx",["239","240","241","242"],"/* eslint-disable no-await-in-loop */\r\n// Import package members section:\r\nimport React, { \r\n    ChangeEvent,\r\n    FormEvent,\r\n    MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { \r\n    Breadcrumb\r\n    , Button\r\n    , Col\r\n    , Container\r\n    , Form\r\n    , Modal, Row\r\n    , Table \r\n} from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DataPage } from \"../../App\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { CourseAPI } from \"../../common/service/CourseAPI\";\r\nimport { CourseLevelAPI } from \"../../common/service/CourseLevelAPI\";\r\nimport { CourseTypeAPI } from \"../../common/service/CourseTypeAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { Course } from \"../../model/Course\";\r\nimport { CourseLevel } from \"../../model/CourseLevel\";\r\nimport { CourseType } from \"../../model/CourseType\";\r\n\r\nfunction renderCourseTypeDropdownList (courseType: CourseType): ReactElement {\r\n    return (\r\n        <option \r\n            key = {courseType.typeID} \r\n            value = {courseType.typeID}\r\n        >\r\n            {courseType.typeName}\r\n        </option>\r\n    );\r\n}\r\n\r\nfunction renderCourseLevelDropdownList (\r\n        courseLevel: CourseLevel\r\n): ReactElement {\r\n    return (\r\n        <option \r\n            key = {courseLevel.levelID} \r\n            value = {courseLevel.levelID}\r\n        >\r\n            {courseLevel.levelName}\r\n        </option>\r\n    );\r\n}\r\n\r\nfunction renderCourseTable (\r\n        course: Course\r\n        , index: number \r\n        , openViewDetailsDialog: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n        , openEditCourseForm: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void>\r\n        , handleDeleteCourse: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n): ReactElement {\r\n    return (\r\n        <tr key = {course.courseID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {course.courseName}\r\n            </td>\r\n            <td>\r\n                {course.courseType.typeName}\r\n            </td>\r\n            <td>\r\n                {course.courseLevel.levelName}\r\n            </td>\r\n            <td>\r\n                {course.tuitionFee}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"primary\"\r\n                    type = \"button\"\r\n                    value = {course.courseID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            openViewDetailsDialog (event);\r\n                        }\r\n                    }\r\n                >\r\n                    Details\r\n                </Button>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {course.courseID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            openEditCourseForm (event).catch (\r\n                                    (error: unknown) => {\r\n                                        console.error (error);\r\n                                    }\r\n                            );\r\n                        }\r\n                    }\r\n                >\r\n                    Edit\r\n                </Button>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {course.courseID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            handleDeleteCourse (event);\r\n                        }\r\n                    }\r\n                >\r\n                    Delete\r\n                </Button>\r\n                <Button \r\n                    variant = \"success\"\r\n                    as = {Link}\r\n                    to = {\r\n                        \"/admin-console/manage-course-page\"\r\n                        + `/courses/${course.courseID}/students`\r\n                    }\r\n                >\r\n                    Manage Student\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface ManageCoursePageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function ManageCoursePage (props: ManageCoursePageProps): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [selectedCourseTypeID, setSelectedCourseTypeID] \r\n        = useState<number> (0); \r\n    let [courseTypeHolder, setCourseTypeHolder] = useState<CourseType[]> ([]);\r\n    let updatedCourseTypeHolder: CourseType[] | undefined;\r\n    let courseTypeAPI: CourseTypeAPI;\r\n    let defaultSelectedID: number | undefined;\r\n    let typeGuardian: TypeGuard;\r\n    let updatedCourseLevelHolder: CourseLevel[] | undefined;\r\n    let courseLevelAPI: CourseLevelAPI;\r\n    let [showCreateCourseForm, setShowCreateCourseForm] \r\n        = useState<boolean> (false);\r\n    let [courseLevelHolder, setCourseLevelHolder] \r\n        = useState<CourseLevel[]> ([]);\r\n    let [selectedCourseLevelID, setSelectedCourseLevelID] \r\n        = useState<number> (0);\r\n    let htmlElement: \r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let [course, setCourse] = useState<Course> (new Course ());\r\n    let updatedCourse: Course | undefined;\r\n    let courseAPI: CourseAPI;\r\n    let courseType: CourseType | undefined;\r\n    let selectedCourseType: CourseType;\r\n    let courseLevel: CourseLevel | undefined;\r\n    let selectedCourseLevel: CourseLevel; \r\n    let i: number | undefined;\r\n    let [pageIndex] = useState<number> (0);\r\n    let [pageSize] = useState<number> (10);\r\n    let [totalRowCount, setTotalRowCount] = useState<number> (0);\r\n    let courseDataPage: DataPage<Course> | undefined;\r\n    let [courseHolder, setCourseHolder] = useState<Course[]> ([]);\r\n    let [showViewDetailDialog, setShowViewDetailDialog] \r\n        = useState<boolean> (false);\r\n    let button: HTMLButtonElement | undefined;\r\n    let courseID: number | undefined;\r\n    let courseSample: Course | undefined;\r\n    let [formattedLastModified, setFormattedLastModified] \r\n        = useState<string> (\"\");\r\n    let rawDate: Date | undefined;\r\n    let [formattedDateCreated, setFormattedDateCreated] \r\n        = useState<string> (\"\");\r\n    let [pendingCourseID, setPendingCourseID] = useState<number> (0);\r\n    let [showEditCourseForm, setShowEditCourseForm] \r\n        = useState<boolean> (false);\r\n    \r\n    courseTypeAPI = new CourseTypeAPI ();\r\n    courseLevelAPI = new CourseLevelAPI ();\r\n    courseAPI = new CourseAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    \r\n    function handleDeleteCourse (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setPendingCourseID (Number (button.value));\r\n        props.dialogController.setDialogTitle (\"Confirm Delete Course\");\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to delete this course ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function executeCourseDeletion (): Promise<void> {\r\n        try {\r\n            await courseAPI.deleteCourse (pendingCourseID);\r\n            loadCourseTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    function openViewDetailDialog (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        courseID = Number (button.value);\r\n        for (i = 0; i < courseHolder.length; i++){\r\n            courseSample = courseHolder[i];\r\n            if (courseSample.courseID === courseID){\r\n                setCourse (courseSample);\r\n                rawDate = new Date (courseSample.lastModified); \r\n                if (rawDate.toString () === new Date (0).toString ()){\r\n                    setFormattedLastModified (\"Has not been modified yet !\");\r\n                }\r\n                else {\r\n                    setFormattedLastModified (rawDate.toLocaleString ());\r\n                }\r\n                rawDate = new Date (courseSample.dateCreated);\r\n                setFormattedDateCreated (rawDate.toLocaleString ());\r\n                break;\r\n            }\r\n        }\r\n        setShowViewDetailDialog (true);\r\n    }\r\n\r\n    function closeViewDetailDialog (): void {\r\n        setShowViewDetailDialog (false);\r\n    }\r\n    \r\n    function openCreateCourseForm (): void {\r\n        setCourse (new Course ());\r\n        loadCourseTypeDropdownList ().catch (\r\n                (error: unknown) => {\r\n                    console.error (error);\r\n                }\r\n        );\r\n        setShowCreateCourseForm (true);\r\n    }\r\n\r\n    function closeCreateCourseForm (): void {\r\n        setShowCreateCourseForm (false);\r\n    }\r\n    \r\n    async function openEditCourseForm (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        button = event.target as HTMLButtonElement;\r\n        courseID = Number (button.value);\r\n        try {\r\n            for (i = 0; i < courseHolder.length; i++){\r\n                courseSample = courseHolder[i];\r\n                if (courseSample.courseID === courseID){\r\n                    setCourse (courseSample);\r\n                    await loadCourseTypeDropdownList ();\r\n                    setSelectedCourseTypeID (courseSample.courseType.typeID);\r\n                    break;\r\n                }\r\n            }\r\n            setShowEditCourseForm (true);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (error: unknown){\r\n            return Promise.reject (error);\r\n        }\r\n    }\r\n\r\n    function closeEditCourseForm (): void {\r\n        setShowEditCourseForm (false);\r\n    }\r\n\r\n    function handleChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ): void {\r\n        updatedCourse = new Course (course);\r\n        htmlElement = event.target;\r\n        switch (htmlElement.name){\r\n            default:\r\n                throw new Error (\"Unknown html element !\");\r\n\r\n            case \"courseNameField\":\r\n                updatedCourse.courseName = htmlElement.value;\r\n                break;\r\n\r\n            case \"descriptionTextarea\":\r\n                updatedCourse.description = htmlElement.value;\r\n                break;\r\n\r\n            case \"courseTypeDropdownList\":\r\n                setSelectedCourseTypeID (Number (htmlElement.value));\r\n                break;\r\n\r\n            case \"courseLevelDropdownList\":\r\n                setSelectedCourseLevelID (Number (htmlElement.value));\r\n                break;\r\n\r\n            case \"tuitionFeeField\":\r\n                updatedCourse.tuitionFee = parseFloat (htmlElement.value);\r\n                break;\r\n        }\r\n        setCourse (updatedCourse);\r\n    }\r\n\r\n    async function loadCourseTypeDropdownList (): Promise<void> {\r\n        try {\r\n            updatedCourseTypeHolder \r\n                = await courseTypeAPI.getAllCourseTypeInTheSystem (); \r\n            setCourseTypeHolder (updatedCourseTypeHolder);\r\n            defaultSelectedID = updatedCourseTypeHolder[0].typeID;\r\n            setSelectedCourseTypeID (defaultSelectedID);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadCourseLevelDropdownList (): Promise<void> {\r\n        try {\r\n            updatedCourseLevelHolder\r\n                = await courseLevelAPI.getAllCourseLevelByTypeID (\r\n                        selectedCourseTypeID\r\n                ); \r\n            setCourseLevelHolder (updatedCourseLevelHolder);\r\n            defaultSelectedID = updatedCourseLevelHolder[0].levelID;\r\n            setSelectedCourseLevelID (defaultSelectedID);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (\r\n                            apiError.name\r\n                    );\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }  \r\n    }\r\n\r\n    async function createCourse (\r\n            event: FormEvent<HTMLFormElement>\r\n    ): Promise<void> {\r\n        event.preventDefault ();\r\n        for (i = 0; i < courseTypeHolder.length; i++){\r\n            courseType = courseTypeHolder[i];\r\n            if (courseType.typeID === selectedCourseTypeID){\r\n                selectedCourseType = courseType;\r\n                break;\r\n            }\r\n        }\r\n        for (i = 0; i < courseLevelHolder.length; i++){\r\n            courseLevel = courseLevelHolder[i];\r\n            if (courseLevel.levelID === selectedCourseLevelID){\r\n                selectedCourseLevel = courseLevel;\r\n                break;\r\n            }\r\n        }\r\n        course.courseType = selectedCourseType;\r\n        course.courseLevel = selectedCourseLevel; \r\n        try {\r\n            await courseAPI.createNewCourse (course);\r\n            closeCreateCourseForm ();\r\n            props.dialogController.setDialogTitle (\"Course Created !\");\r\n            props.dialogController.setDialogBody (\r\n                `The course [${course.courseName}] \r\n                has been created successfully.`\r\n            );\r\n            props.dialogController.setDialogType (\"inform\");\r\n            props.dialogController.setShowDialog (true);\r\n            loadCourseTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function editCourse (\r\n            event: FormEvent<HTMLFormElement>\r\n    ): Promise<void> {\r\n        event.preventDefault ();\r\n        for (i = 0; i < courseTypeHolder.length; i++){\r\n            courseType = courseTypeHolder[i];\r\n            if (courseType.typeID === selectedCourseTypeID){\r\n                selectedCourseType = courseType;\r\n                break;\r\n            }\r\n        }\r\n        for (i = 0; i < courseLevelHolder.length; i++){\r\n            courseLevel = courseLevelHolder[i];\r\n            if (courseLevel.levelID === selectedCourseLevelID){\r\n                selectedCourseLevel = courseLevel;\r\n                break;\r\n            }\r\n        }\r\n        course.courseType = selectedCourseType;\r\n        course.courseLevel = selectedCourseLevel; \r\n        try {\r\n            await courseAPI.updateCourse (course);\r\n            closeEditCourseForm ();\r\n            props.dialogController.setDialogTitle (\"Course Saved !\");\r\n            props.dialogController.setDialogBody (\r\n                `The course [${course.courseName}] \r\n                has been saved successfully.`\r\n            );\r\n            props.dialogController.setDialogType (\"inform\");\r\n            props.dialogController.setShowDialog (true);\r\n            loadCourseTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadCourseTable (): Promise<void> {\r\n        try {\r\n            courseDataPage = await courseAPI.getAllCourse (\r\n                    pageIndex\r\n                    , pageSize\r\n            ); \r\n            setTotalRowCount (courseDataPage.totalRowCount);\r\n            setCourseHolder (courseDataPage.pageDataHolder);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    useEffect (\r\n        () => {\r\n            loadCourseTable ().catch (\r\n                    (error: unknown) => {\r\n                        console.error (error);\r\n                    }\r\n            );\r\n        }\r\n        , []\r\n    );\r\n\r\n    useEffect (\r\n        () => {\r\n            if (selectedCourseTypeID !== 0){\r\n                loadCourseLevelDropdownList ().catch (\r\n                        (error: unknown) => {\r\n                            console.error (error);\r\n                        }\r\n                );\r\n            }\r\n        }\r\n        , [selectedCourseTypeID]\r\n    );\r\n    \r\n    useEffect (\r\n        () => {\r\n            if (props.dialogController.dialogIsConfirmed === true){\r\n                executeCourseDeletion ().catch (\r\n                        (error: unknown) => {\r\n                            console.error (error);\r\n                        }\r\n                );\r\n                props.dialogController.setDialogIsConfirmed (false); \r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <Modal\r\n                show = {showCreateCourseForm}\r\n                backdrop = \"static\"\r\n                keyboard = {false}\r\n                size = \"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>New Course Information</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form \r\n                        id = \"CreateCourseForm\"\r\n                        className = \"pt-2 pr-5 pl-5 pb-0\"\r\n                        onSubmit = {\r\n                            (event) => {\r\n                                createCourse (event).catch (\r\n                                        (error: unknown) => {\r\n                                            console.error (error);\r\n                                        }\r\n                                );\r\n                            }\r\n                        }\r\n                    >\r\n                        <Form.Group controlId = \"CourseNameField\">\r\n                            <Form.Label>\r\n                                Course Name:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type = \"text\"\r\n                                autoComplete = \"on\"\r\n                                autoFocus = {true}\r\n                                name = \"courseNameField\"\r\n                                pattern = \"^[\\p{L} .'-]+$\"\r\n                                placeholder = \"Name for the new course ?\"\r\n                                required = {true}\r\n                                spellCheck = {false}\r\n                                value = {course.courseName}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className = \"text-muted\">\r\n                                format: characters only !  \r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"DescriptionTextarea\">\r\n                            <Form.Label>\r\n                                Description:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                as = \"textarea\"\r\n                                autoComplete = \"off\"\r\n                                autoFocus = {false}\r\n                                name = \"descriptionTextarea\"\r\n                                placeholder = \"Description for the new course ?\"\r\n                                required = {false}\r\n                                spellCheck = {true}\r\n                                rows = {5}\r\n                                value = {course.description}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"CourseTypeDropdownList\">\r\n                            <Form.Label>\r\n                                Course Type:\r\n                            </Form.Label>\r\n                            <Form.Control \r\n                                as = \"select\" \r\n                                name = \"courseTypeDropdownList\"\r\n                                autoFocus = {false}\r\n                                required = {true}\r\n                                value = {selectedCourseTypeID}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (\r\n                                            event\r\n                                        );\r\n                                    } \r\n                                }\r\n                            >\r\n                                {courseTypeHolder.map (\r\n                                    (\r\n                                            courseType\r\n                                    ) => renderCourseTypeDropdownList (\r\n                                            courseType\r\n                                    )  \r\n                                )}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"CourseLevelDropdownList\">\r\n                            <Form.Label>\r\n                                Course Level:\r\n                            </Form.Label>\r\n                            <Form.Control \r\n                                as = \"select\" \r\n                                name = \"courseLevelDropdownList\"\r\n                                autoFocus = {false}\r\n                                required = {true}\r\n                                value = {selectedCourseLevelID}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (\r\n                                            event\r\n                                        );\r\n                                    } \r\n                                }\r\n                            >\r\n                                {courseLevelHolder.map (\r\n                                    (\r\n                                            courseLevel\r\n                                    ) => renderCourseLevelDropdownList (\r\n                                            courseLevel\r\n                                    )  \r\n                                )}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"TuitionFeeField\">\r\n                            <Form.Label>\r\n                                Tuition Fee (VND):\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type = \"number\"\r\n                                autoComplete = \"on\"\r\n                                autoFocus = {false}\r\n                                name = \"tuitionFeeField\"\r\n                                placeholder = \"Price of the new course ?\"\r\n                                required = {true}\r\n                                spellCheck = {false}\r\n                                min = {0}\r\n                                step = {500}\r\n                                value = {course.tuitionFee}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className = \"text-muted\">\r\n                                format: numbers only !  \r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button \r\n                        variant = \"success\" \r\n                        type = \"submit\"\r\n                        form = \"CreateCourseForm\" \r\n                    >\r\n                        Create Course\r\n                    </Button>\r\n                    <Button \r\n                        variant = \"outline-secondary\" \r\n                        onClick = {closeCreateCourseForm}\r\n                    >\r\n                        Cancel\r\n                    </Button>   \r\n                </Modal.Footer>\r\n            </Modal>\r\n            <Modal\r\n                show = {showViewDetailDialog}\r\n                backdrop = \"static\"\r\n                keyboard = {false}\r\n                size = \"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>Course Details</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form\r\n                        className = \"pt-2 pr-5 pl-5 pb-0\"\r\n                    >\r\n                        <Form.Row>\r\n                            <Form.Group as = {Row} controlId = \"CourseIDInfo\">\r\n                                <Form.Label \r\n                                    column = {true}\r\n                                    md = {5}\r\n                                >\r\n                                    + Course ID:\r\n                                </Form.Label>\r\n                                <Col md = {7}>\r\n                                    <Form.Control \r\n                                        plaintext = {true} \r\n                                        readOnly = {true} \r\n                                        value = {course.courseID}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as = {Row} controlId = \"CourseNameInfo\">\r\n                                <Form.Label \r\n                                    column = {true}\r\n                                    md = {5}\r\n                                >\r\n                                    + Course Name:\r\n                                </Form.Label>\r\n                                <Col md = {7}>\r\n                                    <Form.Control \r\n                                        plaintext = {true} \r\n                                        readOnly = {true} \r\n                                        value = {course.courseName}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        \r\n                        <Form.Group controlId = \"DescriptionInfo\">\r\n                            <Form.Label>\r\n                                + Description:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                as = \"textarea\"\r\n                                readOnly = {true}\r\n                                rows = {5}\r\n                                value = {course.description}\r\n                            />\r\n                        </Form.Group>\r\n                        \r\n                        <Form.Row>\r\n                            <Form.Group as = {Row} controlId = \"CourseTypeInfo\">\r\n                                <Form.Label \r\n                                    column = {true}\r\n                                    md = {5}\r\n                                >\r\n                                    + Course Type:\r\n                                </Form.Label>\r\n                                <Col md = {7}>\r\n                                    <Form.Control \r\n                                        plaintext = {true} \r\n                                        readOnly = {true} \r\n                                        value = {course.courseType.typeName}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group \r\n                                as = {Row} \r\n                                controlId = \"CourseLevelInfo\"\r\n                            >\r\n                                <Form.Label \r\n                                    column = {true}\r\n                                    md = {5}\r\n                                >\r\n                                    + Course Level:\r\n                                </Form.Label>\r\n                                <Col md = {7}>\r\n                                    <Form.Control \r\n                                        plaintext = {true} \r\n                                        readOnly = {true} \r\n                                        value = {course.courseLevel.levelName}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n\r\n                        <Form.Group as = {Row} controlId = \"TuitionFeeInfo\">\r\n                            <Form.Label\r\n                                column = {true}\r\n                                md = {3}\r\n                            >\r\n                                + Tuition Fee (VND):\r\n                            </Form.Label>\r\n                            <Col md = {9}>\r\n                                <Form.Control\r\n                                    plaintext = {true} \r\n                                    readOnly = {true}\r\n                                    value = {\r\n                                        `${\r\n                                            course.tuitionFee.toLocaleString ()\r\n                                        } đ`\r\n                                    }\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as = {Row} controlId = \"LastModifiedInfo\">\r\n                            <Form.Label\r\n                                column = {true}\r\n                                md = {3}\r\n                            >\r\n                                + Last Modified:\r\n                            </Form.Label>\r\n                            <Col md = {9}>\r\n                                <Form.Control\r\n                                    plaintext = {true} \r\n                                    readOnly = {true}\r\n                                    value = {formattedLastModified}\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as = {Row} controlId = \"DateCreatedInfo\">\r\n                            <Form.Label\r\n                                column = {true}\r\n                                md = {3}\r\n                            >\r\n                                + Date Created:\r\n                            </Form.Label>\r\n                            <Col md = {9}>\r\n                                <Form.Control\r\n                                    plaintext = {true} \r\n                                    readOnly = {true}\r\n                                    value = {formattedDateCreated}\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button \r\n                        variant = \"info\" \r\n                        onClick = {closeViewDetailDialog}\r\n                    >\r\n                        Close\r\n                    </Button>   \r\n                </Modal.Footer>\r\n            </Modal>\r\n            <Modal\r\n                show = {showEditCourseForm}\r\n                backdrop = \"static\"\r\n                keyboard = {false}\r\n                size = \"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>Edit Course</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form \r\n                        id = \"EditCourseForm\"\r\n                        className = \"pt-2 pr-5 pl-5 pb-0\"\r\n                        onSubmit = {\r\n                            (event) => {\r\n                                editCourse (event).catch (\r\n                                        (error: unknown) => {\r\n                                            console.error (error);\r\n                                        }\r\n                                );\r\n                            }\r\n                        }\r\n                    >\r\n                        <Form.Group controlId = \"CourseNameField\">\r\n                            <Form.Label>\r\n                                Course Name:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type = \"text\"\r\n                                autoComplete = \"on\"\r\n                                autoFocus = {true}\r\n                                name = \"courseNameField\"\r\n                                pattern = \"^[\\p{L} .'-]+$\"\r\n                                placeholder = \"Name for the course ?\"\r\n                                required = {true}\r\n                                spellCheck = {false}\r\n                                value = {course.courseName}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className = \"text-muted\">\r\n                                format: characters only !  \r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"DescriptionTextarea\">\r\n                            <Form.Label>\r\n                                Description:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                as = \"textarea\"\r\n                                autoComplete = \"off\"\r\n                                autoFocus = {false}\r\n                                name = \"descriptionTextarea\"\r\n                                placeholder = \"Description for the course ?\"\r\n                                required = {false}\r\n                                spellCheck = {true}\r\n                                rows = {5}\r\n                                value = {course.description}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"CourseTypeDropdownList\">\r\n                            <Form.Label>\r\n                                Course Type:\r\n                            </Form.Label>\r\n                            <Form.Control \r\n                                as = \"select\" \r\n                                name = \"courseTypeDropdownList\"\r\n                                autoFocus = {false}\r\n                                required = {true}\r\n                                value = {selectedCourseTypeID}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (\r\n                                            event\r\n                                        );\r\n                                    } \r\n                                }\r\n                            >\r\n                                {courseTypeHolder.map (\r\n                                    (\r\n                                            courseType\r\n                                    ) => renderCourseTypeDropdownList (\r\n                                            courseType\r\n                                    )  \r\n                                )}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"CourseLevelDropdownList\">\r\n                            <Form.Label>\r\n                                Course Level:\r\n                            </Form.Label>\r\n                            <Form.Control \r\n                                as = \"select\" \r\n                                name = \"courseLevelDropdownList\"\r\n                                autoFocus = {false}\r\n                                required = {true}\r\n                                value = {selectedCourseLevelID}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (\r\n                                            event\r\n                                        );\r\n                                    } \r\n                                }\r\n                            >\r\n                                {courseLevelHolder.map (\r\n                                    (\r\n                                            courseLevel\r\n                                    ) => renderCourseLevelDropdownList (\r\n                                            courseLevel\r\n                                    )  \r\n                                )}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"TuitionFeeField\">\r\n                            <Form.Label>\r\n                                Tuition Fee (VND):\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type = \"number\"\r\n                                autoComplete = \"on\"\r\n                                autoFocus = {false}\r\n                                name = \"tuitionFeeField\"\r\n                                placeholder = \"Price of the course ?\"\r\n                                required = {true}\r\n                                spellCheck = {false}\r\n                                min = {0}\r\n                                step = {500}\r\n                                value = {course.tuitionFee}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className = \"text-muted\">\r\n                                format: numbers only !  \r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button \r\n                        variant = \"success\" \r\n                        type = \"submit\"\r\n                        form = \"EditCourseForm\" \r\n                    >\r\n                        Save\r\n                    </Button>\r\n                    <Button \r\n                        variant = \"outline-secondary\" \r\n                        onClick = {closeEditCourseForm}\r\n                    >\r\n                        Cancel\r\n                    </Button>   \r\n                </Modal.Footer>\r\n            </Modal>\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/\"}}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/admin-console\"}}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Manage Course Functions\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1 className = \"mb-3\">\r\n                                <span className = \"mr-3\">\r\n                                    Manage Course\r\n                                </span>\r\n                                <Button \r\n                                    variant = \"success\"\r\n                                    type = \"button\"\r\n                                    onClick = {openCreateCourseForm}\r\n                                >\r\n                                    Create New\r\n                                </Button>\r\n                            </h1>\r\n                            <Form>\r\n                                <Table responsive = \"md\" hover = {true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                Course Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Course Type\r\n                                            </th>\r\n                                            <th>\r\n                                                Course Level\r\n                                            </th>\r\n                                            <th>\r\n                                                Tuition Fee\r\n                                            </th>\r\n                                            <th>\r\n                                                Actions\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {courseHolder.map (\r\n                                            (\r\n                                                    course\r\n                                                    , index\r\n                                            ) => renderCourseTable (\r\n                                                    course\r\n                                                    , index\r\n                                                    , openViewDetailDialog\r\n                                                    , openEditCourseForm\r\n                                                    , handleDeleteCourse\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx",["243","244"],"// Import package members section:\r\nimport React, { \r\n    MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { \r\n    Breadcrumb\r\n    , Button\r\n    , Col\r\n    , Container\r\n    , Form\r\n    , Row\r\n    , Table \r\n} from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { UserAPI } from \"../../common/service/UserAPI\";\r\nimport { User } from \"../../model/User\";\r\n\r\nfunction renderUserTable (\r\n        user: User\r\n        , index: number\r\n        , handleDisableUser: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n        , enableUser: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void>\r\n        , handleDeleteUser: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n): ReactElement {\r\n    return (\r\n        <tr key = {user.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {user.userID}\r\n            </td>\r\n            <td>\r\n                {`${\r\n                    user.firstName\r\n                } ${\r\n                    user.middleName\r\n                } ${\r\n                    user.lastName\r\n                }`}\r\n            </td>\r\n            <td>\r\n                {user.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {user.email}\r\n            </td>\r\n            <td>\r\n                {user.userName}\r\n            </td>\r\n            <td>\r\n                {user.accountStatus}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"warning\"\r\n                    type = \"button\"\r\n                    value = {user.userID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            handleDisableUser (event);\r\n                        }\r\n                    }\r\n                >\r\n                    Disable\r\n                </Button>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {user.userID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            enableUser (event).catch (\r\n                                    (error: unknown) => {\r\n                                        console.error (error);\r\n                                    }\r\n                            );\r\n                        }\r\n                    }\r\n                >\r\n                    Enable\r\n                </Button>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {user.userID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            handleDeleteUser (event);\r\n                        }\r\n                    }\r\n                >\r\n                    Delete\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface DisableOrDeleteAccountPageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function DisableOrDeleteAccountPage (\r\n    props: DisableOrDeleteAccountPageProps\r\n): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [userHolder, setUserHolder] = useState<User[]> ([]);\r\n    let userAPI: UserAPI;\r\n    let typeGuardian: TypeGuard;\r\n    let [pageIndex] = useState<number> (0);\r\n    let [pageSize] = useState<number> (10);\r\n    let button: HTMLButtonElement | undefined;\r\n    let [pendingUserID, setPendingUserID] = useState<number> (0);\r\n    let [pendingAction, setPendingAction] = useState<string> (\"\");\r\n\r\n    userAPI = new UserAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    \r\n    function handleDisableUser (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setPendingUserID (Number (button.value));\r\n        setPendingAction (\"Disable user\");\r\n        props.dialogController.setDialogTitle (\"Confirm Disable User\");\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to disabe this user ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function enableUser (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        button = event.target as HTMLButtonElement;\r\n        try {\r\n            await userAPI.enableUser (Number (button.value));\r\n            loadUserTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function executeUserDisablement (): Promise<void> {\r\n        try {\r\n            await userAPI.disableAnotherUser (\r\n                    pendingUserID\r\n            );\r\n            loadUserTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    function handleDeleteUser (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setPendingUserID (Number (button.value));\r\n        setPendingAction (\"Delete user\");\r\n        props.dialogController.setDialogTitle (\"Confirm Delete User\");\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to delete this user ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function executeUserDeletion (): Promise<void> {\r\n        try {\r\n            await userAPI.deleteAnotherUser (pendingUserID);\r\n            loadUserTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadUserTable (): Promise<void> {\r\n        try {\r\n            setUserHolder (\r\n                await userAPI.getAllUserExcludingCurrentLoggedInUser (\r\n                    pageIndex\r\n                    , pageSize\r\n                )\r\n            );\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    useEffect (\r\n        (): void => {\r\n            loadUserTable ().catch (\r\n                    (error: unknown) => {\r\n                        console.error (error);\r\n                    }\r\n            );\r\n        }\r\n        , []\r\n    );\r\n\r\n    useEffect (\r\n        (): void => {\r\n            if (props.dialogController.dialogIsConfirmed === true){\r\n                if (pendingAction === \"Disable user\"){\r\n                    executeUserDisablement ().catch (\r\n                            (error: unknown) => {\r\n                                console.error (error);\r\n                            }\r\n                    );\r\n                }\r\n                else if (pendingAction === \"Delete user\"){\r\n                    executeUserDeletion ().catch (\r\n                            (error: unknown) => {\r\n                                console.error (error);\r\n                            }\r\n                    );\r\n                }\r\n                props.dialogController.setDialogIsConfirmed (false); \r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/\"}}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/admin-console\"}}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Disable Or Delete Account\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1 className = \"mb-3\">\r\n                                Disable Or Delete Account\r\n                            </h1>\r\n                            <Form>\r\n                                <Table responsive = \"md\" hover = {true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                User ID\r\n                                            </th>\r\n                                            <th>\r\n                                                Full Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Phone Number\r\n                                            </th>\r\n                                            <th>\r\n                                                Email\r\n                                            </th>\r\n                                            <th>\r\n                                                User Name\r\n                                            </th>\r\n                                            <th>\r\n                                                AccountStatus\r\n                                            </th>\r\n                                            <th>\r\n                                                Actions\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {userHolder.map (\r\n                                            (\r\n                                                    user\r\n                                                    , index\r\n                                            ) => renderUserTable (\r\n                                                    user\r\n                                                    , index\r\n                                                    , handleDisableUser\r\n                                                    , enableUser\r\n                                                    , handleDeleteUser\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\select_role_page\\SelectRolePage.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\admin\\ManageStudentInCoursePage.tsx",["245","246","247","248"],"// Import package members section:\r\nimport React, { \r\n    MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { \r\n    Breadcrumb\r\n    , Button\r\n    , Col\r\n    , Container\r\n    , Modal\r\n    , Row\r\n    , Table \r\n} from \"react-bootstrap\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { DataPage } from \"../../App\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { CourseAPI } from \"../../common/service/CourseAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { UserAPI } from \"../../common/service/UserAPI\";\r\nimport { User } from \"../../model/User\";\r\n\r\nfunction renderStudentTable (\r\n        user: User\r\n        , index: number\r\n        , addAStudentToCourse: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void>\r\n): ReactElement {\r\n    return (\r\n        <tr key = {user.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {user.userID}\r\n            </td>\r\n            <td>\r\n                {`${\r\n                    user.firstName\r\n                } ${\r\n                    user.middleName\r\n                } ${\r\n                    user.lastName\r\n                }`}\r\n            </td>\r\n            <td>\r\n                {user.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {user.email}\r\n            </td>\r\n            <td>\r\n                {user.userName}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {user.userID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            addAStudentToCourse (event).catch (\r\n                                    (error: unknown) => {\r\n                                        console.error (error);\r\n                                    }\r\n                            );\r\n                        }\r\n                    }\r\n                >\r\n                    Add\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nfunction renderStudentInTheCourseTable (\r\n    user: User\r\n    , index: number\r\n    , handleRemoveAStudentFromCourse: (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ) => void \r\n): ReactElement {\r\n    return (\r\n        <tr key = {user.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {user.userID}\r\n            </td>\r\n            <td>\r\n                {`${\r\n                    user.firstName\r\n                } ${\r\n                    user.middleName\r\n                } ${\r\n                    user.lastName\r\n                }`}\r\n            </td>\r\n            <td>\r\n                {user.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {user.email}\r\n            </td>\r\n            <td>\r\n                {user.userName}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {user.userID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            handleRemoveAStudentFromCourse (event);\r\n                        }\r\n                    }\r\n                >\r\n                    Remove\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface UrlParameter {\r\n    courseID: string;\r\n}\r\n\r\ninterface ManageStudentInCoursePageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function ManageStudentInCoursePage (\r\n        props: ManageStudentInCoursePageProps\r\n): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [showAddStudentDialog, setShowAddStudentDialog] \r\n        = useState<boolean> (false);\r\n    let studentDataPage: DataPage<User> | undefined;\r\n    let [studentHolder, setStudentHolder] = useState<User[]> ([]);\r\n    let userAPI: UserAPI;\r\n    let typeGuardian: TypeGuard;\r\n    let [pageIndex] = useState<number> (0);\r\n    let [pageSize] = useState<number> (10);\r\n    let [totalRowCount, setTotalRowCount] = useState<number> (0);\r\n    let courseID = useParams<UrlParameter> ().courseID;\r\n    let button: HTMLButtonElement | undefined;\r\n    let courseAPI: CourseAPI;\r\n    let [studentInTheCourseHolder, setStudentInTheCourseHolder] \r\n        = useState<User[]> ([]);\r\n    let [pageIndex2] = useState<number> (0);\r\n    let [pageSize2] = useState<number> (10);\r\n    let [totalRowCount2, setTotalRowCount2] = useState<number> (0);\r\n    let [pendingUserID, setPendingUserID] = useState<number> (0);\r\n\r\n    userAPI = new UserAPI ();\r\n    courseAPI = new CourseAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    \r\n    function openAddStudentDialog (): void {\r\n        loadStudentTable ().catch (\r\n                (error: unknown) => {\r\n                    console.error (error);\r\n                }\r\n        );\r\n        setShowAddStudentDialog (true);\r\n    }\r\n\r\n    function closeAddStudentDialog (): void {\r\n        setShowAddStudentDialog (false);\r\n    }\r\n\r\n    function handleRemoveAStudentFromCourse (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setPendingUserID (Number (button.value));\r\n        props.dialogController.setDialogTitle (\r\n                \"Confirm Remove Student From Course\"\r\n        );\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to remove this student from the course ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function executeAStudentFromCourseRemoval (): Promise<void> {\r\n        try {\r\n            await courseAPI.removeAStudentFromCourse (\r\n                    pendingUserID\r\n                    , Number (courseID)\r\n            );\r\n            loadStudentInTheCourseTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function addAStudentToCourse (\r\n        event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        button = event.target as HTMLButtonElement;\r\n        try {\r\n            await courseAPI.addAStudentToCourse (\r\n                    Number (button.value)\r\n                    , Number (courseID)\r\n            );\r\n            loadStudentTable ();\r\n            loadStudentInTheCourseTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadStudentTable (): Promise<void> {\r\n        try {\r\n            studentDataPage \r\n                = await userAPI.getAllStudentExcludingStudentInTheCourse (\r\n                    Number (courseID)\r\n                    , pageIndex\r\n                    , pageSize\r\n            );\r\n            setTotalRowCount (studentDataPage.totalRowCount);\r\n            setStudentHolder (studentDataPage.pageDataHolder);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadStudentInTheCourseTable (): Promise<void> {\r\n        try {\r\n            studentDataPage \r\n                = await userAPI.getAllStudentAreInTheCourse (\r\n                    Number (courseID)\r\n                    , pageIndex2\r\n                    , pageSize2\r\n            );\r\n            setTotalRowCount2 (studentDataPage.totalRowCount);\r\n            setStudentInTheCourseHolder (studentDataPage.pageDataHolder);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n    \r\n    useEffect (\r\n        () => {\r\n            loadStudentInTheCourseTable ().catch (\r\n                    (error: unknown) => {\r\n                        console.error (error);\r\n                    }\r\n            );\r\n        }\r\n        , []\r\n    );\r\n    \r\n    useEffect (\r\n        () => {\r\n            if (props.dialogController.dialogIsConfirmed === true){\r\n                executeAStudentFromCourseRemoval ().catch (\r\n                        (error) => {\r\n                            console.error (error);\r\n                        }\r\n                );\r\n                props.dialogController.setDialogIsConfirmed (false); \r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <Modal\r\n                show = {showAddStudentDialog}\r\n                backdrop = \"static\"\r\n                keyboard = {false}\r\n                size = \"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>Add A Student</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Table responsive = \"md\" hover = {true}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    #\r\n                                </th>\r\n                                <th>\r\n                                    Student ID\r\n                                </th>\r\n                                <th>\r\n                                    Full Name\r\n                                </th>\r\n                                <th>\r\n                                    Phone Number\r\n                                </th>\r\n                                <th>\r\n                                    Email\r\n                                </th>\r\n                                <th>\r\n                                    User Name\r\n                                </th>\r\n                                <th>\r\n                                    Actions\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {studentHolder.map (\r\n                                (\r\n                                        user\r\n                                        , index\r\n                                ) => renderStudentTable (\r\n                                        user\r\n                                        , index\r\n                                        , addAStudentToCourse\r\n                                )\r\n                            )}\r\n                        </tbody>\r\n                    </Table>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button \r\n                        variant = \"info\" \r\n                        onClick = {closeAddStudentDialog}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/\"}}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/admin-console\"}}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {\r\n                                        {\r\n                                            to: \"/admin-console\"\r\n                                            + \"/manage-course-page\"\r\n                                        }\r\n                                    }\r\n                                >\r\n                                    Manage Course Functions\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Manage Student In Course Functions\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1 className = \"mb-3\">\r\n                                <span className = \"mr-3\">\r\n                                    Manage Student In Course\r\n                                </span>\r\n                                <Button \r\n                                    variant = \"success\"\r\n                                    type = \"button\"\r\n                                    onClick = {openAddStudentDialog}\r\n                                >\r\n                                    Add Student\r\n                                </Button>\r\n                            </h1>\r\n                            <Table responsive = \"md\" hover = {true}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            #\r\n                                        </th>\r\n                                        <th>\r\n                                            Student ID\r\n                                        </th>\r\n                                        <th>\r\n                                            Full Name\r\n                                        </th>\r\n                                        <th>\r\n                                            Phone Number\r\n                                        </th>\r\n                                        <th>\r\n                                            Email\r\n                                        </th>\r\n                                        <th>\r\n                                            User Name\r\n                                        </th>\r\n                                        <th>\r\n                                            Actions\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {studentInTheCourseHolder.map (\r\n                                        (\r\n                                                user\r\n                                                , index\r\n                                        ) => renderStudentInTheCourseTable (\r\n                                                user\r\n                                                , index\r\n                                                , handleRemoveAStudentFromCourse\r\n                                        )\r\n                                    )}\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\teacher\\TeacherDashboardPage.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\home_page_header\\HomePageHeader.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\RegisterFormAPI.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\User.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\RegisterForm.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\CourseLevelAPI.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\Course.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\CourseTypeAPI.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\CourseAPI.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\teacher_sidebar\\TeacherSidebar.tsx",["249"],"// Import package members section:\r\nimport React, { ReactElement, useState } from \"react\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\nimport './TeacherSidebar.css';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport function TeacherSidebar (): ReactElement {\r\n    \r\n    // Variables declaration:\r\n    let [sideBarActivated, setSideBarActivated] \r\n        = useState<string> (\"\");\r\n\r\n    function toggleSideBar (): void {\r\n        if (sideBarActivated !== \"activated\"){\r\n            setSideBarActivated (\"activated\");\r\n        }\r\n        else {\r\n            setSideBarActivated (\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div \r\n                id = \"SideBarButton\" \r\n                className = {\r\n                    `Side_Bar_Button_Z_Index \r\n                    ${sideBarActivated}`\r\n                } \r\n                onClick = {toggleSideBar} \r\n            >\r\n                <div id = \"Top\"></div>\r\n                <div id = \"Middle\"></div>\r\n                <div id = \"Bottom\"></div>\r\n            </div>\r\n            <nav \r\n                id = \"SideBar\" \r\n                className = {`Side_Bar_Z_Index ${sideBarActivated}`}\r\n            >\r\n                <ListGroup variant = \"flush\">\r\n                    <ListGroup.Item variant = \"light\" action = {true}>\r\n                        Cras justo odio\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>Dapibus ac facilisis in</ListGroup.Item>\r\n                    <ListGroup.Item>Morbi leo risus</ListGroup.Item>\r\n                    <ListGroup.Item>Porta ac consectetur ac</ListGroup.Item>\r\n                </ListGroup> \r\n            </nav>\r\n        </div>\r\n    );\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\CourseType.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\CourseLevel.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\student\\StudentDashboardPage.tsx",["250","251","252","253"],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\component\\student_sidebar\\StudentSidebar.tsx",["254"],"// Import package members section:\r\nimport React, { ReactElement, useState } from \"react\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\nimport './StudentSidebar.css';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport function StudentSidebar (): ReactElement {\r\n    \r\n    // Variables declaration:\r\n    let [sideBarActivated, setSideBarActivated] \r\n        = useState<string> (\"\");\r\n\r\n    function toggleSideBar (): void {\r\n        if (sideBarActivated !== \"activated\"){\r\n            setSideBarActivated (\"activated\");\r\n        }\r\n        else {\r\n            setSideBarActivated (\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div \r\n                id = \"SideBarButton\" \r\n                className = {\r\n                    `Side_Bar_Button_Z_Index \r\n                    ${sideBarActivated}`\r\n                } \r\n                onClick = {toggleSideBar} \r\n            >\r\n                <div id = \"Top\"></div>\r\n                <div id = \"Middle\"></div>\r\n                <div id = \"Bottom\"></div>\r\n            </div>\r\n            <nav \r\n                id = \"SideBar\" \r\n                className = {`Side_Bar_Z_Index ${sideBarActivated}`}\r\n            >\r\n                <ListGroup variant = \"flush\">\r\n                    <ListGroup.Item variant = \"light\" action = {true} href=\"\\student-dashboard\">\r\n                        Dashboard\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item variant = \"light\" action = {true} href=\"/student-dashboard-course/:courseID\">\r\n                        Course\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        Info\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        Test\r\n                    </ListGroup.Item>\r\n                </ListGroup> \r\n            </nav>\r\n        </div>\r\n    );\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\student\\CourseDetailPage.tsx",["255","256"],"import React, { useEffect, useState } from \"react\";\r\nimport { ReactElement } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport { useParams } from \"react-router\";\r\nimport { StudentSidebar } from \"../../common/component/student_sidebar/StudentSidebar\";\r\nimport { CourseAPI } from \"../../common/service/CourseAPI\";\r\nimport { Course } from \"../../model/Course\";\r\n\r\ninterface StudentDashboardPageProps {\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function CourseDetailPage(\r\n    props: StudentDashboardPageProps\r\n): ReactElement {  \r\n    let param: any = useParams();\r\n    let [course, setCourse] = useState<Course>(new Course());\r\n    let courseAPI: CourseAPI | undefined;\r\n    \r\n    useEffect(() => {\r\n        courseAPI = new CourseAPI();\r\n        courseAPI.getOneCourse(param.courseID).then(\r\n            (res) => {\r\n                setCourse(res.data);\r\n                // console.log(student.userName);\r\n            }\r\n        );\r\n    }, []);\r\n    \r\n    return(\r\n        <Container id=\"CourseDetailPage\">\r\n            {props.modalDialog}\r\n            <main>\r\n                <StudentSidebar />\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n        </Container>\r\n    );\r\n}",{"ruleId":"257","replacedBy":"258"},{"ruleId":"259","replacedBy":"260"},{"ruleId":"261","severity":1,"message":"262","line":40,"column":10,"nodeType":"263","messageId":"264","endLine":40,"endColumn":27},{"ruleId":"261","severity":1,"message":"265","line":18,"column":10,"nodeType":"263","messageId":"264","endLine":18,"endColumn":17},{"ruleId":"261","severity":1,"message":"266","line":18,"column":19,"nodeType":"263","messageId":"264","endLine":18,"endColumn":29},{"ruleId":"267","severity":1,"message":"268","line":25,"column":19,"nodeType":"269","endLine":25,"endColumn":32},{"ruleId":"261","severity":1,"message":"270","line":125,"column":22,"nodeType":"263","messageId":"264","endLine":125,"endColumn":35},{"ruleId":"261","severity":1,"message":"271","line":126,"column":20,"nodeType":"263","messageId":"264","endLine":126,"endColumn":31},{"ruleId":"267","severity":1,"message":"272","line":336,"column":11,"nodeType":"273","endLine":336,"endColumn":13,"suggestions":"274"},{"ruleId":"267","severity":1,"message":"275","line":350,"column":11,"nodeType":"273","endLine":350,"endColumn":53,"suggestions":"276"},{"ruleId":"277","severity":1,"message":"278","line":21,"column":28,"nodeType":"279","messageId":"280","endLine":21,"endColumn":30},{"ruleId":"277","severity":1,"message":"278","line":24,"column":22,"nodeType":"279","messageId":"280","endLine":24,"endColumn":24},{"ruleId":"277","severity":1,"message":"278","line":33,"column":19,"nodeType":"279","messageId":"280","endLine":33,"endColumn":21},{"ruleId":"277","severity":1,"message":"278","line":63,"column":27,"nodeType":"279","messageId":"280","endLine":63,"endColumn":29},{"ruleId":"277","severity":1,"message":"278","line":64,"column":60,"nodeType":"279","messageId":"280","endLine":64,"endColumn":62},{"ruleId":"277","severity":1,"message":"278","line":75,"column":27,"nodeType":"279","messageId":"280","endLine":75,"endColumn":29},{"ruleId":"277","severity":1,"message":"278","line":76,"column":56,"nodeType":"279","messageId":"280","endLine":76,"endColumn":58},{"ruleId":"277","severity":1,"message":"278","line":85,"column":27,"nodeType":"279","messageId":"280","endLine":85,"endColumn":29},{"ruleId":"277","severity":1,"message":"278","line":86,"column":48,"nodeType":"279","messageId":"280","endLine":86,"endColumn":50},{"ruleId":"277","severity":1,"message":"278","line":131,"column":27,"nodeType":"279","messageId":"280","endLine":131,"endColumn":29},{"ruleId":"277","severity":1,"message":"278","line":132,"column":48,"nodeType":"279","messageId":"280","endLine":132,"endColumn":50},{"ruleId":"277","severity":1,"message":"278","line":159,"column":27,"nodeType":"279","messageId":"280","endLine":159,"endColumn":29},{"ruleId":"277","severity":1,"message":"278","line":160,"column":54,"nodeType":"279","messageId":"280","endLine":160,"endColumn":56},{"ruleId":"277","severity":1,"message":"278","line":189,"column":27,"nodeType":"279","messageId":"280","endLine":189,"endColumn":29},{"ruleId":"277","severity":1,"message":"278","line":190,"column":56,"nodeType":"279","messageId":"280","endLine":190,"endColumn":58},{"ruleId":"277","severity":1,"message":"278","line":201,"column":27,"nodeType":"279","messageId":"280","endLine":201,"endColumn":29},{"ruleId":"277","severity":1,"message":"278","line":202,"column":63,"nodeType":"279","messageId":"280","endLine":202,"endColumn":65},{"ruleId":"261","severity":1,"message":"281","line":18,"column":10,"nodeType":"263","messageId":"264","endLine":18,"endColumn":17},{"ruleId":"261","severity":1,"message":"282","line":18,"column":19,"nodeType":"263","messageId":"264","endLine":18,"endColumn":29},{"ruleId":"267","severity":1,"message":"268","line":21,"column":19,"nodeType":"269","endLine":21,"endColumn":32},{"ruleId":"261","severity":1,"message":"283","line":6,"column":5,"nodeType":"263","messageId":"264","endLine":6,"endColumn":11},{"ruleId":"261","severity":1,"message":"284","line":6,"column":29,"nodeType":"263","messageId":"264","endLine":6,"endColumn":33},{"ruleId":"261","severity":1,"message":"285","line":6,"column":35,"nodeType":"263","messageId":"264","endLine":6,"endColumn":46},{"ruleId":"261","severity":1,"message":"286","line":6,"column":48,"nodeType":"263","messageId":"264","endLine":6,"endColumn":51},{"ruleId":"261","severity":1,"message":"287","line":6,"column":53,"nodeType":"263","messageId":"264","endLine":6,"endColumn":59},{"ruleId":"261","severity":1,"message":"288","line":9,"column":10,"nodeType":"263","messageId":"264","endLine":9,"endColumn":14},{"ruleId":"261","severity":1,"message":"289","line":10,"column":16,"nodeType":"263","messageId":"264","endLine":10,"endColumn":34},{"ruleId":"261","severity":1,"message":"290","line":67,"column":10,"nodeType":"263","messageId":"264","endLine":67,"endColumn":14},{"ruleId":"261","severity":1,"message":"291","line":67,"column":16,"nodeType":"263","messageId":"264","endLine":67,"endColumn":23},{"ruleId":"261","severity":1,"message":"292","line":68,"column":9,"nodeType":"263","messageId":"264","endLine":68,"endColumn":23},{"ruleId":"261","severity":1,"message":"293","line":69,"column":9,"nodeType":"263","messageId":"264","endLine":69,"endColumn":35},{"ruleId":"261","severity":1,"message":"294","line":71,"column":9,"nodeType":"263","messageId":"264","endLine":71,"endColumn":14},{"ruleId":"261","severity":1,"message":"295","line":73,"column":9,"nodeType":"263","messageId":"264","endLine":73,"endColumn":26},{"ruleId":"267","severity":1,"message":"268","line":77,"column":19,"nodeType":"269","endLine":77,"endColumn":32},{"ruleId":"261","severity":1,"message":"283","line":6,"column":5,"nodeType":"263","messageId":"264","endLine":6,"endColumn":11},{"ruleId":"261","severity":1,"message":"284","line":6,"column":29,"nodeType":"263","messageId":"264","endLine":6,"endColumn":33},{"ruleId":"261","severity":1,"message":"285","line":6,"column":35,"nodeType":"263","messageId":"264","endLine":6,"endColumn":46},{"ruleId":"261","severity":1,"message":"286","line":6,"column":48,"nodeType":"263","messageId":"264","endLine":6,"endColumn":51},{"ruleId":"261","severity":1,"message":"287","line":6,"column":53,"nodeType":"263","messageId":"264","endLine":6,"endColumn":59},{"ruleId":"261","severity":1,"message":"296","line":6,"column":66,"nodeType":"263","messageId":"264","endLine":6,"endColumn":71},{"ruleId":"261","severity":1,"message":"288","line":9,"column":10,"nodeType":"263","messageId":"264","endLine":9,"endColumn":14},{"ruleId":"261","severity":1,"message":"289","line":10,"column":16,"nodeType":"263","messageId":"264","endLine":10,"endColumn":34},{"ruleId":"261","severity":1,"message":"290","line":69,"column":10,"nodeType":"263","messageId":"264","endLine":69,"endColumn":14},{"ruleId":"261","severity":1,"message":"291","line":69,"column":16,"nodeType":"263","messageId":"264","endLine":69,"endColumn":23},{"ruleId":"261","severity":1,"message":"292","line":70,"column":9,"nodeType":"263","messageId":"264","endLine":70,"endColumn":23},{"ruleId":"261","severity":1,"message":"293","line":71,"column":9,"nodeType":"263","messageId":"264","endLine":71,"endColumn":35},{"ruleId":"261","severity":1,"message":"294","line":73,"column":9,"nodeType":"263","messageId":"264","endLine":73,"endColumn":14},{"ruleId":"261","severity":1,"message":"295","line":75,"column":9,"nodeType":"263","messageId":"264","endLine":75,"endColumn":26},{"ruleId":"267","severity":1,"message":"268","line":79,"column":19,"nodeType":"269","endLine":79,"endColumn":32},{"ruleId":"261","severity":1,"message":"297","line":176,"column":10,"nodeType":"263","messageId":"264","endLine":176,"endColumn":23},{"ruleId":"267","severity":1,"message":"298","line":534,"column":11,"nodeType":"273","endLine":534,"endColumn":13,"suggestions":"299"},{"ruleId":"267","severity":1,"message":"300","line":547,"column":11,"nodeType":"273","endLine":547,"endColumn":33,"suggestions":"301"},{"ruleId":"267","severity":1,"message":"302","line":561,"column":11,"nodeType":"273","endLine":561,"endColumn":53,"suggestions":"303"},{"ruleId":"267","severity":1,"message":"304","line":274,"column":11,"nodeType":"273","endLine":274,"endColumn":13,"suggestions":"305"},{"ruleId":"267","severity":1,"message":"306","line":297,"column":11,"nodeType":"273","endLine":297,"endColumn":53,"suggestions":"307"},{"ruleId":"261","severity":1,"message":"297","line":153,"column":10,"nodeType":"263","messageId":"264","endLine":153,"endColumn":23},{"ruleId":"261","severity":1,"message":"308","line":161,"column":10,"nodeType":"263","messageId":"264","endLine":161,"endColumn":24},{"ruleId":"267","severity":1,"message":"309","line":322,"column":11,"nodeType":"273","endLine":322,"endColumn":13,"suggestions":"310"},{"ruleId":"267","severity":1,"message":"311","line":336,"column":11,"nodeType":"273","endLine":336,"endColumn":53,"suggestions":"312"},{"ruleId":"261","severity":1,"message":"288","line":5,"column":10,"nodeType":"263","messageId":"264","endLine":5,"endColumn":14},{"ruleId":"261","severity":1,"message":"313","line":10,"column":10,"nodeType":"263","messageId":"264","endLine":10,"endColumn":16},{"ruleId":"261","severity":1,"message":"314","line":21,"column":10,"nodeType":"263","messageId":"264","endLine":21,"endColumn":16},{"ruleId":"261","severity":1,"message":"315","line":24,"column":9,"nodeType":"263","messageId":"264","endLine":24,"endColumn":19},{"ruleId":"267","severity":1,"message":"316","line":45,"column":8,"nodeType":"273","endLine":45,"endColumn":10,"suggestions":"317"},{"ruleId":"261","severity":1,"message":"288","line":5,"column":10,"nodeType":"263","messageId":"264","endLine":5,"endColumn":14},{"ruleId":"261","severity":1,"message":"314","line":17,"column":10,"nodeType":"263","messageId":"264","endLine":17,"endColumn":16},{"ruleId":"267","severity":1,"message":"318","line":21,"column":21,"nodeType":"269","endLine":21,"endColumn":36},"no-native-reassign",["319"],"no-negated-in-lhs",["320"],"@typescript-eslint/no-unused-vars","'ManageTeacherPage' is defined but never used.","Identifier","unusedVar","'student' is assigned a value but never used.","'setStudent' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'userAPI' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","'setPageNumber' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loadRegisterFormTable' and 'loadRoleDropdownList'. Either include them or remove the dependency array.","ArrayExpression",["321"],"React Hook useEffect has missing dependencies: 'executeRequestRejection' and 'props.dialogController'. Either include them or remove the dependency array.",["322"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'teacher' is assigned a value but never used.","'setTeacher' is assigned a value but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'Nav' is defined but never used.","'Navbar' is defined but never used.","'Link' is defined but never used.","'UserIndexSignature' is defined but never used.","'user' is assigned a value but never used.","'getUser' is assigned a value but never used.","'userID' is defined but never used.","'showUser' is defined but never used.","'match' is assigned a value but never used.","'studentID' is defined but never used.","'Table' is defined but never used.","'totalRowCount' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadCourseTable'. Either include it or remove the dependency array.",["323"],"React Hook useEffect has a missing dependency: 'loadCourseLevelDropdownList'. Either include it or remove the dependency array.",["324"],"React Hook useEffect has missing dependencies: 'executeCourseDeletion' and 'props.dialogController'. Either include them or remove the dependency array.",["325"],"React Hook useEffect has a missing dependency: 'loadUserTable'. Either include it or remove the dependency array.",["326"],"React Hook useEffect has missing dependencies: 'executeUserDeletion', 'executeUserDisablement', 'pendingAction', and 'props.dialogController'. Either include them or remove the dependency array.",["327"],"'totalRowCount2' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadStudentInTheCourseTable'. Either include it or remove the dependency array.",["328"],"React Hook useEffect has missing dependencies: 'executeAStudentFromCourseRemoval' and 'props.dialogController'. Either include them or remove the dependency array.",["329"],"'values' is defined but never used.","'course' is assigned a value but never used.","'param' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'a', 'courseAPI', and 'courseList'. Either include them or remove the dependency array. You can also do a functional update 'setCourseList(c => ...)' if you only need 'courseList' in the 'setCourseList' call.",["330"],"Assignments to the 'courseAPI' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","no-global-assign","no-unsafe-negation",{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},"Update the dependencies array to be: [loadRegisterFormTable, loadRoleDropdownList]",{"range":"351","text":"352"},"Update the dependencies array to be: [executeRequestRejection, props.dialogController, props.dialogController.dialogIsConfirmed]",{"range":"353","text":"354"},"Update the dependencies array to be: [loadCourseTable]",{"range":"355","text":"356"},"Update the dependencies array to be: [loadCourseLevelDropdownList, selectedCourseTypeID]",{"range":"357","text":"358"},"Update the dependencies array to be: [executeCourseDeletion, props.dialogController, props.dialogController.dialogIsConfirmed]",{"range":"359","text":"360"},"Update the dependencies array to be: [loadUserTable]",{"range":"361","text":"362"},"Update the dependencies array to be: [executeUserDeletion, executeUserDisablement, pendingAction, props.dialogController, props.dialogController.dialogIsConfirmed]",{"range":"363","text":"364"},"Update the dependencies array to be: [loadStudentInTheCourseTable]",{"range":"365","text":"366"},"Update the dependencies array to be: [executeAStudentFromCourseRemoval, props.dialogController, props.dialogController.dialogIsConfirmed]",{"range":"367","text":"368"},"Update the dependencies array to be: [a, courseAPI, courseList]",{"range":"369","text":"370"},[12158,12160],"[loadRegisterFormTable, loadRoleDropdownList]",[12586,12628],"[executeRequestRejection, props.dialogController, props.dialogController.dialogIsConfirmed]",[19723,19725],"[loadCourseTable]",[20055,20077],"[loadCourseLevelDropdownList, selectedCourseTypeID]",[20499,20541],"[executeCourseDeletion, props.dialogController, props.dialogController.dialogIsConfirmed]",[9370,9372],"[loadUserTable]",[10185,10227],"[executeUserDeletion, executeUserDisablement, pendingAction, props.dialogController, props.dialogController.dialogIsConfirmed]",[10752,10754],"[loadStudentInTheCourseTable]",[11178,11220],"[executeAStudentFromCourseRemoval, props.dialogController, props.dialogController.dialogIsConfirmed]",[1501,1503],"[a, courseAPI, courseList]"]
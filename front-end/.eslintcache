[{"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\index.tsx":"1","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\reportWebVitals.ts":"2","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\App.tsx":"3","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx":"4","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx":"5","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\User.tsx":"6","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx":"7","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx":"8","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx":"9"},{"size":628,"mtime":1611757241042,"results":"10","hashOfConfig":"11"},{"size":440,"mtime":1611753077758,"results":"12","hashOfConfig":"11"},{"size":778,"mtime":1612107710976,"results":"13","hashOfConfig":"11"},{"size":10664,"mtime":1612200670334,"results":"14","hashOfConfig":"11"},{"size":6700,"mtime":1612110676796,"results":"15","hashOfConfig":"11"},{"size":1192,"mtime":1611757241043,"results":"16","hashOfConfig":"11"},{"size":3738,"mtime":1612195930604,"results":"17","hashOfConfig":"11"},{"size":463,"mtime":1611757241039,"results":"18","hashOfConfig":"11"},{"size":462,"mtime":1611757241040,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"19e5i4x",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":1,"warningCount":8,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\index.tsx",[],["42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58"],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\reportWebVitals.ts",["59"],"import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\App.tsx",["60","61"],"import React, { ReactElement } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport { EditStudentInfo } from './page/EditStudentInfo';\r\nimport { SignUpPage } from './page/SignUpPage';\r\n\r\nexport function App (): ReactElement {\r\n\r\n\r\n  /*\r\n   * function deleteUser (event: MouseEvent<HTMLButtonElement>){\r\n   *   event.preventDefault ();\r\n   *   userAPI = new UserAPI ();\r\n   *   userID = user.userID;\r\n   *   userAPI.deleteUser (userID);\r\n   * }\r\n   */\r\n\r\n  return (\r\n    <Switch>\r\n        <Route exact path=\"/\">\r\n          <SignUpPage />\r\n\r\n        </Route>\r\n        <Route exact path=\"/editStudentInfo/:studentID\">\r\n          <EditStudentInfo />\r\n        </Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\n\r\n","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx",["62","63","64","65","66","67","68","69","70"],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx",["71"],"import React, { \r\n    ChangeEvent\r\n    , FormEvent\r\n    , MouseEvent\r\n    , ReactElement\r\n    , useState \r\n} from 'react';\r\nimport { User, UserIndexSignature } from '../model/User';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { \r\n    Button, Col, Container, Form, FormControl, Nav, Navbar, Row \r\n} from 'react-bootstrap';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nexport function SignUpPage (): ReactElement {\r\n    let [user, setUser] = useState<User> (new User ());\r\n    let updatedUser: User | undefined;\r\n    let inputField: \r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let history = useHistory();\r\n    // let userID: string;\r\n\r\n    function handleUserChange (\r\n        event: ChangeEvent<\r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ): void {  \r\n        updatedUser = user;\r\n        inputField = event.target;\r\n        updatedUser[\r\n            inputField.name as keyof UserIndexSignature\r\n        ] = inputField.value;\r\n        setUser (updatedUser);\r\n    } \r\n    \r\n    function signUp (event: FormEvent<HTMLFormElement>){\r\n        event.preventDefault ();\r\n        userAPI = new UserAPI ();\r\n        userAPI.registerUser (user);  \r\n    }\r\n\r\n    function add (){\r\n        history.push(`/editStudentInfo/2`);\r\n    }\r\n\r\n    return (\r\n        <Container fluid = {true} id = \"PageContentContainer\"> \r\n            <Container fluid = {true} id = \"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                    <Navbar bg = \"dark\" variant = \"dark\">\r\n                        <Navbar.Brand as = {Link} to = \"/\">\r\n                            Demo Prototype\r\n                        </Navbar.Brand>\r\n                        <Nav className = \"mr-auto\">\r\n                            <Nav.Link as = {Link} to = \"/\">\r\n                                Sign Up\r\n                            </Nav.Link>\r\n                            <Nav.Link as = {Link} to = \"/my-profile\">\r\n                                My Profile\r\n                            </Nav.Link>\r\n                            <Nav.Link href = \"#pricing\">Pricing</Nav.Link>\r\n                        </Nav>\r\n                        <Form inline>\r\n                            <FormControl \r\n                                type = \"text\" \r\n                                placeholder = \"Search\" \r\n                                className = \"mr-sm-2\" \r\n                            />\r\n                            <Button variant = \"info\">Search</Button>\r\n                        </Form>\r\n                    </Navbar>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id = \"PageBodyContainer\">\r\n                    <Row>\r\n                        <Col>\r\n                            <Form\r\n                                noValidate = {true}\r\n                                onSubmit = {(event) => {\r\n                                    signUp (event);\r\n                                }}\r\n                            >\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        User Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type = \"text\"\r\n                                        autoComplete = \"on\"\r\n                                        autoFocus = {true}\r\n                                        name = \"userName\"\r\n                                        id = \"userName\"\r\n                                        pattern = \"^[\\\\p{L} .'-]+$\"\r\n                                        placeholder = \"Any user name\"\r\n                                        required = {true}\r\n                                        spellCheck = {false}\r\n                                        // value = {user.userName}\r\n                                        onChange = {handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Email:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type = \"email\"\r\n                                        autoComplete = \"on\"\r\n                                        autoFocus = {false}\r\n                                        name = \"email\"\r\n                                        id = \"email\"\r\n                                        placeholder = \"Enter your email\"\r\n                                        required = {true}\r\n                                        spellCheck = {false}\r\n                                        onChange = {handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Password:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type = \"password\"\r\n                                        autoComplete = \"off\"\r\n                                        autoFocus = {false}\r\n                                        name = \"password\"\r\n                                        id = \"password\"\r\n                                        pattern = \"^\\\\S+$\"\r\n                                        placeholder = \"Your new password\"\r\n                                        required = {true}\r\n                                        spellCheck = {false}\r\n                                        onChange = {handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button \r\n                                    variant = \"success\"\r\n                                    type = \"submit\"\r\n                                    block = {true}\r\n                                >\r\n                                    Register\r\n                                </Button>\r\n                                <button onClick = {() => add()}>\r\n                                    add\r\n                                </button>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\model\\User.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx",[],"C:\\Users\\roboc\\OneDrive\\Desktop\\Capstone\\Project\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":3,"column":25,"nodeType":"108","messageId":"109","endLine":3,"endColumn":57},{"ruleId":"110","severity":1,"message":"111","line":3,"column":20,"nodeType":"112","messageId":"113","endLine":3,"endColumn":26},{"ruleId":"110","severity":1,"message":"114","line":6,"column":3,"nodeType":"112","messageId":"113","endLine":6,"endColumn":7},{"ruleId":"110","severity":1,"message":"115","line":2,"column":29,"nodeType":"112","messageId":"113","endLine":2,"endColumn":39},{"ruleId":"110","severity":1,"message":"116","line":5,"column":35,"nodeType":"112","messageId":"113","endLine":5,"endColumn":46},{"ruleId":"110","severity":1,"message":"117","line":5,"column":48,"nodeType":"112","messageId":"113","endLine":5,"endColumn":51},{"ruleId":"110","severity":1,"message":"118","line":5,"column":53,"nodeType":"112","messageId":"113","endLine":5,"endColumn":59},{"ruleId":"110","severity":1,"message":"114","line":8,"column":10,"nodeType":"112","messageId":"113","endLine":8,"endColumn":14},{"ruleId":"110","severity":1,"message":"119","line":18,"column":9,"nodeType":"112","messageId":"113","endLine":18,"endColumn":14},{"ruleId":"120","severity":1,"message":"121","line":19,"column":16,"nodeType":"122","messageId":"123","endLine":19,"endColumn":19,"suggestions":"124"},{"ruleId":"110","severity":1,"message":"125","line":20,"column":9,"nodeType":"112","messageId":"113","endLine":20,"endColumn":26},{"ruleId":"126","severity":2,"message":"127","line":52,"column":5,"nodeType":null,"messageId":"128","endLine":59,"endColumn":9,"fix":"129"},{"ruleId":"110","severity":1,"message":"115","line":4,"column":7,"nodeType":"112","messageId":"113","endLine":4,"endColumn":17},"callback-return",[],"global-require",[],"handle-callback-err",[],"id-blacklist",["130"],"lines-around-directive",["131"],"no-buffer-constructor",[],"no-catch-shadow",["132"],"no-mixed-requires",[],"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"no-new-require",[],"no-path-concat",[],"no-process-env",[],"no-process-exit",[],"no-restricted-modules",[],"no-sync",[],"prefer-reflect",[],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'MouseEvent' is defined but never used.","'FormControl' is defined but never used.","'Nav' is defined but never used.","'Navbar' is defined but never used.","'match' is assigned a value but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["135","136"],"'studentID' is defined but never used.","multiline-comment-style","Expected a block comment instead of consecutive line comments.","expectedBlock",{"range":"137","text":"138"},"id-denylist","padding-line-between-statements","no-shadow","no-global-assign","no-unsafe-negation",{"messageId":"139","fix":"140","desc":"141"},{"messageId":"142","fix":"143","desc":"144"},[1693,1944],"/*\n     * function formatDate (string){\n     *     let options = { \n     *         day: 'numeric',\n     *         month: 'long',\n     *         year: 'numeric'\n     *     };\n     *     return new Date(string).toLocaleDateString([], options); \n     * }\n     */","suggestUnknown",{"range":"145","text":"146"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"145","text":"147"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[756,759],"unknown","never"]
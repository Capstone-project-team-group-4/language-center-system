[{"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\index.tsx":"1","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\reportWebVitals.ts":"2","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\App.tsx":"3","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx":"4","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\HomePage.tsx":"5","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx":"6","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx":"7","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\LogInPage.tsx":"8","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx":"9","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx":"10","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx":"11","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx":"12","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageCoursePage.tsx":"13","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx":"14","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx":"15","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx":"16","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx":"17","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx":"18","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx":"19","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx":"20","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\User.tsx":"21","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RegisterFormAPI.tsx":"22","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\RegisterForm.tsx":"23","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx":"24","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseTypeAPI.tsx":"25","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseLevelAPI.tsx":"26","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseAPI.tsx":"27","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\Course.tsx":"28","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx":"29","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx":"30","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\CourseType.tsx":"31","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\CourseLevel.tsx":"32","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageLessonPage.tsx":"33","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\Lesson.tsx":"34","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\LessonAPI.tsx":"35","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageStudentPage.tsx":"36","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx":"37","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\index.tsx":"38","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\reportWebVitals.ts":"39","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\App.tsx":"40","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\HomePage.tsx":"41","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx":"42","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx":"43","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\admin\\ManageStudentPage.tsx":"44","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx":"45","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx":"46","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx":"47","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx":"48","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\LogInPage.tsx":"49","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\EditTeacherInfo.tsx":"50","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx":"51","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\DetailPage.tsx":"52","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx":"53","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\admin\\ManageCoursePage.tsx":"54","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\admin\\ManageStudentInCoursePage.tsx":"55","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx":"56","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\admin\\ManageThingsInCoursePage.tsx":"57","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\select_role_page\\SelectRolePage.tsx":"58","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\admin\\ManageExaminationInCoursePage.tsx":"59","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\teacher\\TeacherDashboardPage.tsx":"60","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\teacher\\ManageExamQuestionPage.tsx":"61","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx":"62","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx":"63","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx":"64","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\component\\home_page_header\\HomePageHeader.tsx":"65","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\User.tsx":"66","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx":"67","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx":"68","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\RegisterForm.tsx":"69","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\RegisterFormAPI.tsx":"70","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx":"71","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\CourseLevelAPI.tsx":"72","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx":"73","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\CourseTypeAPI.tsx":"74","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\CourseAPI.tsx":"75","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\ExaminationAPI.tsx":"76","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\TypeConvert.tsx":"77","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\Course.tsx":"78","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\Examination.tsx":"79","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\MultipleChoiceQuestion.tsx":"80","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\QuestionOption.tsx":"81","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\QuizAPI.tsx":"82","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\Quiz.tsx":"83","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\InputValidate.tsx":"84","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\component\\teacher_sidebar\\TeacherSidebar.tsx":"85","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\CourseLevel.tsx":"86","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\CourseType.tsx":"87"},{"size":641,"mtime":1614439037000,"results":"88","hashOfConfig":"89"},{"size":446,"mtime":1615400528577,"results":"90","hashOfConfig":"89"},{"size":8128,"mtime":1616584880413,"results":"91","hashOfConfig":"89"},{"size":543,"mtime":1615400528512,"results":"92","hashOfConfig":"89"},{"size":3794,"mtime":1615400528518,"results":"93","hashOfConfig":"89"},{"size":2565,"mtime":1615400528551,"results":"94","hashOfConfig":"89"},{"size":11967,"mtime":1616584951643,"results":"95","hashOfConfig":"89"},{"size":8849,"mtime":1615487029108,"results":"96","hashOfConfig":"89"},{"size":16309,"mtime":1615487029115,"results":"97","hashOfConfig":"89"},{"size":5042,"mtime":1615487029116,"results":"98","hashOfConfig":"89"},{"size":20741,"mtime":1615487029118,"results":"99","hashOfConfig":"89"},{"size":13901,"mtime":1615487029119,"results":"100","hashOfConfig":"89"},{"size":46942,"mtime":1615978900580,"results":"101","hashOfConfig":"89"},{"size":1278,"mtime":1615487029096,"results":"102","hashOfConfig":"89"},{"size":3948,"mtime":1615632179934,"results":"103","hashOfConfig":"89"},{"size":5163,"mtime":1615400528500,"results":"104","hashOfConfig":"89"},{"size":3786,"mtime":1615400528499,"results":"105","hashOfConfig":"89"},{"size":1414,"mtime":1615400528498,"results":"106","hashOfConfig":"89"},{"size":6371,"mtime":1615487029099,"results":"107","hashOfConfig":"89"},{"size":9262,"mtime":1616584498571,"results":"108","hashOfConfig":"89"},{"size":2054,"mtime":1615487029104,"results":"109","hashOfConfig":"89"},{"size":4663,"mtime":1615487029097,"results":"110","hashOfConfig":"89"},{"size":1028,"mtime":1615487029103,"results":"111","hashOfConfig":"89"},{"size":1853,"mtime":1615487029098,"results":"112","hashOfConfig":"89"},{"size":1937,"mtime":1615487029095,"results":"113","hashOfConfig":"89"},{"size":2035,"mtime":1615487029094,"results":"114","hashOfConfig":"89"},{"size":4379,"mtime":1615487029094,"results":"115","hashOfConfig":"89"},{"size":1403,"mtime":1615487029100,"results":"116","hashOfConfig":"89"},{"size":1882,"mtime":1615487029096,"results":"117","hashOfConfig":"89"},{"size":553,"mtime":1615400528501,"results":"118","hashOfConfig":"89"},{"size":211,"mtime":1615487029101,"results":"119","hashOfConfig":"89"},{"size":381,"mtime":1615487029101,"results":"120","hashOfConfig":"89"},{"size":36169,"mtime":1616584410750,"results":"121","hashOfConfig":"89"},{"size":1331,"mtime":1616584410747,"results":"122","hashOfConfig":"89"},{"size":5060,"mtime":1616579856887,"results":"123","hashOfConfig":"89"},{"size":8123,"mtime":1616584944003,"results":"124","hashOfConfig":"89"},{"size":3969,"mtime":1615487029115,"results":"125","hashOfConfig":"89"},{"size":641,"mtime":1614439037000,"results":"126","hashOfConfig":"127"},{"size":446,"mtime":1615400528577,"results":"128","hashOfConfig":"127"},{"size":11558,"mtime":1618125159745,"results":"129","hashOfConfig":"127"},{"size":3794,"mtime":1615400528518,"results":"130","hashOfConfig":"127"},{"size":543,"mtime":1615400528512,"results":"131","hashOfConfig":"127"},{"size":11967,"mtime":1617716085249,"results":"132","hashOfConfig":"127"},{"size":8123,"mtime":1618125159759,"results":"133","hashOfConfig":"127"},{"size":3948,"mtime":1618125159746,"results":"134","hashOfConfig":"127"},{"size":1278,"mtime":1615487029096,"results":"135","hashOfConfig":"127"},{"size":6371,"mtime":1615487029099,"results":"136","hashOfConfig":"127"},{"size":16317,"mtime":1618124847313,"results":"137","hashOfConfig":"127"},{"size":9037,"mtime":1618124847312,"results":"138","hashOfConfig":"127"},{"size":11771,"mtime":1618124847311,"results":"139","hashOfConfig":"127"},{"size":5807,"mtime":1618124847331,"results":"140","hashOfConfig":"127"},{"size":6795,"mtime":1618124847310,"results":"141","hashOfConfig":"127"},{"size":20753,"mtime":1618124847333,"results":"142","hashOfConfig":"127"},{"size":46989,"mtime":1618124847334,"results":"143","hashOfConfig":"127"},{"size":17996,"mtime":1618124847336,"results":"144","hashOfConfig":"127"},{"size":14121,"mtime":1618124847333,"results":"145","hashOfConfig":"127"},{"size":7306,"mtime":1618124847338,"results":"146","hashOfConfig":"127"},{"size":2608,"mtime":1618124847342,"results":"147","hashOfConfig":"127"},{"size":40393,"mtime":1618124847335,"results":"148","hashOfConfig":"127"},{"size":878,"mtime":1618124847344,"results":"149","hashOfConfig":"127"},{"size":61050,"mtime":1618124847343,"results":"150","hashOfConfig":"127"},{"size":5696,"mtime":1618124847332,"results":"151","hashOfConfig":"127"},{"size":1714,"mtime":1618124847270,"results":"152","hashOfConfig":"127"},{"size":5256,"mtime":1618124847271,"results":"153","hashOfConfig":"127"},{"size":3794,"mtime":1618124847289,"results":"154","hashOfConfig":"127"},{"size":2054,"mtime":1615487029104,"results":"155","hashOfConfig":"127"},{"size":553,"mtime":1615400528501,"results":"156","hashOfConfig":"127"},{"size":1882,"mtime":1615487029096,"results":"157","hashOfConfig":"127"},{"size":1028,"mtime":1615487029103,"results":"158","hashOfConfig":"127"},{"size":4663,"mtime":1615487029097,"results":"159","hashOfConfig":"127"},{"size":14990,"mtime":1618125159754,"results":"160","hashOfConfig":"127"},{"size":2035,"mtime":1618043414553,"results":"161","hashOfConfig":"127"},{"size":1853,"mtime":1615487029098,"results":"162","hashOfConfig":"127"},{"size":1937,"mtime":1615487029095,"results":"163","hashOfConfig":"127"},{"size":6267,"mtime":1618124847296,"results":"164","hashOfConfig":"127"},{"size":4720,"mtime":1618124847297,"results":"165","hashOfConfig":"127"},{"size":538,"mtime":1618124847300,"results":"166","hashOfConfig":"127"},{"size":1405,"mtime":1618124847303,"results":"167","hashOfConfig":"127"},{"size":1246,"mtime":1618124847304,"results":"168","hashOfConfig":"127"},{"size":1113,"mtime":1618124847305,"results":"169","hashOfConfig":"127"},{"size":1015,"mtime":1618124847305,"results":"170","hashOfConfig":"127"},{"size":4430,"mtime":1618124847298,"results":"171","hashOfConfig":"127"},{"size":582,"mtime":1618124847308,"results":"172","hashOfConfig":"127"},{"size":2693,"mtime":1618124847297,"results":"173","hashOfConfig":"127"},{"size":2031,"mtime":1618124847295,"results":"174","hashOfConfig":"127"},{"size":381,"mtime":1615487029101,"results":"175","hashOfConfig":"127"},{"size":211,"mtime":1615487029101,"results":"176","hashOfConfig":"127"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},"1ii22s2",{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"179"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"179"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"179"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"179"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"179"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},"5hs3hr",{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"259"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"285","messages":"286","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"287","messages":"288","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"289","messages":"290","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"293","messages":"294","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"357"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\index.tsx",[],["360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376"],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\reportWebVitals.ts",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\App.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\HomePage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx",["377","378","379","380","381","382","383","384","385","386","387","388","389","390","391"],"// Import package members section:\r\nimport React, { \r\n    ChangeEvent\r\n    , Dispatch, FormEvent\r\n    , ReactElement\r\n    , SetStateAction, useState \r\n} from 'react';\r\nimport { \r\n    Button, Card, Container, Form, ListGroup, Row \r\n} from 'react-bootstrap';\r\nimport './SelectRolePage.css';\r\nimport { TypeGuard } from '../common/service/TypeGuard';\r\nimport { DialogControl } from '../common/component/ModalDialog';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { LoggedInUser } from '../model/LoggedInUser';\r\nimport { Location, History } from \"../../node_modules/@types/history\";\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { LocationState } from '../common/component/ProtectedRoute';\r\n\r\ninterface SelectRolePageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function SelectRolePage (props: SelectRolePageProps): ReactElement {\r\n\r\n    // Variables declaration:\r\n    \r\n    return (\r\n        <Container \r\n            fluid = {true} \r\n            id = \"SelectRolePageContentContainer\" \r\n            className = \"vh-100\"\r\n        >   \r\n            {props.modalDialog}\r\n            <header>\r\n            </header>\r\n            <nav>\r\n            </nav>\r\n            <main className = \"h-100\">\r\n                <Container \r\n                    fluid = {true} \r\n                    className = \"h-100\"\r\n                >\r\n                    <Row className = {\r\n                        `h-100 \r\n                        justify-content-center \r\n                        align-items-center`\r\n                    }>\r\n                        <Card id = \"SelectRoleCard\">\r\n                            <Card.Header className = \"text-center\">\r\n                                Choose a role\r\n                            </Card.Header>\r\n                            <ListGroup variant = \"flush\">\r\n                                <ListGroup.Item>\r\n                                    Cras justo odio\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    Dapibus ac facilisis in\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    Vestibulum at eros\r\n                                </ListGroup.Item>\r\n                            </ListGroup>\r\n                        </Card>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx",["392","393","394"],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\LogInPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx",["395","396"],"// Import package members section:\r\nimport React, { \r\n    ChangeEvent\r\n    , MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { \r\n    Breadcrumb\r\n    , Button\r\n    , Col\r\n    , Container\r\n    , Form\r\n    , Row\r\n    , Table \r\n} from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { RegisterFormAPI } from \"../../common/service/RegisterFormAPI\";\r\nimport { RoleAPI } from \"../../common/service/RoleAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { RegisterForm } from \"../../model/RegisterForm\";\r\nimport { Role } from \"../../model/Role\";\r\n\r\nfunction renderRoleDropdownList (role: Role): ReactElement {\r\n    let roleNameWithoutPrefix: string | undefined;\r\n\r\n    roleNameWithoutPrefix = role.roleName.slice (5);\r\n    return (\r\n        <option key = {role.roleID}>\r\n            {roleNameWithoutPrefix}\r\n        </option>\r\n    );\r\n}\r\n\r\nfunction renderRoleListSection (role: Role): ReactElement {\r\n    let roleNameWithoutPrefix: string | undefined;\r\n    \r\n    roleNameWithoutPrefix = role.roleName.slice (5);\r\n    return (\r\n        <span key = {role.roleID}>\r\n            {roleNameWithoutPrefix},&nbsp;\r\n        </span>\r\n    );\r\n}\r\n\r\nfunction renderRegisterFormTable (\r\n        registerForm: RegisterForm\r\n        , index: number\r\n        , handleAcceptRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void> \r\n        , handleRejectRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n): ReactElement {\r\n    return (\r\n        <tr key = {registerForm.formID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {`${\r\n                    registerForm.firstName\r\n                } ${\r\n                    registerForm.middleName\r\n                } ${\r\n                    registerForm.lastName\r\n                }`}\r\n            </td>\r\n            <td>\r\n                {registerForm.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {registerForm.email}\r\n            </td>\r\n            <td>\r\n                {registerForm.userName}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {registerForm.formID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            handleAcceptRequest (event).catch (\r\n                                    (error: unknown) => {\r\n                                        console.error (error);\r\n                                    }\r\n                            );\r\n                        }\r\n                    }\r\n                >\r\n                    Accept\r\n                </Button>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {registerForm.formID}\r\n                    onClick = {handleRejectRequest}\r\n                >\r\n                    Reject\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface CreateAccountPageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function CreateAccountPage (\r\n    props: CreateAccountPageProps\r\n): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [registerFormHolder, setRegisterFormHolder] \r\n        = useState<RegisterForm[]> ([]);\r\n    let registerFormAPI: RegisterFormAPI;\r\n    let typeGuardian: TypeGuard;\r\n    let [pageNumber, setPageNumber] = useState<number> (0);\r\n    let [pageSize, setPageSize] = useState<number> (10);\r\n    let [roleHolder, setRoleHolder] = useState<Role[]> ([]);\r\n    let roleAPI: RoleAPI;\r\n    let [selectedRoleName, setSelectedRoleName] = useState<string> (\"\");\r\n    let [newAccountRoleList, setNewAccountRoleList] = useState<Role[]> ([]);\r\n    let i: number | undefined; \r\n    let role: Role | undefined;\r\n    let selectedRoleArray: Role[] | undefined;\r\n    let selectedRole: Role | undefined;\r\n    let updatedNewAccountRoleList: Role[] | undefined;\r\n    let updatedRoleHolder: Role[] | undefined;\r\n    let defaultRoleSelection: Role | undefined;\r\n    let button: HTMLButtonElement | undefined;\r\n    let [userID, setUserID] = useState<number> (0);\r\n    let roleNameWithoutPrefix: string | undefined;\r\n\r\n    registerFormAPI = new RegisterFormAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    roleAPI = new RoleAPI ();\r\n    \r\n    async function handleAcceptRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        if (newAccountRoleList.length > 0){\r\n            button = event.target as HTMLButtonElement;\r\n            try {\r\n                await registerFormAPI.acceptCreateAccountRequest (\r\n                        Number (button.value)\r\n                        , newAccountRoleList\r\n                );\r\n                loadRegisterFormTable ();\r\n                return Promise.resolve<undefined> (undefined);\r\n            }\r\n            catch (apiError: unknown){\r\n                if (typeGuardian.isAxiosError (apiError)){\r\n                    if (typeof apiError.code === \"string\"){\r\n                        props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                        );\r\n                    }\r\n                    else {\r\n                        props.dialogController.setDialogTitle (apiError.name);\r\n                    }\r\n                    props.dialogController.setDialogBody (apiError.message);\r\n                    props.dialogController.setDialogType (\"error\");\r\n                    props.dialogController.setShowDialog (true);\r\n                }\r\n                return Promise.reject (apiError);\r\n            }\r\n        }\r\n        else {\r\n            props.dialogController.setDialogTitle (\"Error !\");\r\n            props.dialogController.setDialogBody (\r\n                    \"Please add at least one role.\"\r\n            );\r\n            props.dialogController.setDialogType (\"error\");\r\n            props.dialogController.setShowDialog (true);\r\n            return Promise.reject (\r\n                    new Error (\"Please add at least one role !\")\r\n            );\r\n        }\r\n    }\r\n\r\n    function handleRejectRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setUserID (Number (button.value));\r\n        props.dialogController.setDialogTitle (\"Confirm Rejection\");\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to reject this create account request ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function executeRequestRejection (): Promise<void> {\r\n        try {\r\n            await registerFormAPI.rejectCreateAccountRequest (\r\n                    userID\r\n            );\r\n            loadRegisterFormTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    function handleAddRole (){\r\n        for (i = 0; i < roleHolder.length; i++){\r\n            role = roleHolder[i];\r\n            if (role.roleName === `ROLE_${selectedRoleName}`){\r\n                updatedRoleHolder = roleHolder.slice ();\r\n                selectedRoleArray = updatedRoleHolder.splice (i, 1);\r\n                setRoleHolder (updatedRoleHolder);\r\n                if (updatedRoleHolder.length > 0){\r\n                    defaultRoleSelection = updatedRoleHolder[0];\r\n                    roleNameWithoutPrefix \r\n                        = defaultRoleSelection.roleName.slice (5); \r\n                    setSelectedRoleName (roleNameWithoutPrefix);\r\n                }\r\n                selectedRole = selectedRoleArray[0];\r\n                updatedNewAccountRoleList = newAccountRoleList.slice ();\r\n                updatedNewAccountRoleList.push (selectedRole);\r\n                setNewAccountRoleList (updatedNewAccountRoleList);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleReset (){\r\n        loadRoleDropdownList ().catch (\r\n                (error: unknown) => {\r\n                    console.error (error);\r\n                }\r\n        );\r\n        updatedNewAccountRoleList = new Array<Role> ();\r\n        setNewAccountRoleList (updatedNewAccountRoleList);\r\n    }\r\n\r\n    function handleSelectedRoleChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ): void {\r\n        setSelectedRoleName (event.target.value);\r\n    }\r\n\r\n    async function loadRoleDropdownList (): Promise<void> {\r\n        try {\r\n            updatedRoleHolder = await roleAPI.getAllRole (); \r\n            setRoleHolder (updatedRoleHolder);\r\n            defaultRoleSelection = updatedRoleHolder[0];\r\n            roleNameWithoutPrefix = defaultRoleSelection.roleName.slice (5);\r\n            setSelectedRoleName (roleNameWithoutPrefix);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadRegisterFormTable (): Promise<void> {\r\n        try {\r\n            setRegisterFormHolder (\r\n                    await registerFormAPI.getAllCreateAccountRequest (\r\n                            pageNumber\r\n                            , pageSize\r\n                    )\r\n            );\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    useEffect (\r\n        (): void => {\r\n            loadRoleDropdownList ().catch (\r\n                    (error: unknown) => {\r\n                        console.error (error);\r\n                    }\r\n            );\r\n            loadRegisterFormTable ().catch (\r\n                    (error: unknown) => {\r\n                        console.error (error);\r\n                    }\r\n            );\r\n        }\r\n        , []\r\n    );\r\n\r\n    useEffect (\r\n        (): void => {\r\n            if (props.dialogController.dialogIsConfirmed === true){\r\n                executeRequestRejection ().catch (\r\n                        (error: unknown) => {\r\n                            console.error (error);\r\n                        }\r\n                );\r\n                props.dialogController.setDialogIsConfirmed (false); \r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/\"}}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/admin-console\"}}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Create Account Requests\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1>\r\n                                Create Account Requests\r\n                            </h1>\r\n                            <hr/>\r\n                            <Form>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\"~\"} Add role \r\n                                                for the new account:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        <Col xs = \"auto\" className = \"mr-2\">\r\n                                            <Form.Control \r\n                                                as = \"select\" \r\n                                                value = {selectedRoleName}\r\n                                                onChange = {\r\n                                                    (event) => {\r\n                                            // eslint-disable-next-line max-len\r\n                                                        handleSelectedRoleChange (\r\n                                                            event\r\n                                                        );\r\n                                                    } \r\n                                                }\r\n                                            >\r\n                                                {roleHolder.map (\r\n                                                    (\r\n                                                            role\r\n                                            // eslint-disable-next-line max-len\r\n                                                    ) => renderRoleDropdownList (\r\n                                                            role\r\n                                                    )  \r\n                                                )}\r\n                                            </Form.Control>\r\n                                        </Col>\r\n                                        <Button \r\n                                            variant = \"success\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleAddRole ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Add role\r\n                                        </Button>\r\n                                        <Button \r\n                                            variant = \"primary\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleReset ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Reset\r\n                                        </Button>\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\">\"} The accepted account \r\n                                                will have roles:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        {newAccountRoleList.map (\r\n                                            (\r\n                                                    role\r\n                                            ) => renderRoleListSection (\r\n                                                    role\r\n                                            )\r\n                                        )}\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Table responsive = \"md\" hover = {true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                Full Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Phone Number\r\n                                            </th>\r\n                                            <th>\r\n                                                Email\r\n                                            </th>\r\n                                            <th>\r\n                                                User Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Actions\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {registerFormHolder.map (\r\n                                            (\r\n                                                    registerForm\r\n                                                    , index\r\n                                            ) => renderRegisterFormTable (\r\n                                                    registerForm\r\n                                                    , index\r\n                                                    , handleAcceptRequest\r\n                                                    , handleRejectRequest\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageCoursePage.tsx",["397","398","399"],"/* eslint-disable no-await-in-loop */\r\n// Import package members section:\r\nimport React, { \r\n    ChangeEvent,\r\n    FormEvent,\r\n    MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { \r\n    Breadcrumb\r\n    , Button\r\n    , Col\r\n    , Container\r\n    , Form\r\n    , Modal, Row\r\n    , Table \r\n} from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DataPage } from \"../../App\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { CourseAPI } from \"../../common/service/CourseAPI\";\r\nimport { CourseLevelAPI } from \"../../common/service/CourseLevelAPI\";\r\nimport { CourseTypeAPI } from \"../../common/service/CourseTypeAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { UserAPI } from \"../../common/service/UserAPI\";\r\nimport { Course } from \"../../model/Course\";\r\nimport { CourseLevel } from \"../../model/CourseLevel\";\r\nimport { CourseType } from \"../../model/CourseType\";\r\nimport { User } from \"../../model/User\";\r\n\r\nfunction renderCourseTypeDropdownList (courseType: CourseType): ReactElement {\r\n    return (\r\n        <option \r\n            key = {courseType.typeID} \r\n            value = {courseType.typeID}\r\n        >\r\n            {courseType.typeName}\r\n        </option>\r\n    );\r\n}\r\n\r\nfunction renderCourseLevelDropdownList (\r\n        courseLevel: CourseLevel\r\n): ReactElement {\r\n    return (\r\n        <option \r\n            key = {courseLevel.levelID} \r\n            value = {courseLevel.levelID}\r\n        >\r\n            {courseLevel.levelName}\r\n        </option>\r\n    );\r\n}\r\n\r\nfunction renderCourseTable (\r\n        course: Course\r\n        , index: number \r\n        , openViewDetailsDialog: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n        , openEditCourseForm: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void>\r\n        , handleDeleteCourse: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => void \r\n): ReactElement {\r\n    return (\r\n        <tr key = {course.courseID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {course.courseName}\r\n            </td>\r\n            <td>\r\n                {course.courseType.typeName}\r\n            </td>\r\n            <td>\r\n                {course.courseLevel.levelName}\r\n            </td>\r\n            <td>\r\n                {course.tuitionFee}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"primary\"\r\n                    type = \"button\"\r\n                    value = {course.courseID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            openViewDetailsDialog (event);\r\n                        }\r\n                    }\r\n                >\r\n                    Details\r\n                </Button>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {course.courseID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            openEditCourseForm (event).catch (\r\n                                    (error: unknown) => {\r\n                                        console.error (error);\r\n                                    }\r\n                            );\r\n                        }\r\n                    }\r\n                >\r\n                    Edit\r\n                </Button>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {course.courseID}\r\n                    onClick = {\r\n                        (event) => {\r\n                            handleDeleteCourse (event);\r\n                        }\r\n                    }\r\n                >\r\n                    Delete\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface ManageCoursePageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function ManageCoursePage (props: ManageCoursePageProps): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [selectedCourseTypeID, setSelectedCourseTypeID] \r\n        = useState<number> (0); \r\n    let [courseTypeHolder, setCourseTypeHolder] = useState<CourseType[]> ([]);\r\n    let updatedCourseTypeHolder: CourseType[] | undefined;\r\n    let courseTypeAPI: CourseTypeAPI;\r\n    let defaultSelectedID: number | undefined;\r\n    let typeGuardian: TypeGuard;\r\n    let updatedCourseLevelHolder: CourseLevel[] | undefined;\r\n    let courseLevelAPI: CourseLevelAPI;\r\n    let [showCreateCourseForm, setShowCreateCourseForm] \r\n        = useState<boolean> (false);\r\n    let [courseLevelHolder, setCourseLevelHolder] \r\n        = useState<CourseLevel[]> ([]);\r\n    let [selectedCourseLevelID, setSelectedCourseLevelID] \r\n        = useState<number> (0);\r\n    let htmlElement: \r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let [course, setCourse] = useState<Course> (new Course ());\r\n    let updatedCourse: Course | undefined;\r\n    let courseAPI: CourseAPI;\r\n    let courseType: CourseType | undefined;\r\n    let selectedCourseType: CourseType;\r\n    let courseLevel: CourseLevel | undefined;\r\n    let selectedCourseLevel: CourseLevel; \r\n    let i: number | undefined;\r\n    let [pageIndex] = useState<number> (0);\r\n    let [pageSize] = useState<number> (10);\r\n    let [totalPageCount, setTotalPageCount] = useState<number> (0);\r\n    let courseDataPage: DataPage<Course> | undefined;\r\n    let [courseHolder, setCourseHolder] = useState<Course[]> ([]);\r\n    let [showViewDetailDialog, setShowViewDetailDialog] \r\n        = useState<boolean> (false);\r\n    let button: HTMLButtonElement | undefined;\r\n    let courseID: number | undefined;\r\n    let courseSample: Course | undefined;\r\n    let [formattedLastModified, setFormattedLastModified] \r\n        = useState<string> (\"\");\r\n    let rawDate: Date | undefined;\r\n    let [formattedDateCreated, setFormattedDateCreated] \r\n        = useState<string> (\"\");\r\n    let [pendingCourseID, setPendingCourseID] = useState<number> (0);\r\n    let [showEditCourseForm, setShowEditCourseForm] \r\n        = useState<boolean> (false);\r\n    \r\n    courseTypeAPI = new CourseTypeAPI ();\r\n    courseLevelAPI = new CourseLevelAPI ();\r\n    courseAPI = new CourseAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    \r\n    function handleDeleteCourse (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setPendingCourseID (Number (button.value));\r\n        props.dialogController.setDialogTitle (\"Confirm Delete Course\");\r\n        props.dialogController.setDialogBody (\r\n                \"Are you sure you want to delete this course ?\"\r\n        );\r\n        props.dialogController.setDialogType (\"confirm\");\r\n        props.dialogController.setShowDialog (true);\r\n    }\r\n\r\n    async function executeCourseDeletion (): Promise<void> {\r\n        try {\r\n            await courseAPI.deleteCourse (pendingCourseID);\r\n            loadCourseTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    function openViewDetailDialog (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        courseID = Number (button.value);\r\n        for (i = 0; i < courseHolder.length; i++){\r\n            courseSample = courseHolder[i];\r\n            if (courseSample.courseID === courseID){\r\n                setCourse (courseSample);\r\n                rawDate = new Date (courseSample.lastModified); \r\n                if (rawDate.toString () === new Date (0).toString ()){\r\n                    setFormattedLastModified (\"Has not been modified yet !\");\r\n                }\r\n                else {\r\n                    setFormattedLastModified (rawDate.toLocaleString ());\r\n                }\r\n                rawDate = new Date (courseSample.dateCreated);\r\n                setFormattedDateCreated (rawDate.toLocaleString ());\r\n                break;\r\n            }\r\n        }\r\n        setShowViewDetailDialog (true);\r\n    }\r\n\r\n    function closeViewDetailDialog (): void {\r\n        setShowViewDetailDialog (false);\r\n    }\r\n    \r\n    function openCreateCourseForm (): void {\r\n        setCourse (new Course ());\r\n        loadCourseTypeDropdownList ().catch (\r\n                (error: unknown) => {\r\n                    console.error (error);\r\n                }\r\n        );\r\n        setShowCreateCourseForm (true);\r\n    }\r\n\r\n    function closeCreateCourseForm (): void {\r\n        setShowCreateCourseForm (false);\r\n    }\r\n    \r\n    async function openEditCourseForm (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        button = event.target as HTMLButtonElement;\r\n        courseID = Number (button.value);\r\n        try {\r\n            for (i = 0; i < courseHolder.length; i++){\r\n                courseSample = courseHolder[i];\r\n                if (courseSample.courseID === courseID){\r\n                    setCourse (courseSample);\r\n                    await loadCourseTypeDropdownList ();\r\n                    setSelectedCourseTypeID (courseSample.courseType.typeID);\r\n                    break;\r\n                }\r\n            }\r\n            setShowEditCourseForm (true);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (error: unknown){\r\n            return Promise.reject (error);\r\n        }\r\n    }\r\n\r\n    function closeEditCourseForm (): void {\r\n        setShowEditCourseForm (false);\r\n    }\r\n\r\n    function handleChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ): void {\r\n        updatedCourse = new Course (course);\r\n        htmlElement = event.target;\r\n        switch (htmlElement.name){\r\n            default:\r\n                throw new Error (\"Unknown html element !\");\r\n\r\n            case \"courseNameField\":\r\n                updatedCourse.courseName = htmlElement.value;\r\n                break;\r\n\r\n            case \"descriptionTextarea\":\r\n                updatedCourse.description = htmlElement.value;\r\n                break;\r\n\r\n            case \"courseTypeDropdownList\":\r\n                setSelectedCourseTypeID (Number (htmlElement.value));\r\n                break;\r\n\r\n            case \"courseLevelDropdownList\":\r\n                setSelectedCourseLevelID (Number (htmlElement.value));\r\n                break;\r\n\r\n            case \"tuitionFeeField\":\r\n                updatedCourse.tuitionFee = parseFloat (htmlElement.value);\r\n                break;\r\n        }\r\n        setCourse (updatedCourse);\r\n    }\r\n\r\n    async function loadCourseTypeDropdownList (): Promise<void> {\r\n        try {\r\n            updatedCourseTypeHolder \r\n                = await courseTypeAPI.getAllCourseTypeInTheSystem (); \r\n            setCourseTypeHolder (updatedCourseTypeHolder);\r\n            defaultSelectedID = updatedCourseTypeHolder[0].typeID;\r\n            setSelectedCourseTypeID (defaultSelectedID);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadCourseLevelDropdownList (): Promise<void> {\r\n        try {\r\n            updatedCourseLevelHolder\r\n                = await courseLevelAPI.getAllCourseLevelByTypeID (\r\n                        selectedCourseTypeID\r\n                ); \r\n            setCourseLevelHolder (updatedCourseLevelHolder);\r\n            defaultSelectedID = updatedCourseLevelHolder[0].levelID;\r\n            setSelectedCourseLevelID (defaultSelectedID);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (\r\n                            apiError.name\r\n                    );\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }  \r\n    }\r\n\r\n    async function createCourse (\r\n            event: FormEvent<HTMLFormElement>\r\n    ): Promise<void> {\r\n        event.preventDefault ();\r\n        for (i = 0; i < courseTypeHolder.length; i++){\r\n            courseType = courseTypeHolder[i];\r\n            if (courseType.typeID === selectedCourseTypeID){\r\n                selectedCourseType = courseType;\r\n                break;\r\n            }\r\n        }\r\n        for (i = 0; i < courseLevelHolder.length; i++){\r\n            courseLevel = courseLevelHolder[i];\r\n            if (courseLevel.levelID === selectedCourseLevelID){\r\n                selectedCourseLevel = courseLevel;\r\n                break;\r\n            }\r\n        }\r\n        course.courseType = selectedCourseType;\r\n        course.courseLevel = selectedCourseLevel; \r\n        try {\r\n            await courseAPI.createNewCourse (course);\r\n            closeCreateCourseForm ();\r\n            props.dialogController.setDialogTitle (\"Course Created !\");\r\n            props.dialogController.setDialogBody (\r\n                `The course [${course.courseName}] \r\n                has been created successfully.`\r\n            );\r\n            props.dialogController.setDialogType (\"inform\");\r\n            props.dialogController.setShowDialog (true);\r\n            loadCourseTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function editCourse (\r\n            event: FormEvent<HTMLFormElement>\r\n    ): Promise<void> {\r\n        event.preventDefault ();\r\n        for (i = 0; i < courseTypeHolder.length; i++){\r\n            courseType = courseTypeHolder[i];\r\n            if (courseType.typeID === selectedCourseTypeID){\r\n                selectedCourseType = courseType;\r\n                break;\r\n            }\r\n        }\r\n        for (i = 0; i < courseLevelHolder.length; i++){\r\n            courseLevel = courseLevelHolder[i];\r\n            if (courseLevel.levelID === selectedCourseLevelID){\r\n                selectedCourseLevel = courseLevel;\r\n                break;\r\n            }\r\n        }\r\n        course.courseType = selectedCourseType;\r\n        course.courseLevel = selectedCourseLevel; \r\n        try {\r\n            await courseAPI.updateCourse (course);\r\n            closeEditCourseForm ();\r\n            props.dialogController.setDialogTitle (\"Course Saved !\");\r\n            props.dialogController.setDialogBody (\r\n                `The course [${course.courseName}] \r\n                has been saved successfully.`\r\n            );\r\n            props.dialogController.setDialogType (\"inform\");\r\n            props.dialogController.setShowDialog (true);\r\n            loadCourseTable ();\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    async function loadCourseTable (): Promise<void> {\r\n        try {\r\n            courseDataPage = await courseAPI.getAllCourse (\r\n                    pageIndex\r\n                    , pageSize\r\n            ); \r\n            setTotalPageCount (courseDataPage.totalPageCount);\r\n            setCourseHolder (courseDataPage.pageDataHolder);\r\n            return Promise.resolve<undefined> (undefined);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            return Promise.reject (apiError);\r\n        }\r\n    }\r\n\r\n    useEffect (\r\n        (): void => {\r\n            loadCourseTable ().catch (\r\n                    (error: unknown) => {\r\n                        console.error (error);\r\n                    }\r\n            );\r\n        }\r\n        , []\r\n    );\r\n\r\n    useEffect (\r\n        (): void => {\r\n            if (selectedCourseTypeID !== 0){\r\n                loadCourseLevelDropdownList ().catch (\r\n                        (error: unknown) => {\r\n                            console.error (error);\r\n                        }\r\n                );\r\n            }\r\n        }\r\n        , [selectedCourseTypeID]\r\n    );\r\n    \r\n    useEffect (\r\n        (): void => {\r\n            if (props.dialogController.dialogIsConfirmed === true){\r\n                executeCourseDeletion ().catch (\r\n                        (error: unknown) => {\r\n                            console.error (error);\r\n                        }\r\n                );\r\n                props.dialogController.setDialogIsConfirmed (false); \r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <Modal\r\n                show = {showCreateCourseForm}\r\n                backdrop = \"static\"\r\n                keyboard = {false}\r\n                size = \"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>New Course Information</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form \r\n                        id = \"CreateCourseForm\"\r\n                        className = \"pt-2 pr-5 pl-5 pb-0\"\r\n                        onSubmit = {\r\n                            (event) => {\r\n                                createCourse (event).catch (\r\n                                        (error: unknown) => {\r\n                                            console.error (error);\r\n                                        }\r\n                                );\r\n                            }\r\n                        }\r\n                    >\r\n                        <Form.Group controlId = \"CourseNameField\">\r\n                            <Form.Label>\r\n                                Course Name:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type = \"text\"\r\n                                autoComplete = \"on\"\r\n                                autoFocus = {true}\r\n                                name = \"courseNameField\"\r\n                                pattern = \"^[\\p{L} .'-]+$\"\r\n                                placeholder = \"Name for the new course ?\"\r\n                                required = {true}\r\n                                spellCheck = {false}\r\n                                value = {course.courseName}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className = \"text-muted\">\r\n                                format: characters only !  \r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"DescriptionTextarea\">\r\n                            <Form.Label>\r\n                                Description:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                as = \"textarea\"\r\n                                autoComplete = \"off\"\r\n                                autoFocus = {false}\r\n                                name = \"descriptionTextarea\"\r\n                                placeholder = \"Description for the new course ?\"\r\n                                required = {false}\r\n                                spellCheck = {true}\r\n                                rows = {5}\r\n                                value = {course.description}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"CourseTypeDropdownList\">\r\n                            <Form.Label>\r\n                                Course Type:\r\n                            </Form.Label>\r\n                            <Form.Control \r\n                                as = \"select\" \r\n                                name = \"courseTypeDropdownList\"\r\n                                autoFocus = {false}\r\n                                required = {true}\r\n                                value = {selectedCourseTypeID}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (\r\n                                            event\r\n                                        );\r\n                                    } \r\n                                }\r\n                            >\r\n                                {courseTypeHolder.map (\r\n                                    (\r\n                                            courseType\r\n                                    ) => renderCourseTypeDropdownList (\r\n                                            courseType\r\n                                    )  \r\n                                )}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"CourseLevelDropdownList\">\r\n                            <Form.Label>\r\n                                Course Level:\r\n                            </Form.Label>\r\n                            <Form.Control \r\n                                as = \"select\" \r\n                                name = \"courseLevelDropdownList\"\r\n                                autoFocus = {false}\r\n                                required = {true}\r\n                                value = {selectedCourseLevelID}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (\r\n                                            event\r\n                                        );\r\n                                    } \r\n                                }\r\n                            >\r\n                                {courseLevelHolder.map (\r\n                                    (\r\n                                            courseLevel\r\n                                    ) => renderCourseLevelDropdownList (\r\n                                            courseLevel\r\n                                    )  \r\n                                )}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"TuitionFeeField\">\r\n                            <Form.Label>\r\n                                Tuition Fee (VND):\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type = \"number\"\r\n                                autoComplete = \"on\"\r\n                                autoFocus = {false}\r\n                                name = \"tuitionFeeField\"\r\n                                placeholder = \"Price of the new course ?\"\r\n                                required = {true}\r\n                                spellCheck = {false}\r\n                                min = {0}\r\n                                step = {500}\r\n                                value = {course.tuitionFee}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className = \"text-muted\">\r\n                                format: numbers only !  \r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button \r\n                        variant = \"success\" \r\n                        type = \"submit\"\r\n                        form = \"CreateCourseForm\" \r\n                    >\r\n                        Create Course\r\n                    </Button>\r\n                    <Button \r\n                        variant = \"outline-secondary\" \r\n                        onClick = {closeCreateCourseForm}\r\n                    >\r\n                        Cancel\r\n                    </Button>   \r\n                </Modal.Footer>\r\n            </Modal>\r\n            <Modal\r\n                show = {showViewDetailDialog}\r\n                backdrop = \"static\"\r\n                keyboard = {false}\r\n                size = \"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>Course Details</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form\r\n                        className = \"pt-2 pr-5 pl-5 pb-0\"\r\n                    >\r\n                        <Form.Row>\r\n                            <Form.Group as = {Row} controlId = \"CourseIDInfo\">\r\n                                <Form.Label \r\n                                    column = {true}\r\n                                    md = {5}\r\n                                >\r\n                                    + Course ID:\r\n                                </Form.Label>\r\n                                <Col md = {7}>\r\n                                    <Form.Control \r\n                                        plaintext = {true} \r\n                                        readOnly = {true} \r\n                                        value = {course.courseID}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as = {Row} controlId = \"CourseNameInfo\">\r\n                                <Form.Label \r\n                                    column = {true}\r\n                                    md = {5}\r\n                                >\r\n                                    + Course Name:\r\n                                </Form.Label>\r\n                                <Col md = {7}>\r\n                                    <Form.Control \r\n                                        plaintext = {true} \r\n                                        readOnly = {true} \r\n                                        value = {course.courseName}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        \r\n                        <Form.Group controlId = \"DescriptionInfo\">\r\n                            <Form.Label>\r\n                                + Description:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                as = \"textarea\"\r\n                                readOnly = {true}\r\n                                rows = {5}\r\n                                value = {course.description}\r\n                            />\r\n                        </Form.Group>\r\n                        \r\n                        <Form.Row>\r\n                            <Form.Group as = {Row} controlId = \"CourseTypeInfo\">\r\n                                <Form.Label \r\n                                    column = {true}\r\n                                    md = {5}\r\n                                >\r\n                                    + Course Type:\r\n                                </Form.Label>\r\n                                <Col md = {7}>\r\n                                    <Form.Control \r\n                                        plaintext = {true} \r\n                                        readOnly = {true} \r\n                                        value = {course.courseType.typeName}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group \r\n                                as = {Row} \r\n                                controlId = \"CourseLevelInfo\"\r\n                            >\r\n                                <Form.Label \r\n                                    column = {true}\r\n                                    md = {5}\r\n                                >\r\n                                    + Course Level:\r\n                                </Form.Label>\r\n                                <Col md = {7}>\r\n                                    <Form.Control \r\n                                        plaintext = {true} \r\n                                        readOnly = {true} \r\n                                        value = {course.courseLevel.levelName}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n\r\n                        <Form.Group as = {Row} controlId = \"TuitionFeeInfo\">\r\n                            <Form.Label\r\n                                column = {true}\r\n                                md = {3}\r\n                            >\r\n                                + Tuition Fee (VND):\r\n                            </Form.Label>\r\n                            <Col md = {9}>\r\n                                <Form.Control\r\n                                    plaintext = {true} \r\n                                    readOnly = {true}\r\n                                    value = {\r\n                                        `${\r\n                                            course.tuitionFee.toLocaleString ()\r\n                                        } đ`\r\n                                    }\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as = {Row} controlId = \"LastModifiedInfo\">\r\n                            <Form.Label\r\n                                column = {true}\r\n                                md = {3}\r\n                            >\r\n                                + Last Modified:\r\n                            </Form.Label>\r\n                            <Col md = {9}>\r\n                                <Form.Control\r\n                                    plaintext = {true} \r\n                                    readOnly = {true}\r\n                                    value = {formattedLastModified}\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as = {Row} controlId = \"DateCreatedInfo\">\r\n                            <Form.Label\r\n                                column = {true}\r\n                                md = {3}\r\n                            >\r\n                                + Date Created:\r\n                            </Form.Label>\r\n                            <Col md = {9}>\r\n                                <Form.Control\r\n                                    plaintext = {true} \r\n                                    readOnly = {true}\r\n                                    value = {formattedDateCreated}\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button \r\n                        variant = \"info\" \r\n                        onClick = {closeViewDetailDialog}\r\n                    >\r\n                        Close\r\n                    </Button>   \r\n                </Modal.Footer>\r\n            </Modal>\r\n            <Modal\r\n                show = {showEditCourseForm}\r\n                backdrop = \"static\"\r\n                keyboard = {false}\r\n                size = \"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>Edit Course</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form \r\n                        id = \"EditCourseForm\"\r\n                        className = \"pt-2 pr-5 pl-5 pb-0\"\r\n                        onSubmit = {\r\n                            (event) => {\r\n                                editCourse (event).catch (\r\n                                        (error: unknown) => {\r\n                                            console.error (error);\r\n                                        }\r\n                                );\r\n                            }\r\n                        }\r\n                    >\r\n                        <Form.Group controlId = \"CourseNameField\">\r\n                            <Form.Label>\r\n                                Course Name:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type = \"text\"\r\n                                autoComplete = \"on\"\r\n                                autoFocus = {true}\r\n                                name = \"courseNameField\"\r\n                                pattern = \"^[\\p{L} .'-]+$\"\r\n                                placeholder = \"Name for the course ?\"\r\n                                required = {true}\r\n                                spellCheck = {false}\r\n                                value = {course.courseName}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className = \"text-muted\">\r\n                                format: characters only !  \r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"DescriptionTextarea\">\r\n                            <Form.Label>\r\n                                Description:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                as = \"textarea\"\r\n                                autoComplete = \"off\"\r\n                                autoFocus = {false}\r\n                                name = \"descriptionTextarea\"\r\n                                placeholder = \"Description for the course ?\"\r\n                                required = {false}\r\n                                spellCheck = {true}\r\n                                rows = {5}\r\n                                value = {course.description}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"CourseTypeDropdownList\">\r\n                            <Form.Label>\r\n                                Course Type:\r\n                            </Form.Label>\r\n                            <Form.Control \r\n                                as = \"select\" \r\n                                name = \"courseTypeDropdownList\"\r\n                                autoFocus = {false}\r\n                                required = {true}\r\n                                value = {selectedCourseTypeID}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (\r\n                                            event\r\n                                        );\r\n                                    } \r\n                                }\r\n                            >\r\n                                {courseTypeHolder.map (\r\n                                    (\r\n                                            courseType\r\n                                    ) => renderCourseTypeDropdownList (\r\n                                            courseType\r\n                                    )  \r\n                                )}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"CourseLevelDropdownList\">\r\n                            <Form.Label>\r\n                                Course Level:\r\n                            </Form.Label>\r\n                            <Form.Control \r\n                                as = \"select\" \r\n                                name = \"courseLevelDropdownList\"\r\n                                autoFocus = {false}\r\n                                required = {true}\r\n                                value = {selectedCourseLevelID}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (\r\n                                            event\r\n                                        );\r\n                                    } \r\n                                }\r\n                            >\r\n                                {courseLevelHolder.map (\r\n                                    (\r\n                                            courseLevel\r\n                                    ) => renderCourseLevelDropdownList (\r\n                                            courseLevel\r\n                                    )  \r\n                                )}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId = \"TuitionFeeField\">\r\n                            <Form.Label>\r\n                                Tuition Fee (VND):\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type = \"number\"\r\n                                autoComplete = \"on\"\r\n                                autoFocus = {false}\r\n                                name = \"tuitionFeeField\"\r\n                                placeholder = \"Price of the course ?\"\r\n                                required = {true}\r\n                                spellCheck = {false}\r\n                                min = {0}\r\n                                step = {500}\r\n                                value = {course.tuitionFee}\r\n                                onChange = {\r\n                                    (event) => {\r\n                                        handleChange (event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className = \"text-muted\">\r\n                                format: numbers only !  \r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button \r\n                        variant = \"success\" \r\n                        type = \"submit\"\r\n                        form = \"EditCourseForm\" \r\n                    >\r\n                        Save\r\n                    </Button>\r\n                    <Button \r\n                        variant = \"outline-secondary\" \r\n                        onClick = {closeEditCourseForm}\r\n                    >\r\n                        Cancel\r\n                    </Button>   \r\n                </Modal.Footer>\r\n            </Modal>\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/\"}}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item \r\n                                    linkAs = {Link}\r\n                                    linkProps = {{to: \"/admin-console\"}}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Manage course functions\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1 className = \"mb-3\">\r\n                                <span className = \"mr-3\">\r\n                                    Manage Course\r\n                                </span>\r\n                                <Button \r\n                                    variant = \"success\"\r\n                                    type = \"button\"\r\n                                    onClick = {openCreateCourseForm}\r\n                                >\r\n                                    Create New\r\n                                </Button>\r\n                            </h1>\r\n                            <Form>\r\n                                <Table responsive = \"md\" hover = {true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                Course Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Course Type\r\n                                            </th>\r\n                                            <th>\r\n                                                Course Level\r\n                                            </th>\r\n                                            <th>\r\n                                                Tuition Fee\r\n                                            </th>\r\n                                            <th>\r\n                                                Actions\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {courseHolder.map (\r\n                                            (\r\n                                                    course\r\n                                                    , index\r\n                                            ) => renderCourseTable (\r\n                                                    course\r\n                                                    , index\r\n                                                    , openViewDetailDialog\r\n                                                    , openEditCourseForm\r\n                                                    , handleDeleteCourse\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\User.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RegisterFormAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\RegisterForm.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseTypeAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseLevelAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\Course.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\CourseType.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\CourseLevel.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageLessonPage.tsx",["400"],"import React, {\r\n    ChangeEvent, FormEvent, MouseEvent,\r\n    ReactElement, useEffect, useState\r\n} from \"react\";\r\nimport { Breadcrumb, Button, Col, Container, Form, Modal, Row, Table }\r\n    from \"react-bootstrap\";\r\nimport { Lesson } from '../../model/Lesson';\r\nimport { LessonAPI } from '../../common/service/LessonAPI';\r\nimport { Link } from \"react-router-dom\";\r\nimport { DataPage } from \"../../App\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\n\r\nfunction renderLessonTable (\r\n    lesson: Lesson\r\n    , index: number\r\n    , openViewDetailsDialog: (\r\n        event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ) => void\r\n    , openEditLessonForm: (\r\n        event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ) => void\r\n    , handleDeleteLesson: (\r\n        event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ) => void\r\n): ReactElement {\r\n    return (\r\n        <tr key={lesson.lessonID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {lesson.lessonName}\r\n            </td>\r\n            <td>\r\n                {lesson.type}\r\n            </td>\r\n            <td>\r\n                {lesson.duration}\r\n            </td>\r\n            <td>\r\n                <Button\r\n                    variant=\"primary\"\r\n                    type=\"button\"\r\n                    value={lesson.lessonID}\r\n                    onClick={\r\n                        (event) => {\r\n                            openViewDetailsDialog(event);\r\n                        }\r\n                    }\r\n                >\r\n                    Details\r\n            </Button>\r\n            &nbsp;\r\n                <Button\r\n                    variant=\"success\"\r\n                    type=\"button\"\r\n                    value={lesson.lessonID}\r\n                    onClick={\r\n                        (event) => {\r\n                            openEditLessonForm(event);\r\n                        }\r\n                    }\r\n                >\r\n                    Edit\r\n            </Button>\r\n            &nbsp;\r\n                <Button\r\n                    variant=\"danger\"\r\n                    type=\"button\"\r\n                    value={lesson.lessonID}\r\n                    onClick={\r\n                        (event) => {\r\n                            handleDeleteLesson(event);\r\n                        }\r\n                    }\r\n                >\r\n                    Delete\r\n            </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface ManageLessonPageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function ManageLessonPage (props: ManageLessonPageProps): ReactElement {\r\n    // Variables declaration:\r\n    let typeGuardian: TypeGuard;\r\n    let [showCreateLessonForm, setShowCreateLessonForm]\r\n        = useState<boolean>(false);\r\n    let htmlElement:\r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let [lesson, setLesson] = useState<Lesson>(new Lesson());\r\n    let updatedLesson: Lesson | undefined;\r\n    let lessonAPI: LessonAPI;\r\n    let i: number | undefined;\r\n    let [pageIndex] = useState<number>(0);\r\n    let [pageSize] = useState<number>(10);\r\n    let [totalPageCount, setTotalPageCount] = useState<number>(0);\r\n    let lessonDataPage: DataPage<Lesson> | undefined;\r\n    let [lessonHolder, setLessonHolder] = useState<Lesson[]>([]);\r\n    let [showViewDetailDialog, setShowViewDetailDialog]\r\n        = useState<boolean>(false);\r\n    let button: HTMLButtonElement | undefined;\r\n    let lessonID: number | undefined;\r\n    let lessonSample: Lesson | undefined;\r\n    let [formattedLastModified, setFormattedLastModified]\r\n        = useState<string>(\"\");\r\n    let rawDate: Date | undefined;\r\n    let [formattedDateCreated, setFormattedDateCreated]\r\n        = useState<string>(\"\");\r\n    let [pendingLessonID, setPendingLessonID] = useState<number>(0);\r\n    let [showEditLessonForm, setShowEditLessonForm]\r\n        = useState<boolean>(false);\r\n\r\n    lessonAPI = new LessonAPI();\r\n    typeGuardian = new TypeGuard();\r\n\r\n    function handleDeleteLesson (\r\n        event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        setPendingLessonID(Number(button.value));\r\n        props.dialogController.setDialogTitle(\"Confirm Delete Lesson\");\r\n        props.dialogController.setDialogBody(\r\n            \"Are you sure you want to delete this lesson ?\"\r\n        );\r\n        props.dialogController.setDialogType(\"confirm\");\r\n        props.dialogController.setShowDialog(true);\r\n    }\r\n\r\n    async function executeLessonDeletion (): Promise<void> {\r\n        try {\r\n            await lessonAPI.deleteLesson(pendingLessonID);\r\n            loadLessonTable();\r\n            return Promise.resolve<undefined>(undefined);\r\n        }\r\n        catch (apiError: unknown) {\r\n            if (typeGuardian.isAxiosError(apiError)) {\r\n                if (typeof apiError.code === \"string\") {\r\n                    props.dialogController.setDialogTitle(\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle(apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody(apiError.message);\r\n                props.dialogController.setDialogType(\"error\");\r\n                props.dialogController.setShowDialog(true);\r\n            }\r\n            return Promise.reject(apiError);\r\n        }\r\n    }\r\n\r\n    function openViewDetailDialog (\r\n        event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        lessonID = Number(button.value);\r\n        for (i = 0; i < lessonHolder.length; i++) {\r\n            lessonSample = lessonHolder[i];\r\n            if (lessonSample.lessonID === lessonID) {\r\n                setLesson(lessonSample);\r\n                rawDate = new Date(lessonSample.lastModified);\r\n                if (rawDate.toString() === new Date(0).toString()) {\r\n                    setFormattedLastModified(\"Has not been modified yet !\");\r\n                }\r\n                else {\r\n                    setFormattedLastModified(rawDate.toLocaleString());\r\n                }\r\n                rawDate = new Date(lessonSample.dateCreated);\r\n                setFormattedDateCreated(rawDate.toLocaleString());\r\n                break;\r\n            }\r\n        }\r\n        setShowViewDetailDialog(true);\r\n    }\r\n\r\n    function closeViewDetailDialog (): void {\r\n        setShowViewDetailDialog(false);\r\n    }\r\n\r\n    function openCreateLessonForm (): void {\r\n        setLesson(new Lesson());\r\n        setShowCreateLessonForm(true);\r\n    }\r\n\r\n    function closeCreateLessonForm (): void {\r\n        setShowCreateLessonForm(false);\r\n    }\r\n\r\n    function openEditLessonForm (\r\n        event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): void {\r\n        button = event.target as HTMLButtonElement;\r\n        lessonID = Number(button.value);\r\n        for (i = 0; i < lessonHolder.length; i++) {\r\n            lessonSample = lessonHolder[i];\r\n            if (lessonSample.lessonID === lessonID) {\r\n                setLesson(lessonSample);\r\n                break;\r\n            }\r\n        }\r\n        setShowEditLessonForm(true);\r\n    }\r\n\r\n    function closeEditLessonForm (): void {\r\n        setShowEditLessonForm(false);\r\n    }\r\n\r\n    function handleChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ): void {\r\n        updatedLesson = new Lesson(lesson);\r\n        htmlElement = event.target;\r\n        console.log(htmlElement.name);\r\n        switch (htmlElement.name) {\r\n            default:\r\n                throw new Error(\"Unknown html element !\");\r\n\r\n            case \"lessonNameField\":\r\n                updatedLesson.lessonName = htmlElement.value;\r\n                break;\r\n\r\n            case \"lessonTypeField\":\r\n                updatedLesson.type = htmlElement.value;\r\n                break;\r\n\r\n            case \"descriptionTextarea\":\r\n                updatedLesson.description = htmlElement.value;\r\n                break;\r\n\r\n            case \"durationField\":\r\n                updatedLesson.duration = Number(htmlElement.value);\r\n                break;\r\n        }\r\n        setLesson(updatedLesson);\r\n    }\r\n\r\n    async function createLesson (\r\n        event: FormEvent<HTMLFormElement>\r\n    ): Promise<void> {\r\n        event.preventDefault();\r\n        try {\r\n            await lessonAPI.createNewLesson(lesson);\r\n            closeCreateLessonForm();\r\n            props.dialogController.setDialogTitle(\"Lesson Created !\");\r\n            props.dialogController.setDialogBody(\r\n                `The lesson [${lesson.lessonName}] \r\n            has been created successfully.`\r\n            );\r\n            props.dialogController.setDialogType(\"inform\");\r\n            props.dialogController.setShowDialog(true);\r\n            loadLessonTable();\r\n            return Promise.resolve<undefined>(undefined);\r\n        }\r\n        catch (apiError: unknown) {\r\n            if (typeGuardian.isAxiosError(apiError)) {\r\n                if (typeof apiError.code === \"string\") {\r\n                    props.dialogController.setDialogTitle(\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle(apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody(apiError.message);\r\n                props.dialogController.setDialogType(\"error\");\r\n                props.dialogController.setShowDialog(true);\r\n            }\r\n            return Promise.reject(apiError);\r\n        }\r\n    }\r\n\r\n    async function editLesson (\r\n        event: FormEvent<HTMLFormElement>\r\n    ): Promise<void> {\r\n        event.preventDefault();\r\n        try {\r\n            await lessonAPI.updateLesson(lesson);\r\n            closeEditLessonForm();\r\n            props.dialogController.setDialogTitle(\"Lesson Saved !\");\r\n            props.dialogController.setDialogBody(\r\n                `The lesson [${lesson.lessonName}] \r\n            has been saved successfully.`\r\n            );\r\n            props.dialogController.setDialogType(\"inform\");\r\n            props.dialogController.setShowDialog(true);\r\n            loadLessonTable();\r\n            return Promise.resolve<undefined>(undefined);\r\n        }\r\n        catch (apiError: unknown) {\r\n            if (typeGuardian.isAxiosError(apiError)) {\r\n                if (typeof apiError.code === \"string\") {\r\n                    props.dialogController.setDialogTitle(\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle(apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody(apiError.message);\r\n                props.dialogController.setDialogType(\"error\");\r\n                props.dialogController.setShowDialog(true);\r\n            }\r\n            return Promise.reject(apiError);\r\n        }\r\n    }\r\n\r\n    async function loadLessonTable (): Promise<void> {\r\n        try {\r\n            lessonDataPage = await lessonAPI.getAllLesson(\r\n                pageIndex\r\n                , pageSize\r\n            );\r\n            setTotalPageCount(lessonDataPage.totalPageCount);\r\n            setLessonHolder(lessonDataPage.pageDataHolder);\r\n            return Promise.resolve<undefined>(undefined);\r\n        }\r\n        catch (apiError: unknown) {\r\n            if (typeGuardian.isAxiosError(apiError)) {\r\n                if (typeof apiError.code === \"string\") {\r\n                    props.dialogController.setDialogTitle(\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle(apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody(apiError.message);\r\n                props.dialogController.setDialogType(\"error\");\r\n                props.dialogController.setShowDialog(true);\r\n            }\r\n            return Promise.reject(apiError);\r\n        }\r\n    }\r\n\r\n    useEffect(\r\n        (): void => {\r\n            loadLessonTable().catch(\r\n                (error: unknown) => {\r\n                    console.error(error);\r\n                }\r\n            );\r\n        }\r\n        , []\r\n    );\r\n\r\n    useEffect(\r\n        (): void => {\r\n            if (props.dialogController.dialogIsConfirmed === true) {\r\n                executeLessonDeletion().catch(\r\n                    (error: unknown) => {\r\n                        console.error(error);\r\n                    }\r\n                );\r\n                props.dialogController.setDialogIsConfirmed(false);\r\n            }\r\n        }\r\n        , [props.dialogController.dialogIsConfirmed]\r\n    );\r\n\r\n    // Modals\r\n    return (\r\n        <Container fluid={true}>\r\n            {props.modalDialog}\r\n            <Modal\r\n                show={showCreateLessonForm}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n                size=\"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>New Lesson Information</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form\r\n                        id=\"CreateLessonForm\"\r\n                        className=\"pt-2 pr-5 pl-5 pb-0\"\r\n                        onSubmit={\r\n                            (event) => {\r\n                                createLesson(event).catch(\r\n                                    (error: unknown) => {\r\n                                        console.error(error);\r\n                                    }\r\n                                );\r\n                            }\r\n                        }\r\n                    >\r\n                        <Form.Group controlId=\"LessonNameField\">\r\n                            <Form.Label>\r\n                                Lesson Name:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                autoComplete=\"on\"\r\n                                autoFocus={true}\r\n                                name=\"lessonNameField\"\r\n                                pattern=\"^[a-zA-Z0-9\\+]*$\"\r\n                                placeholder=\"Name for the new lesson ?\"\r\n                                required={true}\r\n                                spellCheck={false}\r\n                                value={lesson.lessonName}\r\n                                onChange={\r\n                                    (event) => {\r\n                                        handleChange(event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className=\"text-muted\">\r\n                                format: no special character !\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"LessonTypeField\">\r\n                            <Form.Label>\r\n                                Lesson Type:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                autoComplete=\"on\"\r\n                                autoFocus={true}\r\n                                name=\"lessonTypeField\"\r\n                                pattern=\"^[\\p{L} .'-]+$\"\r\n                                placeholder=\"Type for the new lesson ?\"\r\n                                required={true}\r\n                                spellCheck={false}\r\n                                value={lesson.type}\r\n                                onChange={\r\n                                    (event) => {\r\n                                        handleChange(event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className=\"text-muted\">\r\n                                format: no special character !\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"DescriptionTextarea\">\r\n                            <Form.Label>\r\n                                Description:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                autoComplete=\"off\"\r\n                                autoFocus={false}\r\n                                name=\"descriptionTextarea\"\r\n                                placeholder=\"Description for the new lesson ?\"\r\n                                required={false}\r\n                                spellCheck={true}\r\n                                rows={5}\r\n                                value={lesson.description}\r\n                                onChange={\r\n                                    (event) => {\r\n                                        handleChange(event);\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"durationField\">\r\n                            <Form.Label>\r\n                                Duration (minutes) :\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                autoComplete=\"on\"\r\n                                autoFocus={false}\r\n                                name=\"durationField\"\r\n                                placeholder=\"Duration of the new lesson ?\"\r\n                                required={true}\r\n                                spellCheck={false}\r\n                                min={0}\r\n                                step={1}\r\n                                value={lesson.duration}\r\n                                onChange={\r\n                                    (event) => {\r\n                                        handleChange(event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className=\"text-muted\">\r\n                                format: numbers only !\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        variant=\"success\"\r\n                        type=\"submit\"\r\n                        form=\"CreateLessonForm\"\r\n                    >\r\n                        Create\r\n                    </Button>\r\n                    &nbsp;\r\n                    <Button\r\n                        variant=\"outline-secondary\"\r\n                        onClick={closeCreateLessonForm}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Modal\r\n                show={showViewDetailDialog}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n                size=\"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>Lesson Details</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form\r\n                        id=\"viewLessonForm\"\r\n                        className=\"pt-2 pr-5 pl-5 pb-0\"\r\n                    >\r\n                        <Form.Row>\r\n                            <Form.Group as={Row} controlId=\"LessonIDInfo\">\r\n                                <Form.Label\r\n                                    column={true}\r\n                                    md={5}\r\n                                >\r\n                                    + Lesson ID:\r\n                                </Form.Label>\r\n                                <Col md={7}>\r\n                                    <Form.Control\r\n                                        plaintext={true}\r\n                                        readOnly={true}\r\n                                        value={lesson.lessonID}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n\r\n                        <Form.Row>\r\n                            <Form.Group as={Row} controlId=\"LessonNameInfo\">\r\n                                <Form.Label\r\n                                    column={true}\r\n                                    md={5}\r\n                                >\r\n                                    + Lesson Name:\r\n                                </Form.Label>\r\n                                <Col md={7}>\r\n                                    <Form.Control\r\n                                        plaintext={true}\r\n                                        readOnly={true}\r\n                                        value={lesson.lessonName}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n\r\n                        <Form.Row>\r\n                            <Form.Group as={Row} controlId=\"LessonTypeInfo\">\r\n                                <Form.Label\r\n                                    column={true}\r\n                                    md={5}\r\n                                >\r\n                                    + Lesson Type:\r\n                                </Form.Label>\r\n                                <Col md={7}>\r\n                                    <Form.Control\r\n                                        plaintext={true}\r\n                                        readOnly={true}\r\n                                        value={lesson.type}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n\r\n                        <Form.Group controlId=\"DescriptionInfo\">\r\n                            <Form.Label>\r\n                                + Description:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                readOnly={true}\r\n                                rows={5}\r\n                                value={lesson.description}\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Row>\r\n\r\n                            <Form.Group as={Row} controlId=\"DurationInfo\">\r\n                                <Form.Label\r\n                                    column={true}\r\n                                    md={6}\r\n                                >\r\n                                    + Duration (minutes):\r\n                            </Form.Label>\r\n                                <Col\r\n                                    md={4}\r\n                                >\r\n                                    <Form.Control\r\n                                        plaintext={true}\r\n                                        readOnly={true}\r\n                                        value={\r\n                                            `${lesson.duration.toLocaleString()\r\n                                            }`\r\n                                        }\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n\r\n                        </Form.Row>\r\n\r\n                        <Form.Row>\r\n\r\n                            <Form.Group as={Row}\r\n                                controlId=\"LastModifiedInfo\">\r\n                                <Form.Label\r\n                                    column={true}\r\n                                    md={5}\r\n                                >\r\n                                    + Last Modified:\r\n                            </Form.Label>\r\n                                <Col md={7}>\r\n                                    <Form.Control\r\n                                        plaintext={true}\r\n                                        readOnly={true}\r\n                                        value={formattedLastModified}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n\r\n                        </Form.Row>\r\n\r\n                        <Form.Row>\r\n\r\n                            <Form.Group as={Row}\r\n                                controlId=\"DateCreatedInfo\">\r\n                                <Form.Label\r\n                                    column={true}\r\n                                    md={5}\r\n                                >\r\n                                    + Date Created:\r\n                            </Form.Label>\r\n                                <Col md={7}>\r\n                                    <Form.Control\r\n                                        plaintext={true}\r\n                                        readOnly={true}\r\n                                        value={formattedDateCreated}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Group>\r\n\r\n                        </Form.Row>\r\n\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        variant=\"info\"\r\n                        onClick={closeViewDetailDialog}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Modal\r\n                show={showEditLessonForm}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n                size=\"lg\"\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>Edit Lesson</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form\r\n                        id=\"EditLessonForm\"\r\n                        className=\"pt-2 pr-5 pl-5 pb-0\"\r\n                        onSubmit={\r\n                            (event) => {\r\n                                editLesson(event).catch(\r\n                                    (error: unknown) => {\r\n                                        console.error(error);\r\n                                    }\r\n                                );\r\n                            }\r\n                        }\r\n                    >\r\n                        <Form.Group controlId=\"LessonNameField\">\r\n                            <Form.Label>\r\n                                Lesson Name:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                autoComplete=\"on\"\r\n                                autoFocus={true}\r\n                                name=\"lessonNameField\"\r\n                                pattern=\"^[a-zA-Z0-9\\+]*$\"\r\n                                placeholder=\"Name for the lesson ?\"\r\n                                required={true}\r\n                                spellCheck={false}\r\n                                value={lesson.lessonName}\r\n                                onChange={\r\n                                    (event) => {\r\n                                        handleChange(event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className=\"text-muted\">\r\n                                format: no special character !\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"LessonTypeField\">\r\n                            <Form.Label>\r\n                                Lesson Type:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                autoComplete=\"on\"\r\n                                autoFocus={true}\r\n                                name=\"lessonTypeField\"\r\n                                pattern=\"^[\\p{L} .'-]+$\"\r\n                                placeholder=\"Type for the lesson ?\"\r\n                                required={true}\r\n                                spellCheck={false}\r\n                                value={lesson.type}\r\n                                onChange={\r\n                                    (event) => {\r\n                                        handleChange(event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className=\"text-muted\">\r\n                                format: no special character !\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"DescriptionTextarea\">\r\n                            <Form.Label>\r\n                                Description:\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                autoComplete=\"off\"\r\n                                autoFocus={false}\r\n                                name=\"descriptionTextarea\"\r\n                                placeholder=\"Description for the lesson ?\"\r\n                                required={false}\r\n                                spellCheck={true}\r\n                                rows={5}\r\n                                value={lesson.description}\r\n                                onChange={\r\n                                    (event) => {\r\n                                        handleChange(event);\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"DurationField\">\r\n                            <Form.Label>\r\n                                Duration (minutes):\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                autoComplete=\"on\"\r\n                                autoFocus={false}\r\n                                name=\"durationField\"\r\n                                placeholder=\"Duration of the lesson ?\"\r\n                                required={true}\r\n                                spellCheck={false}\r\n                                min={0}\r\n                                step={1}\r\n                                value={lesson.duration}\r\n                                onChange={\r\n                                    (event) => {\r\n                                        handleChange(event);\r\n                                    }\r\n                                }\r\n                            />\r\n                            <Form.Text className=\"text-muted\">\r\n                                format: numbers only !\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        variant=\"success\"\r\n                        type=\"submit\"\r\n                        form=\"EditLessonForm\"\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                    &nbsp;\r\n                    <Button\r\n                        variant=\"outline-secondary\"\r\n                        onClick={closeEditLessonForm}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            <main>\r\n                <Container>\r\n                    <Row className=\"bg-white\">\r\n                        <Col>\r\n                            <Breadcrumb>\r\n                                <Breadcrumb.Item\r\n                                    linkAs={Link}\r\n                                    linkProps={{ to: \"/\" }}\r\n                                >\r\n                                    Home\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item\r\n                                    linkAs={Link}\r\n                                    linkProps={{\r\n                                        to:\r\n                                        \"/admin-console/manage-course-function\"\r\n                                    }}\r\n                                >\r\n                                    Admin Console\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Manage course function\r\n                                </Breadcrumb.Item>\r\n                                <Breadcrumb.Item active>\r\n                                    Manage lesson function\r\n                                </Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <h1 className=\"mb-3\">\r\n                                <span className=\"mr-3\">\r\n                                    Manage Lessons\r\n                                </span>\r\n                                <Button\r\n                                    variant=\"success\"\r\n                                    type=\"button\"\r\n                                    onClick={openCreateLessonForm}\r\n                                >\r\n                                    Create New\r\n                                </Button>\r\n                            </h1>\r\n                            <Form>\r\n                                <Table responsive=\"md\" hover={true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                Lesson Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Lesson Type\r\n                                            </th>\r\n                                            <th>\r\n                                                Duration (minutes)\r\n                                            </th>\r\n                                            <th>\r\n                                                Actions\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {lessonHolder.map(\r\n                                            (\r\n                                                lesson\r\n                                                , index\r\n                                            ) => renderLessonTable(\r\n                                                lesson\r\n                                                , index\r\n                                                , openViewDetailDialog\r\n                                                , openEditLessonForm\r\n                                                , handleDeleteLesson\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n        </Container>\r\n    );\r\n}\r\n","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\Lesson.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\LessonAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageStudentPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx",["401","402"],"/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, {\r\n    ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Col, Container, Row\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { useParams } from 'react-router-dom';\r\nimport { User } from '../model/User';\r\nimport { ColDef, DataGrid, ValueGetterParams } from '@material-ui/data-grid';\r\n\r\nconst columns: ColDef[] = [\r\n    { \r\n        field: 'userID'\r\n        , headerName: 'ID'\r\n        , width: 70 \r\n    },\r\n    { \r\n        field: 'firstName'\r\n        , headerName: 'First name'\r\n        , width: 130 \r\n    },\r\n    { \r\n        field: 'lastName'\r\n        , headerName: 'Last name'\r\n        , width: 130 \r\n    },\r\n    {\r\n        field: 'fullName',\r\n        headerName: 'Full name',\r\n        description: 'This column has a value getter and is not sortable.',\r\n        sortable: false,\r\n        width: 160,\r\n        valueGetter: (params: ValueGetterParams) =>\r\n            `${params.getValue('firstName') || ''} \r\n            ${params.getValue('lastName') || ''}`,\r\n    },\r\n    { \r\n        field: 'email'\r\n        , headerName: 'Email'\r\n        , width: 130 \r\n    },\r\n    { \r\n        field: 'dbo'\r\n        , headerName: 'Date of Birth'\r\n        , type: 'Date'\r\n        , width: 90 \r\n    },\r\n    { \r\n        field: 'phoneNumber'\r\n        , headerName: 'Phone'\r\n        , width: 70 \r\n    },\r\n    { \r\n        field: 'gender'\r\n        , headerName: 'Gender'\r\n        , width: 30 \r\n    },\r\n    { \r\n        field: 'job'\r\n        , headerName: 'Job'\r\n        , width: 70 \r\n    },\r\n    { \r\n        field: 'photoURI'\r\n        , headerName: 'Photo URI'\r\n        , width: 130 \r\n    },\r\n    { \r\n        field: 'selfDescription'\r\n        , headerName: 'Self Description'\r\n        , width: 200 \r\n    },\r\n    { \r\n        field: 'password'\r\n        , headerName: 'Password'\r\n        , width: 70 \r\n    },\r\n    { \r\n        field: 'accountStatus'\r\n        , headerName: 'Account Status'\r\n        , width: 70 \r\n    },\r\n    { \r\n        field: 'dateCreated'\r\n        , headerName: 'Date Created'\r\n        , type: 'Date'\r\n        , width: 70 \r\n    },\r\n    { \r\n        field: 'lastLogin'\r\n        , headerName: 'Last Login'\r\n        , type: 'Date'\r\n        , width: 70 \r\n    },\r\n    { \r\n        field: 'roleList'\r\n        , headerName: 'Role'\r\n        , width: 70 \r\n    },\r\n    { \r\n        field: 'addressList'\r\n        , headerName: 'Address'\r\n        , width: 130 \r\n    },\r\n\r\n\r\n];\r\n\r\nexport function ViewProfilePage (): ReactElement {\r\n\r\n    let userAPI: UserAPI | undefined;\r\n    let param: any = useParams();\r\n    let [student, setStudent] = useState<User>(new User());\r\n\r\n    useEffect(() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.displayStudent(param.studentID).then(\r\n            (res) => {\r\n                setStudent(res.data);\r\n                console.log(student.userName);\r\n            }\r\n        );\r\n    });\r\n\r\n    console.log(param.studentID);\r\n\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <Row>\r\n                        <Col>\r\n                            {/* <div style={{ height: 400, width: '100%' }}>\r\n                                <DataGrid \r\n                                    rows={useEffect} \r\n                                    columns={columns} \r\n                                    pageSize={5} \r\n                                    checkboxSelection \r\n                                />\r\n                            </div> */}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\index.tsx",[],["403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419"],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\reportWebVitals.ts",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\App.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\HomePage.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx",["420","421","422"],"import React, {\r\n    ChangeEvent, FormEvent, ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, Row\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { useParams } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\n\r\nexport function EditStudentInfo (): ReactElement {\r\n    let [user, setUser] = useState<User>(new User());\r\n    let updatedUser: User | undefined;\r\n    let inputField:\r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let param: any = useParams();\r\n    let [student, setStudent] = useState<User>(new User());\r\n    \r\n    useEffect (() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.displayStudent(param.studentID).then(\r\n            (res) => {\r\n                setUser(res.data);\r\n                // console.log(student.userName);\r\n            }\r\n    );\r\n    }, []);\r\n\r\n    \r\n    function handleUserChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ){\r\n        updatedUser = new User(user);\r\n        inputField = event.target;\r\n        updatedUser[\r\n            inputField.name as keyof UserIndexSignature\r\n        ] = inputField.value;\r\n        setUser(updatedUser);\r\n    }\r\n\r\n    function updateStudent (event: FormEvent<HTMLFormElement>, userID: number) {\r\n        event.preventDefault();\r\n        userAPI = new UserAPI();\r\n        userAPI.update(user, userID);\r\n        console.log(userID);\r\n    }\r\n \r\n    console.log(param.studentID);\r\n    // console.log(student.userName);\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <h1>{param.studentID}</h1>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form\r\n                                noValidate={false}\r\n                                onSubmit={(event) => {\r\n                                    updateStudent(event, param.studentID);\r\n                                }}\r\n                            >\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        User Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"userName\"\r\n                                        id=\"userName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        First Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"firstName\"\r\n                                        id=\"firstName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        value={user.firstName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Last Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"lastName\"\r\n                                        id=\"lastName\"\r\n                                        pattern=\"^[a-z0-9_-]{1,15}$\"\r\n                                        value={user.lastName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Email:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"email\"\r\n                                        id=\"email\"\r\n                                        value={user.email}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        DOB:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"dob\"\r\n                                        id=\"dob\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Phone:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"phoneNumber\"\r\n                                        id=\"phoneNumber\"\r\n                                        value={user.phoneNumber}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Gender\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"gender\"\r\n                                        id=\"gender\"\r\n                                        value={user.gender}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Job:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"job\"\r\n                                        id=\"job\"\r\n                                        value={user.job}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Password:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        autoComplete=\"off\"\r\n                                        autoFocus={false}\r\n                                        name=\"password\"\r\n                                        id=\"password\"\r\n                                        placeholder=\"Your new password\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Account Status\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"accountStatus\"\r\n                                        id=\"accountStatus\"\r\n                                        value={user.accountStatus}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button\r\n                                    variant=\"success\"\r\n                                    type=\"submit\"\r\n                                    block = {true}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\admin\\ManageStudentPage.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\LogInPage.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\EditTeacherInfo.tsx",["423","424","425"],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx",["426","427","428","429","430","431","432","433","434","435","436","437","438"],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\DetailPage.tsx",["439","440","441","442","443","444","445","446","447","448","449","450","451","452"],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx",["453","454"],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\admin\\ManageCoursePage.tsx",["455"],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\admin\\ManageStudentInCoursePage.tsx",["456","457"],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\admin\\ManageThingsInCoursePage.tsx",["458"],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\select_role_page\\SelectRolePage.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\admin\\ManageExaminationInCoursePage.tsx",["459"],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\teacher\\TeacherDashboardPage.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\teacher\\ManageExamQuestionPage.tsx",["460"],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\component\\home_page_header\\HomePageHeader.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\User.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\RegisterForm.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\RegisterFormAPI.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx",["461"],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\CourseLevelAPI.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\CourseTypeAPI.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\CourseAPI.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\ExaminationAPI.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\TypeConvert.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\Course.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\Examination.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\MultipleChoiceQuestion.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\QuestionOption.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\QuizAPI.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\Quiz.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\service\\InputValidate.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\common\\component\\teacher_sidebar\\TeacherSidebar.tsx",[],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\CourseLevel.tsx",[],["462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478"],"D:\\Capstone\\Source code\\Backup\\backup10\\language-center-system\\front-end\\src\\model\\CourseType.tsx",[],{"ruleId":"479","replacedBy":"480"},{"ruleId":"481","replacedBy":"482"},{"ruleId":"483","replacedBy":"484"},{"ruleId":"485","replacedBy":"486"},{"ruleId":"487","replacedBy":"488"},{"ruleId":"489","replacedBy":"490"},{"ruleId":"491","replacedBy":"492"},{"ruleId":"493","replacedBy":"494"},{"ruleId":"495","replacedBy":"496"},{"ruleId":"497","replacedBy":"498"},{"ruleId":"499","replacedBy":"500"},{"ruleId":"501","replacedBy":"502"},{"ruleId":"503","replacedBy":"504"},{"ruleId":"505","replacedBy":"506"},{"ruleId":"507","replacedBy":"508"},{"ruleId":"509","replacedBy":"510"},{"ruleId":"511","replacedBy":"512"},{"ruleId":"513","severity":1,"message":"514","line":3,"column":5,"nodeType":"515","messageId":"516","endLine":3,"endColumn":16},{"ruleId":"513","severity":1,"message":"517","line":4,"column":7,"nodeType":"515","messageId":"516","endLine":4,"endColumn":15},{"ruleId":"513","severity":1,"message":"518","line":4,"column":17,"nodeType":"515","messageId":"516","endLine":4,"endColumn":26},{"ruleId":"513","severity":1,"message":"519","line":6,"column":7,"nodeType":"515","messageId":"516","endLine":6,"endColumn":21},{"ruleId":"513","severity":1,"message":"520","line":6,"column":23,"nodeType":"515","messageId":"516","endLine":6,"endColumn":31},{"ruleId":"513","severity":1,"message":"521","line":9,"column":5,"nodeType":"515","messageId":"516","endLine":9,"endColumn":11},{"ruleId":"513","severity":1,"message":"522","line":9,"column":30,"nodeType":"515","messageId":"516","endLine":9,"endColumn":34},{"ruleId":"513","severity":1,"message":"523","line":12,"column":10,"nodeType":"515","messageId":"516","endLine":12,"endColumn":19},{"ruleId":"513","severity":1,"message":"524","line":14,"column":10,"nodeType":"515","messageId":"516","endLine":14,"endColumn":17},{"ruleId":"513","severity":1,"message":"525","line":15,"column":10,"nodeType":"515","messageId":"516","endLine":15,"endColumn":22},{"ruleId":"513","severity":1,"message":"526","line":16,"column":10,"nodeType":"515","messageId":"516","endLine":16,"endColumn":18},{"ruleId":"513","severity":1,"message":"527","line":16,"column":20,"nodeType":"515","messageId":"516","endLine":16,"endColumn":27},{"ruleId":"513","severity":1,"message":"528","line":17,"column":10,"nodeType":"515","messageId":"516","endLine":17,"endColumn":20},{"ruleId":"513","severity":1,"message":"529","line":17,"column":22,"nodeType":"515","messageId":"516","endLine":17,"endColumn":33},{"ruleId":"513","severity":1,"message":"530","line":18,"column":10,"nodeType":"515","messageId":"516","endLine":18,"endColumn":23},{"ruleId":"531","severity":1,"message":"532","line":17,"column":16,"nodeType":"533","messageId":"534","endLine":17,"endColumn":19,"suggestions":"535"},{"ruleId":"513","severity":1,"message":"536","line":18,"column":10,"nodeType":"515","messageId":"516","endLine":18,"endColumn":17},{"ruleId":"513","severity":1,"message":"537","line":18,"column":19,"nodeType":"515","messageId":"516","endLine":18,"endColumn":29},{"ruleId":"513","severity":1,"message":"538","line":125,"column":22,"nodeType":"515","messageId":"516","endLine":125,"endColumn":35},{"ruleId":"513","severity":1,"message":"539","line":126,"column":20,"nodeType":"515","messageId":"516","endLine":126,"endColumn":31},{"ruleId":"513","severity":1,"message":"524","line":27,"column":10,"nodeType":"515","messageId":"516","endLine":27,"endColumn":17},{"ruleId":"513","severity":1,"message":"540","line":31,"column":10,"nodeType":"515","messageId":"516","endLine":31,"endColumn":14},{"ruleId":"513","severity":1,"message":"541","line":168,"column":10,"nodeType":"515","messageId":"516","endLine":168,"endColumn":24},{"ruleId":"513","severity":1,"message":"541","line":103,"column":10,"nodeType":"515","messageId":"516","endLine":103,"endColumn":24},{"ruleId":"513","severity":1,"message":"542","line":11,"column":18,"nodeType":"515","messageId":"516","endLine":11,"endColumn":26},{"ruleId":"513","severity":1,"message":"543","line":13,"column":7,"nodeType":"515","messageId":"516","endLine":13,"endColumn":24},{"ruleId":"479","replacedBy":"544"},{"ruleId":"481","replacedBy":"545"},{"ruleId":"483","replacedBy":"546"},{"ruleId":"485","replacedBy":"547"},{"ruleId":"487","replacedBy":"548"},{"ruleId":"489","replacedBy":"549"},{"ruleId":"491","replacedBy":"550"},{"ruleId":"493","replacedBy":"551"},{"ruleId":"495","replacedBy":"552"},{"ruleId":"497","replacedBy":"553"},{"ruleId":"499","replacedBy":"554"},{"ruleId":"501","replacedBy":"555"},{"ruleId":"503","replacedBy":"556"},{"ruleId":"505","replacedBy":"557"},{"ruleId":"507","replacedBy":"558"},{"ruleId":"509","replacedBy":"559"},{"ruleId":"511","replacedBy":"560"},{"ruleId":"531","severity":1,"message":"532","line":17,"column":16,"nodeType":"533","messageId":"534","endLine":17,"endColumn":19,"suggestions":"561"},{"ruleId":"513","severity":1,"message":"536","line":18,"column":10,"nodeType":"515","messageId":"516","endLine":18,"endColumn":17},{"ruleId":"513","severity":1,"message":"537","line":18,"column":19,"nodeType":"515","messageId":"516","endLine":18,"endColumn":29},{"ruleId":"531","severity":1,"message":"532","line":17,"column":16,"nodeType":"533","messageId":"534","endLine":17,"endColumn":19,"suggestions":"562"},{"ruleId":"513","severity":1,"message":"563","line":18,"column":10,"nodeType":"515","messageId":"516","endLine":18,"endColumn":17},{"ruleId":"513","severity":1,"message":"564","line":18,"column":19,"nodeType":"515","messageId":"516","endLine":18,"endColumn":29},{"ruleId":"513","severity":1,"message":"521","line":6,"column":5,"nodeType":"515","messageId":"516","endLine":6,"endColumn":11},{"ruleId":"513","severity":1,"message":"522","line":6,"column":29,"nodeType":"515","messageId":"516","endLine":6,"endColumn":33},{"ruleId":"513","severity":1,"message":"565","line":6,"column":35,"nodeType":"515","messageId":"516","endLine":6,"endColumn":46},{"ruleId":"513","severity":1,"message":"566","line":6,"column":48,"nodeType":"515","messageId":"516","endLine":6,"endColumn":51},{"ruleId":"513","severity":1,"message":"567","line":6,"column":53,"nodeType":"515","messageId":"516","endLine":6,"endColumn":59},{"ruleId":"513","severity":1,"message":"568","line":9,"column":10,"nodeType":"515","messageId":"516","endLine":9,"endColumn":14},{"ruleId":"513","severity":1,"message":"569","line":10,"column":16,"nodeType":"515","messageId":"516","endLine":10,"endColumn":34},{"ruleId":"513","severity":1,"message":"570","line":67,"column":10,"nodeType":"515","messageId":"516","endLine":67,"endColumn":14},{"ruleId":"513","severity":1,"message":"571","line":67,"column":16,"nodeType":"515","messageId":"516","endLine":67,"endColumn":23},{"ruleId":"513","severity":1,"message":"572","line":68,"column":9,"nodeType":"515","messageId":"516","endLine":68,"endColumn":23},{"ruleId":"513","severity":1,"message":"573","line":69,"column":9,"nodeType":"515","messageId":"516","endLine":69,"endColumn":35},{"ruleId":"513","severity":1,"message":"574","line":71,"column":9,"nodeType":"515","messageId":"516","endLine":71,"endColumn":14},{"ruleId":"513","severity":1,"message":"575","line":73,"column":9,"nodeType":"515","messageId":"516","endLine":73,"endColumn":26},{"ruleId":"513","severity":1,"message":"521","line":8,"column":5,"nodeType":"515","messageId":"516","endLine":8,"endColumn":11},{"ruleId":"513","severity":1,"message":"522","line":8,"column":29,"nodeType":"515","messageId":"516","endLine":8,"endColumn":33},{"ruleId":"513","severity":1,"message":"565","line":8,"column":35,"nodeType":"515","messageId":"516","endLine":8,"endColumn":46},{"ruleId":"513","severity":1,"message":"566","line":8,"column":48,"nodeType":"515","messageId":"516","endLine":8,"endColumn":51},{"ruleId":"513","severity":1,"message":"567","line":8,"column":53,"nodeType":"515","messageId":"516","endLine":8,"endColumn":59},{"ruleId":"513","severity":1,"message":"576","line":8,"column":66,"nodeType":"515","messageId":"516","endLine":8,"endColumn":71},{"ruleId":"513","severity":1,"message":"568","line":11,"column":10,"nodeType":"515","messageId":"516","endLine":11,"endColumn":14},{"ruleId":"513","severity":1,"message":"569","line":12,"column":16,"nodeType":"515","messageId":"516","endLine":12,"endColumn":34},{"ruleId":"513","severity":1,"message":"570","line":71,"column":10,"nodeType":"515","messageId":"516","endLine":71,"endColumn":14},{"ruleId":"513","severity":1,"message":"571","line":71,"column":16,"nodeType":"515","messageId":"516","endLine":71,"endColumn":23},{"ruleId":"513","severity":1,"message":"572","line":72,"column":9,"nodeType":"515","messageId":"516","endLine":72,"endColumn":23},{"ruleId":"513","severity":1,"message":"573","line":73,"column":9,"nodeType":"515","messageId":"516","endLine":73,"endColumn":35},{"ruleId":"513","severity":1,"message":"574","line":75,"column":9,"nodeType":"515","messageId":"516","endLine":75,"endColumn":14},{"ruleId":"513","severity":1,"message":"575","line":77,"column":9,"nodeType":"515","messageId":"516","endLine":77,"endColumn":26},{"ruleId":"513","severity":1,"message":"538","line":125,"column":22,"nodeType":"515","messageId":"516","endLine":125,"endColumn":35},{"ruleId":"513","severity":1,"message":"539","line":126,"column":20,"nodeType":"515","messageId":"516","endLine":126,"endColumn":31},{"ruleId":"513","severity":1,"message":"577","line":92,"column":10,"nodeType":"515","messageId":"516","endLine":92,"endColumn":23},{"ruleId":"513","severity":1,"message":"577","line":102,"column":10,"nodeType":"515","messageId":"516","endLine":102,"endColumn":23},{"ruleId":"513","severity":1,"message":"578","line":110,"column":10,"nodeType":"515","messageId":"516","endLine":110,"endColumn":24},{"ruleId":"513","severity":1,"message":"577","line":34,"column":10,"nodeType":"515","messageId":"516","endLine":34,"endColumn":23},{"ruleId":"513","severity":1,"message":"577","line":57,"column":10,"nodeType":"515","messageId":"516","endLine":57,"endColumn":23},{"ruleId":"513","severity":1,"message":"577","line":66,"column":10,"nodeType":"515","messageId":"516","endLine":66,"endColumn":23},{"ruleId":"513","severity":1,"message":"572","line":339,"column":31,"nodeType":"515","messageId":"516","endLine":339,"endColumn":45},{"ruleId":"479","replacedBy":"579"},{"ruleId":"481","replacedBy":"580"},{"ruleId":"483","replacedBy":"581"},{"ruleId":"485","replacedBy":"582"},{"ruleId":"487","replacedBy":"583"},{"ruleId":"489","replacedBy":"584"},{"ruleId":"491","replacedBy":"585"},{"ruleId":"493","replacedBy":"586"},{"ruleId":"495","replacedBy":"587"},{"ruleId":"497","replacedBy":"588"},{"ruleId":"499","replacedBy":"589"},{"ruleId":"501","replacedBy":"590"},{"ruleId":"503","replacedBy":"591"},{"ruleId":"505","replacedBy":"592"},{"ruleId":"507","replacedBy":"593"},{"ruleId":"509","replacedBy":"594"},{"ruleId":"511","replacedBy":"595"},"callback-return",[],"global-require",[],"handle-callback-err",[],"id-blacklist",["596"],"lines-around-directive",["597"],"no-buffer-constructor",[],"no-catch-shadow",["598"],"no-mixed-requires",[],"no-native-reassign",["599"],"no-negated-in-lhs",["600"],"no-new-require",[],"no-path-concat",[],"no-process-env",[],"no-process-exit",[],"no-restricted-modules",[],"no-sync",[],"prefer-reflect",[],"@typescript-eslint/no-unused-vars","'ChangeEvent' is defined but never used.","Identifier","unusedVar","'Dispatch' is defined but never used.","'FormEvent' is defined but never used.","'SetStateAction' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'TypeGuard' is defined but never used.","'UserAPI' is defined but never used.","'LoggedInUser' is defined but never used.","'Location' is defined but never used.","'History' is defined but never used.","'useHistory' is defined but never used.","'useLocation' is defined but never used.","'LocationState' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["601","602"],"'student' is assigned a value but never used.","'setStudent' is assigned a value but never used.","'setPageNumber' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","'User' is defined but never used.","'totalPageCount' is assigned a value but never used.","'DataGrid' is defined but never used.","'columns' is assigned a value but never used.",[],[],[],["596"],["597"],[],["598"],[],["599"],["600"],[],[],[],[],[],[],[],["603","604"],["605","606"],"'teacher' is assigned a value but never used.","'setTeacher' is assigned a value but never used.","'FormControl' is defined but never used.","'Nav' is defined but never used.","'Navbar' is defined but never used.","'Link' is defined but never used.","'UserIndexSignature' is defined but never used.","'user' is assigned a value but never used.","'getUser' is assigned a value but never used.","'userID' is defined but never used.","'showUser' is defined but never used.","'match' is assigned a value but never used.","'studentID' is defined but never used.","'Table' is defined but never used.","'totalRowCount' is assigned a value but never used.","'totalRowCount2' is assigned a value but never used.",[],[],[],["596"],["597"],[],["598"],[],["599"],["600"],[],[],[],[],[],[],[],"id-denylist","padding-line-between-statements","no-shadow","no-global-assign","no-unsafe-negation",{"messageId":"607","fix":"608","desc":"609"},{"messageId":"610","fix":"611","desc":"612"},{"messageId":"607","fix":"613","desc":"609"},{"messageId":"610","fix":"614","desc":"612"},{"messageId":"607","fix":"615","desc":"609"},{"messageId":"610","fix":"616","desc":"612"},"suggestUnknown",{"range":"617","text":"618"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"617","text":"619"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"620","text":"618"},{"range":"620","text":"619"},{"range":"621","text":"618"},{"range":"621","text":"619"},[638,641],"unknown","never",[638,641],[638,641]]
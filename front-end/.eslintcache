<<<<<<< Updated upstream
[{"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\index.tsx":"1","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\reportWebVitals.ts":"2","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\App.tsx":"3","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\HomePage.tsx":"4","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx":"5","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\LogInPage.tsx":"6","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx":"7","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx":"8","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx":"9","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx":"10","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx":"11","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx":"12","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageCoursePage.tsx":"13","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx":"14","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx":"15","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx":"16","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx":"17","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx":"18","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx":"19","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\RegisterForm.tsx":"20","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RegisterFormAPI.tsx":"21","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\User.tsx":"22","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx":"23","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx":"24","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseTypeAPI.tsx":"25","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseAPI.tsx":"26","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseLevelAPI.tsx":"27","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\Course.tsx":"28","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx":"29","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx":"30","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\CourseLevel.tsx":"31","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\CourseType.tsx":"32"},{"size":641,"mtime":1614439037000,"results":"33","hashOfConfig":"34"},{"size":446,"mtime":1615400528577,"results":"35","hashOfConfig":"34"},{"size":6674,"mtime":1615487029091,"results":"36","hashOfConfig":"34"},{"size":3794,"mtime":1615400528518,"results":"37","hashOfConfig":"34"},{"size":11967,"mtime":1615487029107,"results":"38","hashOfConfig":"34"},{"size":8849,"mtime":1615487029108,"results":"39","hashOfConfig":"34"},{"size":2565,"mtime":1615400528551,"results":"40","hashOfConfig":"34"},{"size":16309,"mtime":1615487029115,"results":"41","hashOfConfig":"34"},{"size":543,"mtime":1615400528512,"results":"42","hashOfConfig":"34"},{"size":5042,"mtime":1615487029116,"results":"43","hashOfConfig":"34"},{"size":20741,"mtime":1615487029118,"results":"44","hashOfConfig":"34"},{"size":13901,"mtime":1615487029119,"results":"45","hashOfConfig":"34"},{"size":46942,"mtime":1615487029122,"results":"46","hashOfConfig":"34"},{"size":1414,"mtime":1615400528498,"results":"47","hashOfConfig":"34"},{"size":3949,"mtime":1615487029093,"results":"48","hashOfConfig":"34"},{"size":5163,"mtime":1615400528500,"results":"49","hashOfConfig":"34"},{"size":3786,"mtime":1615400528499,"results":"50","hashOfConfig":"34"},{"size":1278,"mtime":1615487029096,"results":"51","hashOfConfig":"34"},{"size":6371,"mtime":1615487029099,"results":"52","hashOfConfig":"34"},{"size":1028,"mtime":1615487029103,"results":"53","hashOfConfig":"34"},{"size":4663,"mtime":1615487029097,"results":"54","hashOfConfig":"34"},{"size":2054,"mtime":1615487029104,"results":"55","hashOfConfig":"34"},{"size":9240,"mtime":1615487029099,"results":"56","hashOfConfig":"34"},{"size":1853,"mtime":1615487029098,"results":"57","hashOfConfig":"34"},{"size":1937,"mtime":1615487029095,"results":"58","hashOfConfig":"34"},{"size":4379,"mtime":1615487029094,"results":"59","hashOfConfig":"34"},{"size":2035,"mtime":1615487029094,"results":"60","hashOfConfig":"34"},{"size":1403,"mtime":1615487029100,"results":"61","hashOfConfig":"34"},{"size":553,"mtime":1615400528501,"results":"62","hashOfConfig":"34"},{"size":1882,"mtime":1615487029096,"results":"63","hashOfConfig":"34"},{"size":381,"mtime":1615487029101,"results":"64","hashOfConfig":"34"},{"size":211,"mtime":1615487029101,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ii22s2",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\index.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\reportWebVitals.ts",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\App.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\HomePage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx",["130","131","132"],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\LogInPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx",["133","134","135","136","137","138","139","140","141","142","143","144","145","146","147"],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx",["148","149"],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\DisableOrDeleteAccountPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageCoursePage.tsx",["150","151","152"],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\RegisterForm.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RegisterFormAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\User.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseTypeAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\CourseLevelAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\Course.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\CourseLevel.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\CourseType.tsx",[],{"ruleId":"153","severity":1,"message":"154","line":17,"column":16,"nodeType":"155","messageId":"156","endLine":17,"endColumn":19,"suggestions":"157"},{"ruleId":"158","severity":1,"message":"159","line":18,"column":10,"nodeType":"160","messageId":"161","endLine":18,"endColumn":17},{"ruleId":"158","severity":1,"message":"162","line":18,"column":19,"nodeType":"160","messageId":"161","endLine":18,"endColumn":29},{"ruleId":"158","severity":1,"message":"163","line":3,"column":5,"nodeType":"160","messageId":"161","endLine":3,"endColumn":16},{"ruleId":"158","severity":1,"message":"164","line":4,"column":7,"nodeType":"160","messageId":"161","endLine":4,"endColumn":15},{"ruleId":"158","severity":1,"message":"165","line":4,"column":17,"nodeType":"160","messageId":"161","endLine":4,"endColumn":26},{"ruleId":"158","severity":1,"message":"166","line":6,"column":7,"nodeType":"160","messageId":"161","endLine":6,"endColumn":21},{"ruleId":"158","severity":1,"message":"167","line":6,"column":23,"nodeType":"160","messageId":"161","endLine":6,"endColumn":31},{"ruleId":"158","severity":1,"message":"168","line":9,"column":5,"nodeType":"160","messageId":"161","endLine":9,"endColumn":11},{"ruleId":"158","severity":1,"message":"169","line":9,"column":30,"nodeType":"160","messageId":"161","endLine":9,"endColumn":34},{"ruleId":"158","severity":1,"message":"170","line":12,"column":10,"nodeType":"160","messageId":"161","endLine":12,"endColumn":19},{"ruleId":"158","severity":1,"message":"171","line":14,"column":10,"nodeType":"160","messageId":"161","endLine":14,"endColumn":17},{"ruleId":"158","severity":1,"message":"172","line":15,"column":10,"nodeType":"160","messageId":"161","endLine":15,"endColumn":22},{"ruleId":"158","severity":1,"message":"173","line":16,"column":10,"nodeType":"160","messageId":"161","endLine":16,"endColumn":18},{"ruleId":"158","severity":1,"message":"174","line":16,"column":20,"nodeType":"160","messageId":"161","endLine":16,"endColumn":27},{"ruleId":"158","severity":1,"message":"175","line":17,"column":10,"nodeType":"160","messageId":"161","endLine":17,"endColumn":20},{"ruleId":"158","severity":1,"message":"176","line":17,"column":22,"nodeType":"160","messageId":"161","endLine":17,"endColumn":33},{"ruleId":"158","severity":1,"message":"177","line":18,"column":10,"nodeType":"160","messageId":"161","endLine":18,"endColumn":23},{"ruleId":"158","severity":1,"message":"178","line":125,"column":22,"nodeType":"160","messageId":"161","endLine":125,"endColumn":35},{"ruleId":"158","severity":1,"message":"179","line":126,"column":20,"nodeType":"160","messageId":"161","endLine":126,"endColumn":31},{"ruleId":"158","severity":1,"message":"171","line":27,"column":10,"nodeType":"160","messageId":"161","endLine":27,"endColumn":17},{"ruleId":"158","severity":1,"message":"180","line":31,"column":10,"nodeType":"160","messageId":"161","endLine":31,"endColumn":14},{"ruleId":"158","severity":1,"message":"181","line":168,"column":10,"nodeType":"160","messageId":"161","endLine":168,"endColumn":24},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["182","183"],"@typescript-eslint/no-unused-vars","'student' is assigned a value but never used.","Identifier","unusedVar","'setStudent' is assigned a value but never used.","'ChangeEvent' is defined but never used.","'Dispatch' is defined but never used.","'FormEvent' is defined but never used.","'SetStateAction' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'TypeGuard' is defined but never used.","'UserAPI' is defined but never used.","'LoggedInUser' is defined but never used.","'Location' is defined but never used.","'History' is defined but never used.","'useHistory' is defined but never used.","'useLocation' is defined but never used.","'LocationState' is defined but never used.","'setPageNumber' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","'User' is defined but never used.","'totalPageCount' is assigned a value but never used.",{"messageId":"184","fix":"185","desc":"186"},{"messageId":"187","fix":"188","desc":"189"},"suggestUnknown",{"range":"190","text":"191"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"190","text":"192"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[638,641],"unknown","never"]
=======
[{"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\index.tsx":"1","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\App.tsx":"2","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\reportWebVitals.ts":"3","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx":"4","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\HomePage.tsx":"5","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx":"6","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\LogInPage.tsx":"7","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx":"8","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx":"9","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageStudentPage.tsx":"10","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx":"11","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx":"12","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx":"13","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx":"14","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx":"15","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx":"16","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx":"17","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\User.tsx":"18","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\NewUserAPI.tsx":"19","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx":"20","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx":"21","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx":"22","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx":"23","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx":"24","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\NewUser.tsx":"25","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx":"26","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\EditLessonPage.tsx":"27","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\ManageLessonPage.tsx":"28"},{"size":641,"mtime":1614439037000,"results":"29","hashOfConfig":"30"},{"size":6167,"mtime":1615479121303,"results":"31","hashOfConfig":"30"},{"size":446,"mtime":1615400528577,"results":"32","hashOfConfig":"30"},{"size":543,"mtime":1615400528512,"results":"33","hashOfConfig":"30"},{"size":3794,"mtime":1615400528518,"results":"34","hashOfConfig":"30"},{"size":12981,"mtime":1615478397087,"results":"35","hashOfConfig":"30"},{"size":8454,"mtime":1615479121309,"results":"36","hashOfConfig":"30"},{"size":2565,"mtime":1615400528551,"results":"37","hashOfConfig":"30"},{"size":3296,"mtime":1615479121311,"results":"38","hashOfConfig":"30"},{"size":13272,"mtime":1615478397106,"results":"39","hashOfConfig":"30"},{"size":17160,"mtime":1615479121311,"results":"40","hashOfConfig":"30"},{"size":1414,"mtime":1615400528498,"results":"41","hashOfConfig":"30"},{"size":2383,"mtime":1615479121303,"results":"42","hashOfConfig":"30"},{"size":1269,"mtime":1615479121305,"results":"43","hashOfConfig":"30"},{"size":5163,"mtime":1615400528500,"results":"44","hashOfConfig":"30"},{"size":3786,"mtime":1615400528499,"results":"45","hashOfConfig":"30"},{"size":2276,"mtime":1615479121307,"results":"46","hashOfConfig":"30"},{"size":1948,"mtime":1615479121309,"results":"47","hashOfConfig":"30"},{"size":4536,"mtime":1615479121306,"results":"48","hashOfConfig":"30"},{"size":5845,"mtime":1615479121308,"results":"49","hashOfConfig":"30"},{"size":1589,"mtime":1615479121306,"results":"50","hashOfConfig":"30"},{"size":553,"mtime":1615400528501,"results":"51","hashOfConfig":"30"},{"size":1944,"mtime":1615479121304,"results":"52","hashOfConfig":"30"},{"size":12781,"mtime":1615479121310,"results":"53","hashOfConfig":"30"},{"size":1073,"mtime":1615478397085,"results":"54","hashOfConfig":"30"},{"size":5293,"mtime":1615478397104,"results":"55","hashOfConfig":"30"},{"size":1411,"mtime":1615479449137,"results":"56","hashOfConfig":"30"},{"size":4819,"mtime":1615479542185,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"17ytrng",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"60"},"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\index.tsx",[],["121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137"],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\App.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\reportWebVitals.ts",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\LoggedInUser.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\HomePage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\EditStudentInfo.tsx",["138","139","140"],"import React, {\r\n    ChangeEvent, FormEvent, ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, Row\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { useParams } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\n\r\nexport function EditStudentInfo (): ReactElement {\r\n    let [user, setUser] = useState<User>(new User());\r\n    let updatedUser: User | undefined;\r\n    let inputField:\r\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | undefined;\r\n    let userAPI: UserAPI | undefined;\r\n    let param: any = useParams();\r\n    let [student, setStudent] = useState<User>(new User());\r\n    \r\n    useEffect (() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.displayStudent(param.studentID).then(\r\n            (res) => {\r\n                setUser(res.data);\r\n                // console.log(student.userName);\r\n            }\r\n    );\r\n    }, []);\r\n\r\n    \r\n    function handleUserChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ){\r\n        updatedUser = new User(user);\r\n        inputField = event.target;\r\n        updatedUser[\r\n            inputField.name as keyof UserIndexSignature\r\n        ] = inputField.value;\r\n        setUser(updatedUser);\r\n    }\r\n\r\n    function updateStudent (event: FormEvent<HTMLFormElement>, userID: number) {\r\n        event.preventDefault();\r\n        userAPI = new UserAPI();\r\n        userAPI.update(user, userID);\r\n        console.log(userID);\r\n    }\r\n \r\n    console.log(param.studentID);\r\n    // console.log(student.userName);\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <h1>{param.studentID}</h1>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form\r\n                                noValidate={false}\r\n                                onSubmit={(event) => {\r\n                                    updateStudent(event, param.studentID);\r\n                                }}\r\n                            >\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        User Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"userName\"\r\n                                        id=\"userName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        First Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"firstName\"\r\n                                        id=\"firstName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        value={user.firstName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Middle Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"middleName\"\r\n                                        id=\"middleName\"\r\n                                        pattern=\"^[a-z0-9_-]{3,15}$\"\r\n                                        value={user.middleName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Last Name:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"lastName\"\r\n                                        id=\"lastName\"\r\n                                        pattern=\"^[a-z0-9_-]{1,15}$\"\r\n                                        value={user.lastName}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Email:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"email\"\r\n                                        id=\"email\"\r\n                                        value={user.email}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        DOB:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"dob\"\r\n                                        id=\"dob\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Phone:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"phoneNumber\"\r\n                                        id=\"phoneNumber\"\r\n                                        value={user.phoneNumber}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Gender\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"gender\"\r\n                                        id=\"gender\"\r\n                                        value={user.gender}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Job:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={false}\r\n                                        name=\"job\"\r\n                                        id=\"job\"\r\n                                        value={user.job}\r\n                                        required={true}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Password:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        autoComplete=\"off\"\r\n                                        autoFocus={false}\r\n                                        name=\"password\"\r\n                                        id=\"password\"\r\n                                        placeholder=\"Your new password\"\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Label>\r\n                                        Account Status\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        autoComplete=\"on\"\r\n                                        autoFocus={true}\r\n                                        name=\"accountStatus\"\r\n                                        id=\"accountStatus\"\r\n                                        value={user.accountStatus}\r\n                                        required={false}\r\n                                        spellCheck={false}\r\n                                        // value = {user.userName}\r\n                                        onChange={handleUserChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button\r\n                                    variant=\"success\"\r\n                                    type=\"submit\"\r\n                                    block = {true}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\LogInPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SelectRolePage.tsx",["141","142","143","144","145","146","147","148","149","150","151","152","153","154","155"],"// Import package members section:\r\nimport React, { \r\n    ChangeEvent\r\n    , Dispatch, FormEvent\r\n    , ReactElement\r\n    , SetStateAction, useState \r\n} from 'react';\r\nimport { \r\n    Button, Card, Container, Form, ListGroup, Row \r\n} from 'react-bootstrap';\r\nimport './SelectRolePage.css';\r\nimport { TypeGuard } from '../common/service/TypeGuard';\r\nimport { DialogControl } from '../common/component/ModalDialog';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { LoggedInUser } from '../model/LoggedInUser';\r\nimport { Location, History } from \"../../node_modules/@types/history\";\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { LocationState } from '../common/component/ProtectedRoute';\r\n\r\ninterface SelectRolePageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function SelectRolePage (props: SelectRolePageProps): ReactElement {\r\n\r\n    // Variables declaration:\r\n    \r\n    return (\r\n        <Container \r\n            fluid = {true} \r\n            id = \"SelectRolePageContentContainer\" \r\n            className = \"vh-100\"\r\n        >   \r\n            {props.modalDialog}\r\n            <header>\r\n            </header>\r\n            <nav>\r\n            </nav>\r\n            <main className = \"h-100\">\r\n                <Container \r\n                    fluid = {true} \r\n                    className = \"h-100\"\r\n                >\r\n                    <Row className = {\r\n                        `h-100 \r\n                        justify-content-center \r\n                        align-items-center`\r\n                    }>\r\n                        <Card id = \"SelectRoleCard\">\r\n                            <Card.Header className = \"text-center\">\r\n                                Choose a role\r\n                            </Card.Header>\r\n                            <ListGroup variant = \"flush\">\r\n                                <ListGroup.Item>\r\n                                    Cras justo odio\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    Dapibus ac facilisis in\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    Vestibulum at eros\r\n                                </ListGroup.Item>\r\n                            </ListGroup>\r\n                        </Card>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\AdminConsolePage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\ManageStudentPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\admin\\CreateAccountPage.tsx",["156","157"],"// Import package members section:\r\nimport React, { \r\n    ChangeEvent\r\n    , MouseEvent\r\n    , ReactElement\r\n    , useEffect\r\n    , useState \r\n} from \"react\";\r\nimport { Button, Col, Container, Form, Row, Table } from \"react-bootstrap\";\r\nimport { DialogControl } from \"../../common/component/ModalDialog\";\r\nimport { NewUserAPI } from \"../../common/service/NewUserAPI\";\r\nimport { RoleAPI } from \"../../common/service/RoleAPI\";\r\nimport { TypeGuard } from \"../../common/service/TypeGuard\";\r\nimport { NewUser } from \"../../model/NewUser\";\r\nimport { Role } from \"../../model/Role\";\r\n\r\nfunction renderRoleDropdownList (role: Role): ReactElement {\r\n    return (\r\n        <option key = {role.roleID}>\r\n            {role.roleName}\r\n        </option>\r\n    );\r\n}\r\n\r\nfunction renderRoleListSection (role: Role): ReactElement {\r\n    return (\r\n        <span key = {role.roleID}>\r\n            {role.roleName},&nbsp;\r\n        </span>\r\n    );\r\n}\r\n\r\nfunction renderNewUserTable (\r\n        newUser: NewUser\r\n        , index: number\r\n        , handleAcceptRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void> \r\n        , handleRejectRequest: (\r\n                event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n        ) => Promise<void> \r\n): ReactElement {\r\n    return (\r\n        <tr key = {newUser.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {`${newUser.firstName} ${newUser.lastName}`}\r\n            </td>\r\n            <td>\r\n                {newUser.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {newUser.email}\r\n            </td>\r\n            <td>\r\n                {newUser.userName}\r\n            </td>\r\n            <td>\r\n                <Button \r\n                    variant = \"success\"\r\n                    type = \"button\"\r\n                    value = {newUser.userID}\r\n                    onClick = {handleAcceptRequest}\r\n                >\r\n                    Accept\r\n                </Button>\r\n                <Button \r\n                    variant = \"danger\"\r\n                    type = \"button\"\r\n                    value = {newUser.userID}\r\n                    onClick = {handleRejectRequest}\r\n                >\r\n                    Reject\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\ninterface CreateAccountPageProps {\r\n    dialogController: DialogControl;\r\n    modalDialog: ReactElement;\r\n}\r\n\r\nexport function CreateAccountPage (\r\n    props: CreateAccountPageProps\r\n): ReactElement {\r\n\r\n    // Variables declaration:\r\n    let [newUserHolder, setNewUserHolder] = useState<NewUser[]> ([]);\r\n    let newUserAPI: NewUserAPI;\r\n    let typeGuardian: TypeGuard;\r\n    let [pageNumber, setPageNumber] = useState<number> (0);\r\n    let [pageSize, setPageSize] = useState<number> (10);\r\n    let [roleHolder, setRoleHolder] = useState<Role[]> ([]);\r\n    let roleAPI: RoleAPI;\r\n    let [selectedRoleName, setSelectedRoleName] = useState<string> (\"\");\r\n    let [newAccountRoleList, setNewAccountRoleList] = useState<Role[]> ([]);\r\n    let i: number | undefined; \r\n    let role: Role | undefined;\r\n    let selectedRoleArray: Role[] | undefined;\r\n    let selectedRole: Role | undefined;\r\n    let updatedNewAccountRoleList: Role[] | undefined;\r\n    let updatedRoleHolder: Role[] | undefined;\r\n    let defaultRoleSelection: Role | undefined;\r\n    let button: HTMLButtonElement | undefined; \r\n    let userID: number | undefined;\r\n\r\n    newUserAPI = new NewUserAPI ();\r\n    typeGuardian = new TypeGuard ();\r\n    roleAPI = new RoleAPI ();\r\n    \r\n    async function handleAcceptRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        if (newAccountRoleList.length > 0){\r\n            button = event.target as HTMLButtonElement;\r\n            userID = Number (button.value);\r\n            try {\r\n                await newUserAPI.acceptCreateAccountRequest (\r\n                        userID\r\n                        , newAccountRoleList\r\n                );\r\n                loadNewUserTable ();\r\n            }\r\n            catch (apiError: unknown){\r\n                if (typeGuardian.isAxiosError (apiError)){\r\n                    if (typeof apiError.code === \"string\"){\r\n                        props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                        );\r\n                    }\r\n                    else {\r\n                        props.dialogController.setDialogTitle (apiError.name);\r\n                    }\r\n                    props.dialogController.setDialogBody (apiError.message);\r\n                    props.dialogController.setDialogType (\"error\");\r\n                    props.dialogController.setShowDialog (true);\r\n                }\r\n                else {\r\n                    throw new Error (\"This api error is not valid !\");\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            props.dialogController.setDialogTitle (\"Error !\");\r\n            props.dialogController.setDialogBody (\r\n                    \"Please add at least one role.\"\r\n            );\r\n            props.dialogController.setDialogType (\"error\");\r\n            props.dialogController.setShowDialog (true);\r\n        }\r\n    }\r\n\r\n    async function handleRejectRequest (\r\n            event: MouseEvent<HTMLElement, globalThis.MouseEvent>\r\n    ): Promise<void> {\r\n        button = event.target as HTMLButtonElement;\r\n        userID = Number (button.value);\r\n        try {\r\n            await newUserAPI.rejectCreateAccountRequest (\r\n                    userID\r\n            );\r\n            loadNewUserTable ();\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                        `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleAddRole (){\r\n        for (i = 0; i < roleHolder.length; i++){\r\n            role = roleHolder[i];\r\n            if (role.roleName === selectedRoleName){\r\n                updatedRoleHolder = roleHolder.slice ();\r\n                selectedRoleArray = updatedRoleHolder.splice (i, 1);\r\n                setRoleHolder (updatedRoleHolder);\r\n                if (updatedRoleHolder.length > 0){\r\n                    defaultRoleSelection = updatedRoleHolder[0];\r\n                    setSelectedRoleName (defaultRoleSelection.roleName);\r\n                }\r\n                selectedRole = selectedRoleArray[0];\r\n                updatedNewAccountRoleList = newAccountRoleList.slice ();\r\n                updatedNewAccountRoleList.push (selectedRole);\r\n                setNewAccountRoleList (updatedNewAccountRoleList);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleReset (){\r\n        loadRoleDropdownList ();\r\n        updatedNewAccountRoleList = new Array<Role> ();\r\n        setNewAccountRoleList (updatedNewAccountRoleList);\r\n    }\r\n\r\n    function handleSelectedRoleChange (\r\n        event: ChangeEvent<\r\n            HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\r\n        >\r\n    ): void {\r\n        setSelectedRoleName (event.target.value);\r\n    }\r\n\r\n    async function loadRoleDropdownList (): Promise<void> {\r\n        try {\r\n            updatedRoleHolder = await roleAPI.getAllRole (); \r\n            setRoleHolder (updatedRoleHolder);\r\n            defaultRoleSelection = updatedRoleHolder[0];\r\n            setSelectedRoleName (defaultRoleSelection.roleName);\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    async function loadNewUserTable (): Promise<void> {\r\n        try {\r\n            setNewUserHolder (await newUserAPI.getAllCreateAccountRequest (\r\n                pageNumber\r\n                , pageSize\r\n            ));\r\n        }\r\n        catch (apiError: unknown){\r\n            if (typeGuardian.isAxiosError (apiError)){\r\n                if (typeof apiError.code === \"string\"){\r\n                    props.dialogController.setDialogTitle (\r\n                            `${apiError.code}: ${apiError.name}`\r\n                    );\r\n                }\r\n                else {\r\n                    props.dialogController.setDialogTitle (apiError.name);\r\n                }\r\n                props.dialogController.setDialogBody (apiError.message);\r\n                props.dialogController.setDialogType (\"error\");\r\n                props.dialogController.setShowDialog (true);\r\n            }\r\n            else {\r\n                throw new Error (\"This api error is not valid !\");\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect (\r\n        function fetchTableData (): void {\r\n            loadRoleDropdownList ();\r\n            loadNewUserTable ();\r\n        }\r\n        , []\r\n    );\r\n\r\n    return (\r\n        <Container fluid = {true}>\r\n            {props.modalDialog}\r\n            <main>\r\n                <Container>\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                            <h1>\r\n                                Create Account Requests\r\n                            </h1>\r\n                            <hr/>\r\n                            <Form>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\"~\"} Add role \r\n                                                for the new account:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        <Col xs = \"auto\" className = \"mr-2\">\r\n                                            <Form.Control \r\n                                                as = \"select\" \r\n                                                value = {selectedRoleName}\r\n                                                onChange = {\r\n                                                    (event) => {\r\n// eslint-disable-next-line max-len\r\n                                                        handleSelectedRoleChange (\r\n                                                            event\r\n                                                        );\r\n                                                    } \r\n                                                }\r\n                                            >\r\n                                                {roleHolder.map (\r\n                                                    (\r\n                                                            role\r\n// eslint-disable-next-line max-len\r\n                                                    ) => renderRoleDropdownList (\r\n                                                            role\r\n                                                    )  \r\n                                                )}\r\n                                            </Form.Control>\r\n                                        </Col>\r\n                                        <Button \r\n                                            variant = \"success\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleAddRole ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Add role\r\n                                        </Button>\r\n                                        <Button \r\n                                            variant = \"primary\"\r\n                                            type = \"button\"\r\n                                            className = \"mr-2\"\r\n                                            onClick = {\r\n                                                () => {\r\n                                                    handleReset ();\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            Reset\r\n                                        </Button>\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Row \r\n                                        className = \"justify-content-md-center\"\r\n                                    >\r\n                                        <Form.Label className = \"mr-2\">\r\n                                            <h4>\r\n                                                {\">\"} The accepted account \r\n                                                will have roles:\r\n                                            </h4>\r\n                                        </Form.Label>\r\n                                        {newAccountRoleList.map (\r\n                                            (\r\n                                                    role\r\n                                            ) => renderRoleListSection (\r\n                                                    role\r\n                                            )\r\n                                        )}\r\n                                    </Form.Row>\r\n                                </Form.Group>\r\n                                <Table responsive = \"md\" hover = {true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                Full Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Phone Number\r\n                                            </th>\r\n                                            <th>\r\n                                                Email\r\n                                            </th>\r\n                                            <th>\r\n                                                User Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Actions\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {newUserHolder.map (\r\n                                            (\r\n                                                    newUser\r\n                                                    , index\r\n                                            ) => renderNewUserTable (\r\n                                                    newUser\r\n                                                    , index\r\n                                                    , handleAcceptRequest\r\n                                                    , handleRejectRequest\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\AdminPageHeader.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ModalDialog.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\LogOutAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\ProtectedRoute.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\component\\PageHeader.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\TypeGuard.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\User.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\NewUserAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\UserAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\RoleAPI.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\AxiosInstanceGet.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\common\\service\\ErrorHandle.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\SignUpPage.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\model\\NewUser.tsx",[],"D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\ViewProfilePage.tsx",["158","159","160","161","162","163","164","165","166"],"/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, {\r\n    ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, FormControl, Nav, Navbar, Row, Table\r\n} from 'react-bootstrap';\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { Link, useParams, useRouteMatch } from 'react-router-dom';\r\nimport { User, UserIndexSignature } from '../model/User';\r\nimport './ViewProfilePage.css';\r\nfunction renderUserTable (\r\n    user: User\r\n    , index: number\r\n): ReactElement {\r\n    return (\r\n        <tr key={user.userID}>\r\n            <td>\r\n                {index + 1}\r\n            </td>\r\n            <td>\r\n                {user.firstName}\r\n            </td>\r\n            <td>\r\n                {user.lastName}\r\n            </td>\r\n            <td>\r\n                {user.phoneNumber}\r\n            </td>\r\n            <td>\r\n                {user.dob}\r\n            </td>\r\n            <td>\r\n                {user.email}\r\n            </td>\r\n            <td>\r\n                {user.gender}\r\n            </td>\r\n            <td>\r\n                {user.job}\r\n            </td>\r\n            <td>\r\n                {user.selfDescription}\r\n            </td>\r\n            <td>\r\n                {user.accountStatus}\r\n            </td>\r\n            <td>\r\n                {user.dateCreated}\r\n            </td>\r\n            <td>\r\n                {user.lastLogin}\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\nexport function ViewProfilePage (): ReactElement {\r\n\r\n    let userAPI: UserAPI | undefined;\r\n    let param: any = useParams();\r\n    let studentID: number;\r\n    let [student, setStudent] = useState<User[]>([]);\r\n\r\n    useEffect(() => {\r\n        userAPI = new UserAPI();\r\n        userAPI.displayStudent(param.studentID).then(\r\n            (res) => {\r\n\r\n                setStudent(res.data);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    console.log(param.studentID);\r\n\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <Row className = \"bg-white\">\r\n                        <Col>\r\n                        <Table responsive=\"md\" hover={true}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>\r\n                                                #\r\n                                            </th>\r\n                                            <th>\r\n                                                First Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Last Name\r\n                                            </th>\r\n                                            <th>\r\n                                                Phone Number\r\n                                            </th>\r\n                                            <th>\r\n                                                Date of birth\r\n                                            </th>\r\n                                            <th>\r\n                                                Email\r\n                                            </th>\r\n                                            <th>\r\n                                                Gender\r\n                                            </th>\r\n                                            <th>\r\n                                                Job\r\n                                            </th>\r\n                                            <th>\r\n                                                Description\r\n                                            </th>\r\n                                            <th>\r\n                                                Status\r\n                                            </th>\r\n                                            <th>\r\n                                                Date Created\r\n                                            </th>\r\n                                            <th>\r\n                                                Last Login\r\n                                            </th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {student.map(\r\n                                            (\r\n                                                user\r\n                                                , index\r\n                                            ) => renderUserTable(\r\n                                                user\r\n                                                , index\r\n                                            )\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\EditLessonPage.tsx",["167","168","169","170","171","172","173","174","175","176","177","178"],"import React, {\r\n    ChangeEvent, FormEvent, ReactElement, useEffect, useState\r\n} from 'react';\r\nimport {\r\n    Button, Col, Container, Form, Row\r\n} from 'react-bootstrap';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport ModalTitle from 'react-bootstrap/ModalTitle';\r\n\r\nimport { UserAPI } from '../common/service/UserAPI';\r\nimport { User, UserIndexSignature } from '../model/User';\r\n\r\nexport function EditLessonPage () : ReactElement {\r\n    // let [lesson, setLesson] = useState<Lesson>(new Lesson());\r\n    // let updatedUser: Lesson | undefined;\r\n    // let inputField:\r\n    //     HTMLInputElement | HTMLSelectElement |\r\n    //      HTMLTextAreaElement | undefined;\r\n    // let userAPI: UserAPI | undefined;\r\n    let param: any = useParams();\r\n\r\n    return (\r\n        <Container fluid={true} id=\"PageContentContainer\">\r\n            <Container fluid={true} id=\"PageHeaderContainer\">\r\n                <header>\r\n                </header>\r\n                <nav>\r\n                </nav>\r\n            </Container>\r\n            <main>\r\n                <Container id=\"PageBodyContainer\">\r\n                    <h1>{param.studentID}</h1>\r\n                    <Row>\r\n                        <Col>\r\n                            \r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </Container>\r\n    );\r\n}\r\n","D:\\Capstone\\Source code\\Language Center System\\language-center-system\\front-end\\src\\page\\ManageLessonPage.tsx",["179","180"],"import React, { ReactElement, useState, useEffect } from 'react';\r\n// import { Lesson } from '../model/Lesson';\r\nimport './ManageLessonPage.css';\r\n\r\nexport function ManageLessonPage () : ReactElement {\r\n    // let [lesson, setLesson] = useState<Lesson[]>([]);\r\n    let [lesson, setLesson] = useState(\r\n        [\r\n            {\r\n                lessonID: 1,\r\n                lessonName: \"Unit1\",\r\n                lessonType: \"Voca\",\r\n                duration: 1\r\n            },\r\n            {\r\n                lessonID: 2,\r\n                lessonName: \"Unit2\",\r\n                lessonType: \"Grammar\",\r\n                duration: 2\r\n            },\r\n            {\r\n                lessonID: 3,\r\n                lessonName: \"Unit3\",\r\n                lessonType: \"Speaking\",\r\n                duration: 2\r\n            },\r\n            {\r\n                lessonID: 4,\r\n                lessonName: \"Unit4\",\r\n                lessonType: \"Writing\",\r\n                duration: 3\r\n            }\r\n        ]\r\n    );\r\n    // let userAPI: LessonAPI = new LessonAPI();\r\n    useEffect(() => {\r\n        // userAPI.listLessons().then(\r\n        //     (res) => {\r\n        //         console.log(res);\r\n        //         setUser(res.data as Lesson[]);\r\n        //     }\r\n        // );\r\n    }, []);\r\n\r\n    function handleDeleteLesson (\r\n        event: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n    ) : void {\r\n        button = event.target as HTMLButtonElement;\r\n    }\r\n\r\n    // function openConfirmDeleteDialog (\r\n    //     event: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n    // ) : void {\r\n    //     setLessonID(Number(button.value));\r\n    //     setPendingAction(\"Delete user\");\r\n    //     props.di\r\n    // }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div>\r\n                <h1>Bài học của khóa học A</h1>\r\n                <hr />\r\n            </div>\r\n            <div className=\"text-center\">\r\n                <table className=\"table table-bordered table-hover\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Lesson Name</th>\r\n                            <th>Lesson Type</th>\r\n                            <th>Duration &nbsp; (minutes)</th>\r\n                            <th>Actions</th>\r\n                        </tr>    \r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            lesson.map((item, index) => <tr key={index}>\r\n                                <td>{item[\"lessonID\"]}</td>\r\n                                <td>{item[\"lessonName\"]}</td>\r\n                                <td>{item[\"lessonType\"]}</td>\r\n                                <td>{item[\"duration\"]}</td>\r\n                                <td id=\"action\">\r\n                                    <button type=\"button\"\r\n                                            className=\"btn btn-info act-btn\">\r\n                                                <span className=\r\n                                                    \"fa fa-eye mr-5\">\r\n                                                </span>\r\n                                                Xem\r\n                                            </button>\r\n                                    <button type=\"button\"\r\n                                            className=\"btn btn-warning act-btn\">\r\n                                                <span className=\r\n                                                    \"fa fa-pencil mr-5\">\r\n                                                </span>\r\n                                                Sửa\r\n                                            </button>\r\n                                    <button type=\"button\"\r\n                                            className=\"btn btn-danger \r\n                                            act-btn\"\r\n                                            // onClick= {\r\n                                            //     (event) => {\r\n                                            //         handle\r\n                                            // DeleteLesson(event);\r\n                                            //     }\r\n                                            // }\r\n                                            >\r\n                                                <span className=\r\n                                                    \"fa fa-trash mr-5\">\r\n                                                </span>\r\n                                                Xóa    \r\n                                            </button>\r\n                                </td>\r\n                            </tr>\r\n                            )\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n",{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","severity":1,"message":"216","line":17,"column":16,"nodeType":"217","messageId":"218","endLine":17,"endColumn":19,"suggestions":"219"},{"ruleId":"220","severity":1,"message":"221","line":18,"column":10,"nodeType":"222","messageId":"223","endLine":18,"endColumn":17},{"ruleId":"220","severity":1,"message":"224","line":18,"column":19,"nodeType":"222","messageId":"223","endLine":18,"endColumn":29},{"ruleId":"220","severity":1,"message":"225","line":3,"column":5,"nodeType":"222","messageId":"223","endLine":3,"endColumn":16},{"ruleId":"220","severity":1,"message":"226","line":4,"column":7,"nodeType":"222","messageId":"223","endLine":4,"endColumn":15},{"ruleId":"220","severity":1,"message":"227","line":4,"column":17,"nodeType":"222","messageId":"223","endLine":4,"endColumn":26},{"ruleId":"220","severity":1,"message":"228","line":6,"column":7,"nodeType":"222","messageId":"223","endLine":6,"endColumn":21},{"ruleId":"220","severity":1,"message":"229","line":6,"column":23,"nodeType":"222","messageId":"223","endLine":6,"endColumn":31},{"ruleId":"220","severity":1,"message":"230","line":9,"column":5,"nodeType":"222","messageId":"223","endLine":9,"endColumn":11},{"ruleId":"220","severity":1,"message":"231","line":9,"column":30,"nodeType":"222","messageId":"223","endLine":9,"endColumn":34},{"ruleId":"220","severity":1,"message":"232","line":12,"column":10,"nodeType":"222","messageId":"223","endLine":12,"endColumn":19},{"ruleId":"220","severity":1,"message":"233","line":14,"column":10,"nodeType":"222","messageId":"223","endLine":14,"endColumn":17},{"ruleId":"220","severity":1,"message":"234","line":15,"column":10,"nodeType":"222","messageId":"223","endLine":15,"endColumn":22},{"ruleId":"220","severity":1,"message":"235","line":16,"column":10,"nodeType":"222","messageId":"223","endLine":16,"endColumn":18},{"ruleId":"220","severity":1,"message":"236","line":16,"column":20,"nodeType":"222","messageId":"223","endLine":16,"endColumn":27},{"ruleId":"220","severity":1,"message":"237","line":17,"column":10,"nodeType":"222","messageId":"223","endLine":17,"endColumn":20},{"ruleId":"220","severity":1,"message":"238","line":17,"column":22,"nodeType":"222","messageId":"223","endLine":17,"endColumn":33},{"ruleId":"220","severity":1,"message":"239","line":18,"column":10,"nodeType":"222","messageId":"223","endLine":18,"endColumn":23},{"ruleId":"220","severity":1,"message":"240","line":95,"column":22,"nodeType":"222","messageId":"223","endLine":95,"endColumn":35},{"ruleId":"220","severity":1,"message":"241","line":96,"column":20,"nodeType":"222","messageId":"223","endLine":96,"endColumn":31},{"ruleId":"220","severity":1,"message":"230","line":6,"column":5,"nodeType":"222","messageId":"223","endLine":6,"endColumn":11},{"ruleId":"220","severity":1,"message":"231","line":6,"column":29,"nodeType":"222","messageId":"223","endLine":6,"endColumn":33},{"ruleId":"220","severity":1,"message":"242","line":6,"column":35,"nodeType":"222","messageId":"223","endLine":6,"endColumn":46},{"ruleId":"220","severity":1,"message":"243","line":6,"column":48,"nodeType":"222","messageId":"223","endLine":6,"endColumn":51},{"ruleId":"220","severity":1,"message":"244","line":6,"column":53,"nodeType":"222","messageId":"223","endLine":6,"endColumn":59},{"ruleId":"220","severity":1,"message":"245","line":9,"column":10,"nodeType":"222","messageId":"223","endLine":9,"endColumn":14},{"ruleId":"220","severity":1,"message":"246","line":9,"column":27,"nodeType":"222","messageId":"223","endLine":9,"endColumn":40},{"ruleId":"220","severity":1,"message":"247","line":10,"column":16,"nodeType":"222","messageId":"223","endLine":10,"endColumn":34},{"ruleId":"220","severity":1,"message":"248","line":61,"column":9,"nodeType":"222","messageId":"223","endLine":61,"endColumn":26},{"ruleId":"220","severity":1,"message":"225","line":2,"column":5,"nodeType":"222","messageId":"223","endLine":2,"endColumn":16},{"ruleId":"220","severity":1,"message":"227","line":2,"column":18,"nodeType":"222","messageId":"223","endLine":2,"endColumn":27},{"ruleId":"220","severity":1,"message":"249","line":2,"column":43,"nodeType":"222","messageId":"223","endLine":2,"endColumn":52},{"ruleId":"220","severity":1,"message":"229","line":2,"column":54,"nodeType":"222","messageId":"223","endLine":2,"endColumn":62},{"ruleId":"220","severity":1,"message":"230","line":5,"column":5,"nodeType":"222","messageId":"223","endLine":5,"endColumn":11},{"ruleId":"220","severity":1,"message":"231","line":5,"column":29,"nodeType":"222","messageId":"223","endLine":5,"endColumn":33},{"ruleId":"220","severity":1,"message":"250","line":7,"column":8,"nodeType":"222","messageId":"223","endLine":7,"endColumn":13},{"ruleId":"220","severity":1,"message":"251","line":8,"column":8,"nodeType":"222","messageId":"223","endLine":8,"endColumn":18},{"ruleId":"220","severity":1,"message":"233","line":10,"column":10,"nodeType":"222","messageId":"223","endLine":10,"endColumn":17},{"ruleId":"220","severity":1,"message":"252","line":11,"column":10,"nodeType":"222","messageId":"223","endLine":11,"endColumn":14},{"ruleId":"220","severity":1,"message":"247","line":11,"column":16,"nodeType":"222","messageId":"223","endLine":11,"endColumn":34},{"ruleId":"215","severity":1,"message":"216","line":20,"column":16,"nodeType":"217","messageId":"218","endLine":20,"endColumn":19,"suggestions":"253"},{"ruleId":"220","severity":1,"message":"254","line":7,"column":18,"nodeType":"222","messageId":"223","endLine":7,"endColumn":27},{"ruleId":"220","severity":1,"message":"255","line":45,"column":14,"nodeType":"222","messageId":"223","endLine":45,"endColumn":32},"callback-return",[],"global-require",[],"handle-callback-err",[],"id-blacklist",["256"],"lines-around-directive",["257"],"no-buffer-constructor",[],"no-catch-shadow",["258"],"no-mixed-requires",[],"no-native-reassign",["259"],"no-negated-in-lhs",["260"],"no-new-require",[],"no-path-concat",[],"no-process-env",[],"no-process-exit",[],"no-restricted-modules",[],"no-sync",[],"prefer-reflect",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["261","262"],"@typescript-eslint/no-unused-vars","'student' is assigned a value but never used.","Identifier","unusedVar","'setStudent' is assigned a value but never used.","'ChangeEvent' is defined but never used.","'Dispatch' is defined but never used.","'FormEvent' is defined but never used.","'SetStateAction' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'TypeGuard' is defined but never used.","'UserAPI' is defined but never used.","'LoggedInUser' is defined but never used.","'Location' is defined but never used.","'History' is defined but never used.","'useHistory' is defined but never used.","'useLocation' is defined but never used.","'LocationState' is defined but never used.","'setPageNumber' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","'FormControl' is defined but never used.","'Nav' is defined but never used.","'Navbar' is defined but never used.","'Link' is defined but never used.","'useRouteMatch' is defined but never used.","'UserIndexSignature' is defined but never used.","'studentID' is defined but never used.","'useEffect' is defined but never used.","'Modal' is defined but never used.","'ModalTitle' is defined but never used.","'User' is defined but never used.",["263","264"],"'setLesson' is assigned a value but never used.","'handleDeleteLesson' is defined but never used.","id-denylist","padding-line-between-statements","no-shadow","no-global-assign","no-unsafe-negation",{"messageId":"265","fix":"266","desc":"267"},{"messageId":"268","fix":"269","desc":"270"},{"messageId":"265","fix":"271","desc":"267"},{"messageId":"268","fix":"272","desc":"270"},"suggestUnknown",{"range":"273","text":"274"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"273","text":"275"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"276","text":"274"},{"range":"276","text":"275"},[638,641],"unknown","never",[729,732]]
>>>>>>> Stashed changes
